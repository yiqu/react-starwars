{"version":3,"file":"static/js/903.6a2c6f9f.chunk.js","mappings":"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","sources":["core/movies/movies/MovieCard.tsx","webpack://starwars/./src/shared/loading-backdrop/LoadingBackdrop.module.scss?ef27","shared/loading-backdrop/LoadingBackdrop.tsx","core/movies/movies/Movies.tsx","core/store/all-films/films.actions.ts","core/store/all-films/films.selectors.ts","core/store/favorites/favorites.selectors.ts","core/utils/films.utils.tsx","shared/components/date/DateDisplay.tsx","shared/models/general.model.ts","shared/rest/axios.ts","store/appHook.ts","../node_modules/@mui/icons-material/Favorite.js","../node_modules/@mui/icons-material/HourglassBottom.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Link } from \"react-router-dom\";\nimport FavIcon from '@mui/icons-material/Favorite';\nimport HourglassBottomIcon from '@mui/icons-material/HourglassBottom';\nimport IconButton from '@mui/material/IconButton';\nimport { useEffect, useState } from 'react';\nimport { Box, Stack } from \"@mui/material\";\nimport { getFilmFavoriteToggleTooltip } from \"src/core/utils/films.utils\";\nimport DateDisplay from \"src/shared/components/date/DateDisplay\";\nimport { StarwarsFilm, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { BASE_FIREBASE_URL } from \"src/shared/api/endpoints\";\nimport { axiosPost, axiosPut } from 'src/shared/rest/axios';\nimport urlcat from \"urlcat\";\nimport { AxiosResponse } from \"axios\";\n\nexport interface StarwarsFilmCardProps {\n  film: StarwarsFilm;\n  uid: string;\n  userId: string;\n  allFavoritesLoading?: boolean;\n  reloadMovies: () => void\n}\n\nexport default function MovieCard({ film, uid, userId, allFavoritesLoading, reloadMovies }: StarwarsFilmCardProps) {\n\n  const [saveFavLoading, setSaveFavLoading] = useState<boolean>(false);\n\n  const favoriteToggleHandler = () => {\n    const { url: filmUrl } = film;\n    const filmId = (filmUrl.split(\"/\"))[filmUrl.split(\"/\").length - 1];\n    const restUrl: string = urlcat(\n      BASE_FIREBASE_URL, \n      `swdb/:user/favorites${film.favorite?.fireId ? ('/'+film.favorite?.fireId) :''}.json`, \n      { user: userId }\n    );\n\n    const favorite: FavoriteToSave = {\n      filmUrl,\n      filmId,\n      lastUpdated: new Date().getTime(),\n      episodeId: film.episode_id,\n      isCurrentFavorite: true,\n    };\n\n    setSaveFavLoading(true);\n    if (film.favorite) {\n      favorite.isCurrentFavorite = !film.favorite.isCurrentFavorite;\n      favorite.fireId = film.favorite.fireId;\n      axiosPut<AxiosResponse>({ \n        url: restUrl, \n        body: favorite, \n        onSuccess: (res) => {\n          reloadMovies();\n        },\n        onFailure: (err) => {\n        },\n        onFinally: () => {\n          setSaveFavLoading(false);\n        }\n      });\n    } else {\n      axiosPost<AxiosResponse>({ \n        url: restUrl, \n        body: favorite, \n        onSuccess: (res) => {\n          reloadMovies();\n        },\n        onFailure: (err) => {\n        },\n        onFinally: () => {\n          setSaveFavLoading(false);\n        }\n      });\n    }\n  };\n\n  return (\n    <Card sx={ {display:'flex',\n      flexDirection:'column', \n      justifyContent:'space-between'} } \n      elevation={ 2 }\n    >\n      <div>\n        <CardMedia\n          component=\"img\"\n          alt=\"poster\"\n          height=\"440\"\n          image={ `${process.env.PUBLIC_URL}/assets/poster-img/${film.episode_id}.png` }\n          sx={ {backgroundColor: '#000', objectFit: 'contain'} }\n        />\n        <CardContent>\n          <Stack direction={ {lg: 'column', xl: 'row'} } justifyContent={ {xl:'space-between', lg:'flex-start'} }\n            marginBottom={ {lg:'10px', xl: '0px'} }>\n            <Typography gutterBottom variant=\"h5\" component={ Link } to={ `./${uid}` } sx={ {fontFamily:'Poppins',\n              fontWeight:'500'} }>\n              { film.title }\n            </Typography>\n            <Typography variant=\"h5\" color='text.secondary' sx={ {fontWeight: '300'} }>\n              EP { film.episode_id }\n            </Typography>\n          </Stack>\n          \n          <Stack spacing={ 1 }>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Released: <DateDisplay date={ film.release_date } format=\"MMM Do YYYY\" />\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Directed by: { film.director }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Produced by: { film.producer }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.primary\">\n              { film.opening_crawl }\n            </Typography>\n          </Stack>\n          \n        </CardContent>\n      </div>\n      \n      <CardActions sx={ {display: 'flex', justifyContent: 'space-between'} }>\n        <div>\n          <Button size=\"small\" component={ Link } to={ `./${uid}` }>\n            See More\n          </Button>\n        </div>\n        <div>\n          <IconButton \n            aria-label=\"favorite\" \n            onClick={ favoriteToggleHandler } \n            title={ getFilmFavoriteToggleTooltip(film.favorite) }\n            disabled={ !!(saveFavLoading || allFavoritesLoading) } >\n            { (saveFavLoading || allFavoritesLoading) ? <HourglassBottomIcon /> : <FavIcon color={ film.favorite?.isCurrentFavorite ? 'error' : 'disabled' } />}\n          </IconButton>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"loadingbackdrop\":\"LoadingBackdrop_loadingbackdrop__fzQLF\",\"spinner\":\"LoadingBackdrop_spinner__8-PXS\"};","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\nimport classes from './LoadingBackdrop.module.scss';\n\nexport interface LoadingBackdropProps {\n  isLoading?: boolean;\n  children?:  ReactNode | undefined;\n}\n\nfunction LoadingBackdrop({ isLoading, children }: LoadingBackdropProps) {\n\n  return (\n    <Box className={ isLoading ? `${classes.loadingbackdrop}` :'' } width=\"100%\">\n      { children }\n    </Box>\n  );\n};\n\nexport default LoadingBackdrop;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useContext } from \"react\";\nimport { Box, Button, IconButton, Stack, Tooltip, Typography } from \"@mui/material\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { useCallback, useMemo, useState, useEffect } from \"react\";\nimport useFetchFavorites from \"src/core/hooks/useFetchFavorites\";\nimport useFetchMovies from \"src/core/hooks/useFetchMovies\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport FilterInput from \"./filter/FilterInput\";\nimport MovieCard from \"./MovieCard\";\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport { useSearchParams } from \"react-router-dom\";\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ViewModuleIcon from '@mui/icons-material/ViewModule';\nimport { useDeepCompareEffect } from \"react-use\";\nimport { getSortedFilmsWithFavorited } from \"src/core/utils/films.utils\";\nimport LoadingBackdrop from \"src/shared/loading-backdrop/LoadingBackdrop\";\nimport SnackbarContext from \"src/shared/context/snackbar/SnackbarContext\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport { AXIOS_ERROR_CODE } from \"src/shared/models/axios.model\";\nimport * as fromAllFilmsSelectors from '../../store/all-films/films.selectors';\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport * as fromFavoriteFilmsActions from '../../store/favorites/favorites.actions';\nimport * as fromFavoriteFilmsSelectors from '../../store/favorites/favorites.selectors';\nimport * as fromAllFilmsActions from '../../store/all-films/films.actions';\nimport { fetchFavoritesAsyncThunk } from \"src/core/store/favorites/favorites.reducer\";\n\n\nconst userId = 'yqu';\n\nconst Movies = () => {\n  const dispatch = useAppDispatch();\n  const { showSnackbar } = useContext(SnackbarContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const currentDisplayModeUrl = searchParams.get(\"moviePageDisplayMode\");\n  const { isMobile } = useScreenSize();\n\n  const [filmPageDisplayMode, setFilmPageDisplayMode] = useState<string | null>(currentDisplayModeUrl);\n\n  const isFilmsLoading: boolean | undefined = useAppSelector(fromAllFilmsSelectors.selectIsLoading);\n  const isFilmsValidating: boolean | undefined = useAppSelector(fromAllFilmsSelectors.selectIsValidating);\n  const fetchFilmsError: any = useAppSelector(fromAllFilmsSelectors.selectError);\n  const favoritesLoading: boolean | undefined = useAppSelector(fromFavoriteFilmsSelectors.selectIsLoading);\n  const sortedFilms: ResultProperty<StarwarsFilm>[] = useAppSelector(fromAllFilmsSelectors.getAllFilmsWithFavorites);\n\n\n  /**\n   * Error handling\n   */\n  // useEffect(() => {\n  //   if (allFilmsError && allFilmsError.code !== AXIOS_ERROR_CODE.ERR_CANCELED) {\n  //     showSnackbar(\"error\", allFilmsError);\n  //   }\n  // }, [allFilmsError, showSnackbar]);\n\n  useEffect(() => {\n    dispatch(fetchFavoritesAsyncThunk({user: 'yqu'}));\n  }, [dispatch]);\n\n  /**\n   * Clean up - close any snackbars\n   */\n  useEffect(() => {\n    return (() => {\n      showSnackbar('info', undefined);\n    });\n  }, [showSnackbar]);\n\n  const onReloadMoviesHandler = () => {\n    dispatch(fetchFavoritesAsyncThunk({user: 'yqu'}));\n  };\n\n  const onFilterChangeHandler = useCallback((movieName: string) => {\n    dispatch(fromAllFilmsActions.setParams2({title: movieName}));\n  }, [dispatch]);\n\n  const filmPageDisplayToggleHandler = () => {\n    const nextDisplayMode = {\n      moviePageDisplayMode: getNextDisplayState(filmPageDisplayMode)\n    };\n    setSearchParams(nextDisplayMode);\n  };\n\n  return (\n    <>\n      <AppToolbar toolbarProps={ {\n        position:\"sticky\",\n        sx:{top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 } flexDirection={ { xs: 'row', sm: 'row' } } justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid xs={ 10 } sm={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n              <Grid container xs={ 12 }>\n                <Grid xs={ 8 }>\n                  <FilterInput filterChange={ onFilterChangeHandler } />\n                </Grid>\n                <Grid xs={ 2 } sx={ {display:'flex'} } justifyContent=\"center\" alignItems=\"center\">\n                  { isFilmsValidating && <ProgressCircle size={ 20 } /> }\n                </Grid>\n              </Grid>\n            </Stack>\n          </Grid>\n          <Grid xs={ 2 } sm={ 8 }>\n            <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\">\n              <Tooltip title={ `Switch to ${getNextDisplayState(filmPageDisplayMode)}` }>\n                <IconButton onClick={ filmPageDisplayToggleHandler }>\n                  { filmPageDisplayMode === DataBlockDisplayMode.CARD ? (<TableChartIcon />) : (<ViewModuleIcon  />) }\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n\n      {\n        <LoadingBackdrop isLoading={ isFilmsLoading }>\n          {\n            fetchFilmsError ? <ErrorPage reason={ 'Failed loading all films.' } debug={ fetchFilmsError } /> :\n            (\n              <Stack direction=\"column\" p={ 2 } width=\"100%\">\n                <Grid container disableEqualOverflow rowSpacing={ 4 }>\n                  { sortedFilms?.map((film) => {\n                    return (\n                      <Grid key={ film.properties.episode_id } xs={ 12 } sm={ 4 } smOffset={ 4 }>\n                        <MovieCard \n                          userId={ userId }\n                          reloadMovies={ onReloadMoviesHandler }\n                          film={ film.properties } \n                          uid={ film.uid }\n                          allFavoritesLoading={ favoritesLoading }\n                           />\n                      </Grid>\n                    );\n                  }) }\n                </Grid>\n              </Stack>\n            )\n          }\n        </LoadingBackdrop>\n      }\n    </>\n  );\n};\n\nexport default Movies;\n\nconst getNextDisplayState = (current: any) => {\n  if (!current) {\n    return DataBlockDisplayMode.CARD;\n  }\n  return current === DataBlockDisplayMode.CARD ? DataBlockDisplayMode.TABLE : DataBlockDisplayMode.CARD;\n};\n","import { createAction } from '@reduxjs/toolkit';\nimport { map } from 'rxjs';\nimport { ajax, AjaxResponse } from 'rxjs/ajax';\nimport { HttpParams } from 'src/shared/models/http.model';\nimport { HttpResponse2List, ResultProperty, StarwarsFilm } from 'src/shared/models/starwars.model';\nimport { allFilmsSlice } from './films.reducer';\n\nexport const { fetchFailure, fetchPayloadSuccess, setValidating, setLoading, setUrl, setParams2 } = allFilmsSlice.actions;\n\n/**\n * NOT USED - Using SWR\n * @param params \n * @returns \n */\nexport const fetchAllFilmsThunk = (params: any) => {\n  return (dispatch: any, getState: any) => {\n\n    ajax<HttpResponse2List<ResultProperty<StarwarsFilm>>>('https://www.swapi.tech/api/films')\n      .pipe(\n        map((res: AjaxResponse<HttpResponse2List<ResultProperty<StarwarsFilm>>>) => {\n          return res.response;\n        })\n      )\n      .subscribe({\n        next: (res) => {\n\n        },\n        error: (err) => {\n          \n        },\n      });\n  };\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { FavoriteMoviesObjList, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { RootState } from \"src/store/appStore\";\nimport * as fromFilmsReducer from './films.reducer';\nimport * as fromFavFilmsSelectors from '../favorites/favorites.selectors';\nimport { getSortedFilmsWithFavorited } from \"src/core/utils/films.utils\";\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport produce from \"immer\";\n\nconst allFilmsSlice = (state: RootState) => {\n  return state.allFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  fromFilmsReducer.adapter.getSelectors((state: RootState) => state.allFilms);\n\nexport const selectIsLoading = (state: RootState) => {\n  return allFilmsSlice(state).isLoading;\n};\n\nexport const selectIsValidating = (state: RootState) => {\n  return allFilmsSlice(state).isValidating;\n};\n\nexport const selectApiUrl = (state: RootState) => {\n  return allFilmsSlice(state).apiUrl;\n};\n\nexport const selectApiParams = (state: RootState) => {\n  return allFilmsSlice(state).apiParams;\n};\n\nexport const selectError = (state: RootState) => {\n  return allFilmsSlice(state).errMsg;\n};\n\n\nexport const getAllFilmsWithFavorites = createSelector(\n  selectAll,\n  fromFavFilmsSelectors.selectAllByEpId,\n  (allFilms: ResultProperty<StarwarsFilm>[], favFilmsMap: FavoriteMoviesObjList): ResultProperty<StarwarsFilm>[] => {\n    const result = getSortedFilmsWithFavorited(allFilms, favFilmsMap);\n    return result;\n  }\n);\n\nexport const getFetchParams = createSelector(\n  selectApiParams,\n  (params: HttpParams | undefined) => {\n    let p = {\n      ...params\n    };\n    const keys = Object.keys(p);\n    keys.forEach((key) => {\n      const value = `${p[key]}`.trim();\n      if (value === '') {\n        delete p[key];\n      }\n    });\n    return p;\n  }\n);","import { createSelector, createAction } from \"@reduxjs/toolkit\";\nimport { FavoriteMoviesObjList, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { RootState } from \"src/store/appStore\";\nimport * as fromFavoritesReducer from './favorites.reducer';\nimport produce from 'immer';\n\n\nconst favoriteFilmsSlice = (state: RootState) => {\n  return state.favoriteFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  fromFavoritesReducer.adapter.getSelectors((state: RootState) => state.favoriteFilms);\n\nexport const selectIsLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).loading;\n};\n\nexport const selectIsFirstTimeLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).firstTimeLoading;\n};\n\nexport const selectError = (state: RootState) => {\n  return favoriteFilmsSlice(state).error;\n};\n\nexport const selectErrorMsg = (state: RootState) => {\n  return favoriteFilmsSlice(state).errMsg;\n};\n\nexport const selectAllByEpId = createSelector(\n  selectAll,\n  (state: FavoriteToSave[]): FavoriteMoviesObjList => {\n    const allFavs = state;\n    const transformedData: FavoriteMoviesObjList = {};\n    allFavs.forEach((fav: FavoriteToSave) => {\n      transformedData[fav.episodeId] = {\n        ...fav\n      };\n    });\n    return transformedData;\n  }\n);","import { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport moment from 'moment';\nimport produce from 'immer';\nimport { Dictionary } from \"@reduxjs/toolkit\";\n\n\nexport const getFilmFavoriteToggleTooltip = (favorited?: FavoriteToSave) => {\n  let tooltip: string = '';\n  const dateFromNow = favorited?.lastUpdated ? (moment(favorited?.lastUpdated).fromNow()) : ('');\n\n  if (favorited?.isCurrentFavorite) {\n    tooltip = 'Remove from favorites';\n  } else {\n    tooltip = 'Add to favorites';\n  }\n\n  if (favorited?.lastUpdated) {\n    tooltip = tooltip + '. ' + (favorited.isCurrentFavorite ? 'Favorited ' : 'Unfavorited ') + dateFromNow;\n  }\n\n  return tooltip;\n};\n\nexport const getSortedFilmsWithFavorited = (allFilms: ResultProperty<StarwarsFilm>[] | undefined, favorited: Dictionary<FavoriteToSave>): ResultProperty<StarwarsFilm>[] => {\n  const result = produce((allFilms ?? []), (draft: ResultProperty<StarwarsFilm>[]) => {\n    draft.sort((prev: ResultProperty<StarwarsFilm>, next: ResultProperty<StarwarsFilm>) => {\n      return prev.properties.episode_id > next.properties.episode_id ? 1 : -1;\n    });\n    draft.forEach((res: ResultProperty<StarwarsFilm>) => {\n      res.properties.favorite = favorited[res.properties.episode_id];\n    });\n  });\n\n  return result;\n};","import { Tooltip } from '@mui/material';\nimport Moment from 'react-moment';\nimport moment from 'moment';\n\nexport interface DateDisplayProp {\n  date: string | number;\n  fromNow?: boolean;\n  format?: string;\n}\n\nconst DateDisplay = ({ date=0, fromNow=true, format=\"MM/DD/YY HH:mm\" }: DateDisplayProp) => {\n\n  return (\n    <Tooltip title={ date ? moment(date).format(format) : 'No date found' }>\n      <span>\n        {date ? (<Moment date={ date } fromNow={ fromNow } />) : (<>N/A</>)}\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default DateDisplay;","export enum DataBlockDisplayMode {\n  TABLE = \"table\",\n  CARD = \"card\"\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\n\nexport interface HttpAction<T> {\n  url: string;\n  body?: any;\n  abortController?: AbortController;\n  onSuccess: (data: T) => void;\n  onFailure: (errorData: any) => void;\n  onFinally?: () => void;\n}\n/**\n * Create a Axios instance\n * @param baseUrl \n * @returns \n */\nexport const getAxiosInstance = (baseUrl: string) => {\n  const axiosInstance = axios.create({\n    baseURL: baseUrl,\n    timeout: 5000,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    responseType: 'json'\n  });\n  return axiosInstance;\n};\n\nexport const axiosGet = <T>({ url, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.get(url)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data as T);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error GET: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\n\nexport const axiosPost = <T>({ url, body, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.post(url, body)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error POST: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\nexport const axiosPut = <T>({ url, body, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.put(url, body)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error PUT: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\nexport const axiosDelete = <T>({ url, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.delete(url)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error DELETE: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\nexport default getAxiosInstance;","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n}), 'Favorite');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m18 22-.01-6L14 12l3.99-4.01L18 2H6v6l4 4-4 3.99V22h12zM8 7.5V4h8v3.5l-4 4-4-4z\"\n}), 'HourglassBottom');\n\nexports.default = _default;"],"names":["MovieCard","film","uid","userId","allFavoritesLoading","reloadMovies","useState","saveFavLoading","setSaveFavLoading","Card","sx","display","flexDirection","justifyContent","elevation","CardMedia","component","alt","height","image","process","episode_id","backgroundColor","objectFit","CardContent","Stack","direction","lg","xl","marginBottom","Typography","gutterBottom","variant","Link","to","fontFamily","fontWeight","title","color","spacing","DateDisplay","date","release_date","format","director","producer","opening_crawl","CardActions","Button","size","IconButton","onClick","filmUrl","url","filmId","split","length","restUrl","urlcat","BASE_FIREBASE_URL","favorite","fireId","user","lastUpdated","Date","getTime","episodeId","isCurrentFavorite","axiosPut","body","onSuccess","res","onFailure","err","onFinally","axiosPost","getFilmFavoriteToggleTooltip","disabled","HourglassBottom","isLoading","children","Box","className","classes","width","dispatch","useAppDispatch","showSnackbar","useContext","SnackbarContext","useSearchParams","searchParams","setSearchParams","currentDisplayModeUrl","get","isMobile","useScreenSize","filmPageDisplayMode","isFilmsLoading","useAppSelector","fromAllFilmsSelectors","isFilmsValidating","fetchFilmsError","favoritesLoading","fromFavoriteFilmsSelectors","sortedFilms","useEffect","fetchFavoritesAsyncThunk","undefined","onReloadMoviesHandler","onFilterChangeHandler","useCallback","movieName","fromAllFilmsActions","toolbarProps","position","top","container","xs","sm","alignItems","FilterInput","filterChange","Tooltip","getNextDisplayState","nextDisplayMode","moviePageDisplayMode","DataBlockDisplayMode","TableChart","ViewModule","ErrorPage","reason","debug","p","disableEqualOverflow","rowSpacing","map","smOffset","properties","current","allFilmsSlice","fetchFailure","fetchPayloadSuccess","setValidating","setLoading","setParams2","setUrl","state","allFilms","fromFilmsReducer","selectAll","selectIsLoading","selectById","selectEntities","selectIds","selectTotal","selectIsValidating","isValidating","selectError","errMsg","getAllFilmsWithFavorites","createSelector","fromFavFilmsSelectors","favFilmsMap","getSortedFilmsWithFavorited","getFetchParams","apiParams","params","Object","keys","forEach","key","trim","favoriteFilmsSlice","favoriteFilms","fromFavoritesReducer","loading","selectAllByEpId","transformedData","fav","favorited","tooltip","dateFromNow","moment","fromNow","produce","draft","sort","prev","next","abortController","axios","then","data","catch","console","log","finally","useDispatch","useSelector","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}