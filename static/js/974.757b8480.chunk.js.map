{"version":3,"file":"static/js/974.757b8480.chunk.js","mappings":"0JAAYA,E,sJAGX,SAHWA,GAAAA,EAAoB,cAApBA,EAAoB,YAG/B,CAHWA,IAAAA,EAAoB,K,sBC2EhC,EA7Da,WAEX,OAAwCC,EAAAA,EAAAA,MAAiB,eAAlDC,EAAY,KAAEC,EAAe,KAC9BC,EAAwBF,EAAaG,IAAI,wBAC/C,GAAsDC,EAAAA,EAAAA,UAAwBF,GAAsB,eAA7FG,EAAmB,KAAEC,EAAsB,KAmBlD,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAcV,EAAqBW,KACnCP,IACFM,EAAcN,IAA0BJ,EAAqBW,KAAOX,EAAqBW,KAAOX,EAAqBY,OAEvHJ,EAAuBE,EACzB,GAAG,CAACN,KAKF,SAAC,WAAc,WACb,UAAC,IAAI,CAACS,WAAS,aAEb,SAAC,IAAI,CAACC,GAAK,GAAI,UACb,SAACC,EAAA,EAAM,CAACC,SAAS,SAASC,UAAY,EAAG,UACvC,SAACC,EAAA,EAAO,CAACC,QAAQ,QAAQC,GAAK,CAACC,QAAS,OAAQC,MAAO,QAAS,UAC9D,UAACC,EAAA,EAAK,CAACC,UAAU,MAAMC,eAAe,gBAAgBC,MAAM,OAAM,WAChE,SAACC,EAAA,EAAU,CAACC,UAAU,MAAMR,GAAK,CAACS,QAAS,QAAS,UAClD,UAACC,EAAA,EAAM,CAACR,MAAM,UAAUH,QAAQ,OAAM,WACpC,SAACY,EAAA,EAAW,CAACX,GAAK,CAACY,GAAI,UAAY,gBAIvC,SAACL,EAAA,EAAU,CAACC,UAAU,MAAMR,GAAK,CAACS,QAAS,QAAS,UAClD,SAACI,EAAA,EAAO,CAACC,MAAK,oBAAgBC,EAAoB5B,IAAwB,UACxE,SAAC6B,EAAA,EAAU,CAACC,QAjCO,WACnC,IAAMC,EAAkB,CACtBC,qBAAsBJ,EAAoB5B,IAE5CJ,EAAgBmC,EAClB,EA4BsE,SAEhD/B,IAAwBP,EAAqBW,MAAQ,SAAC6B,EAAA,EAAc,KAAQ,SAACC,EAAA,EAAc,oBAU3G,SAACC,EAAA,EAAO,CAACtB,GAAK,CAACM,MAAO,WAEtB,SAAC,KAAM,QAMf,EAIMS,EAAsB,SAACQ,GAC3B,OAAKA,GAGEA,IAAY3C,EAAqBW,KAAOX,EAAqBY,MAF3DZ,EAAqBW,IAGhC,C","sources":["shared/models/general.model.ts","core/movies/Core.tsx"],"sourcesContent":["export enum DataBlockDisplayMode {\n  TABLE = \"table\",\n  CARD = \"card\"\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { createSearchParams, Outlet, useNavigate, useSearchParams } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Button from \"@mui/material/Button\";\nimport { Divider, IconButton, Stack, Tooltip, Typography } from \"@mui/material\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport ViewModuleIcon from '@mui/icons-material/ViewModule';\n\n\nconst Core = () => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const currentDisplayModeUrl = searchParams.get(\"moviePageDisplayMode\");\n  const [filmPageDisplayMode, setFilmPageDisplayMode] = useState<string | null>(currentDisplayModeUrl);\n\n  const filmPageDisplayToggleHandler = () => {\n    const nextDisplayMode = {\n      moviePageDisplayMode: getNextDisplayState(filmPageDisplayMode)\n    };\n    setSearchParams(nextDisplayMode);\n  };\n\n  useEffect(() => {\n    let currentMode = DataBlockDisplayMode.CARD;\n    if (currentDisplayModeUrl) {\n      currentMode = currentDisplayModeUrl === DataBlockDisplayMode.CARD ? DataBlockDisplayMode.CARD : DataBlockDisplayMode.TABLE;\n    }\n    setFilmPageDisplayMode(currentMode);\n  }, [currentDisplayModeUrl]);\n\n\n\n  return (\n    <React.Fragment>\n      <Grid container>\n\n        <Grid xs={ 12 }>\n          <AppBar position=\"sticky\" elevation={ 0 }>\n            <Toolbar variant=\"dense\" sx={ {bgcolor: '#fff', color: '#000'} }>\n              <Stack direction=\"row\" justifyContent=\"space-between\" width=\"100%\">\n                <Typography component=\"div\" sx={ {display: 'flex'} }>\n                  <Button color=\"inherit\" variant=\"text\">\n                    <RefreshIcon sx={ {mr: '10px'} } />\n                    Refresh\n                  </Button>\n                </Typography>\n                <Typography component=\"div\" sx={ {display: 'flex'} }>\n                  <Tooltip title={ `Switch to ${getNextDisplayState(filmPageDisplayMode)}` }>\n                    <IconButton onClick={ filmPageDisplayToggleHandler }>\n                      {\n                        filmPageDisplayMode === DataBlockDisplayMode.CARD ? (<TableChartIcon />) : (<ViewModuleIcon  />)\n                      }\n                    </IconButton>\n                  </Tooltip>\n                </Typography>\n              </Stack>\n            </Toolbar>\n          </AppBar>\n        </Grid>\n\n        <Divider sx={ {width: '100%'} } />\n\n        <Outlet />\n\n      </Grid>\n      \n    </React.Fragment>\n  );\n};\n\nexport default Core;\n\nconst getNextDisplayState = (current: any) => {\n  if (!current) {\n    return DataBlockDisplayMode.CARD;\n  }\n  return current === DataBlockDisplayMode.CARD ? DataBlockDisplayMode.TABLE : DataBlockDisplayMode.CARD;\n};"],"names":["DataBlockDisplayMode","useSearchParams","searchParams","setSearchParams","currentDisplayModeUrl","get","useState","filmPageDisplayMode","setFilmPageDisplayMode","useEffect","currentMode","CARD","TABLE","container","xs","AppBar","position","elevation","Toolbar","variant","sx","bgcolor","color","Stack","direction","justifyContent","width","Typography","component","display","Button","Refresh","mr","Tooltip","title","getNextDisplayState","IconButton","onClick","nextDisplayMode","moviePageDisplayMode","TableChart","ViewModule","Divider","current"],"sourceRoot":""}