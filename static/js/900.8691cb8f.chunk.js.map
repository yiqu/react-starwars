{"version":3,"file":"static/js/900.8691cb8f.chunk.js","mappings":"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","sources":["404/ErrorPage.tsx","core/shared/display/SimpleGridDisplay.tsx","core/shared/search/SearchAutoComplete.tsx","core/species/all/SpeciesAll.tsx","core/store/swapi/swapi.selectors.ts","shared/components/layouts/LayoutWithGutter.tsx","shared/components/progress/CircleProgress.tsx","shared/components/toolbar/Toolbar.tsx","shared/hooks/useDebounce.ts","shared/hooks/useIsMobile.ts","webpack://starwars/./src/shared/loading/full-logo/LoadingLogo.module.scss?618b","shared/loading/full-logo/LoadingLogo.tsx","shared/utils/general.utils.ts","../node_modules/react-use/esm/useUpdateEffect.js","../node_modules/react-use/esm/useFirstMountState.js"],"sourcesContent":["import { Box, Stack, Typography } from \"@mui/material\";\n\nexport interface ErrorPageProp {\n  reason?: string;\n  debug?: any;\n}\n\nexport default function ErrorPage({ reason, debug }: ErrorPageProp) {\n\n  return (\n    <Box marginY={ 5 } width=\"100%\">\n      <Stack direction=\"column\" spacing={ 5 } justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"h5\" sx={ {textTransform:'uppercase'} }>\n          An error has occurred!\n        </Typography>\n\n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            REASON\n          </Typography>\n          <Typography variant=\"body2\">\n            { reason }\n          </Typography>\n        </Stack>\n        \n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            DEBUG\n          </Typography>\n          <Typography variant=\"body2\" component=\"div\">\n            <pre>\n              <code style={ {display: 'flex', textAlign: 'center'} }>\n                { JSON.stringify(debug) }\n              </code>\n            </pre>\n          </Typography>\n        </Stack>\n      </Stack>\n    </Box>\n  );\n};","import { FC, ReactNode, useState } from \"react\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { Link } from \"react-router-dom\";\nimport { Box, Divider, Pagination, Stack, Typography } from \"@mui/material\";\nimport { StarwarsContent } from \"src/shared/models/starwars.model\";\nimport { filter, interval, take, tap } from \"rxjs\";\nimport { ellipsis, flexCenter } from \"src/shared/utils/css.utils\";\nimport LayoutWithGutter from \"src/shared/components/layouts/LayoutWithGutter\";\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { range } from 'lodash';\nimport { PAGE_LIMIT_30 } from \"src/shared/utils/constants\";\n\nexport interface SimpleGridDisplayProps {\n  data: StarwarsContent[];\n  itemUrlPath: string;\n  gutterSize?: \"full\" | \"med\" | \"skinny\";\n  totalPages?: number;\n  page?: number;\n  totalRecords?: number;\n  onPaged?: (event: React.ChangeEvent<unknown>, page: number) => void;\n  isFetching?: boolean;\n  children?: ReactNode;\n}\n\nfunction SimpleGridDisplay({ data, itemUrlPath, gutterSize=\"med\", totalPages=0, page=0, totalRecords=0, isFetching, onPaged }: SimpleGridDisplayProps) {\n\n  const pageSelectionHandler = (e: SelectChangeEvent) => {\n    onPaged && onPaged(null as any, +e.target.value);\n  };\n\n  return (\n    <LayoutWithGutter size={ gutterSize }>\n      { (totalPages > 0) && <Grid xs={ 12 } mb={ 2 } id=\"top-pagination\">\n        <Stack direction=\"row\" sx={ {justifyContent:\"space-between\", alignItems:\"center\"} } width=\"100%\">\n          <Box sx={ { minWidth: 120 } }>\n            <FormControl fullWidth size=\"small\" variant=\"standard\">\n              <InputLabel id=\"page-selection\">Page</InputLabel>\n              <Select\n                labelId=\"page-selection\"\n                id=\"demo-simple-select\"\n                value={ `${page}` }\n                label=\"Age\"\n                onChange={ pageSelectionHandler }>\n                {\n                  range(1, totalPages+1, 1).map((num) => {\n                    return <MenuItem value={ num } key={ num }>{num}</MenuItem>;\n                  })\n                }\n              </Select>\n            </FormControl>\n          </Box>\n          <Box>\n            <Typography color=\"text.secondary\" sx={ {lineHeight: 1} }> \n              {((page-1) * PAGE_LIMIT_30)+1} - {(page===totalPages) ? totalRecords : page*PAGE_LIMIT_30} of { totalRecords } \n            </Typography>\n          </Box>\n          \n        </Stack>\n      </Grid> }\n      {\n        data.map((display: StarwarsContent) => {\n          return (\n            <Grid key={ display.uid } xs={ 12 } sm={ 6 } md={ 4 } xl={ 2.4 }>\n              {\n                <Box sx={ {p: 1} }>\n                  <Link to={ `/${itemUrlPath}/${display.uid}` }>\n                    <DisplayName name={ display.name } id={ display.uid } />\n                  </Link>\n                </Box>\n              }\n            </Grid>\n          );\n        })\n      }\n\n      {\n        (onPaged && (totalPages > 0)) && (\n          <Grid xs={ 12 } mt={ 2 }>\n            <Stack direction=\"row\" sx={ {...flexCenter} } width=\"100%\">\n              <Pagination count={ totalPages } shape=\"rounded\" page={ page } showFirstButton showLastButton \n                onChange={ onPaged } disabled={ isFetching } />\n            </Stack>\n          </Grid>\n        )\n      }\n      \n    </LayoutWithGutter>\n  );\n};\n\nexport default SimpleGridDisplay;\n\nexport function DisplayName({ name, id }: {name: string; id: string}) {\n\n  const [className, setClassName] = useState<string>('');\n  const [ animating, setAnimating] = useState<boolean>(false);\n\n  const onMouseOverHandler = () => {\n    if (!animating) {\n      setAnimating(true);\n      setClassName(\"animate__animated animate__headShake\");\n      interval(600).pipe(\n        take(2)\n      ).subscribe({\n        complete: () => {\n          setClassName(\"\");\n          setAnimating(false);\n        }\n      });\n    }\n  };\n\n  return (\n    <Stack direction=\"row\" sx={ {fontWeight:'500', p: 1, ...flexCenter, border: '1px solid #ddd', borderRadius: '10px',} } title={ `#${id} ${name}` }\n      className={ className } >\n      <Typography variant=\"h6\" sx={ {...ellipsis} }>\n        { name } \n      </Typography>\n    </Stack>\n  );\n}","import { Autocomplete, AutocompleteRenderInputParams, InputAdornment, TextField, Stack, Box } from \"@mui/material\";\nimport { skipToken } from \"@reduxjs/toolkit/query/react\";\nimport { useEffect, useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport { useSearchContentQuery } from \"src/core/store/swapi/swapi\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { useDebounce } from \"src/shared/hooks/useDebounce\";\nimport { ResultProperty, StarwarsSearchable } from \"src/shared/models/starwars.model\";\n\nexport interface SearchAutoCompleteProps {\n  entity: string;\n  onResultSelect: (selection: ResultProperty<StarwarsSearchable> | null) => void;\n}\n\nfunction SearchAutoComplete({ entity, onResultSelect }: SearchAutoCompleteProps) {\n\n  // dropdown options\n  const [options, setOptions] = useState<readonly ResultProperty<StarwarsSearchable>[]>([]);\n  // dropdown selection\n  const [value, setValue] = useState<ResultProperty<StarwarsSearchable> | null>(null);\n  // user text input\n  const [inputValue, setInputValue] = useState<string | null>(null);\n  const debouncedInputValue = useDebounce<string | null>(inputValue, 600);\n\n  const { data, isFetching, error, isError, refetch } = useSearchContentQuery(debouncedInputValue ? {\n    entity,\n    name: debouncedInputValue\n  } : skipToken);\n\n  useEffect(() => {\n    setOptions(data ?? []);\n  }, [data]);\n\n  useUpdateEffect(() => {\n  }, [debouncedInputValue]);\n\n  /**\n   * Drop down selection change\n   * @param selected selected from dropdown\n   */\n  const onChangeHandler = (selected: ResultProperty<StarwarsSearchable> | null) => {\n    setOptions(selected ? [selected] : options);\n    setValue(selected);\n    onResultSelect(selected);\n  };\n\n  /**\n   * Input text change\n   * @param event \n   * @param value user's input text\n   */\n  const onInputChangeHandler = (event: any, value: string) => {\n    setInputValue(value);\n  };\n\n  const onRenderOption = (props: any, option: any) => {\n  };\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n      <Autocomplete\n        disablePortal\n        id=\"search-entity-autocomplete\"\n        options={ options }\n        fullWidth\n        autoHighlight\n        blurOnSelect\n        filterOptions={ (x) => x }\n        value={ value }\n        getOptionLabel={ (option) => {\n          return option.properties.name;\n        } }\n        noOptionsText = { `Search for ${entity}` }\n        loading= { isFetching }\n        renderInput={ (params: AutocompleteRenderInputParams) => <AutoCompleteTextField params={ params } entity={ entity } /> }\n        onChange={ (event: any, newValue: ResultProperty<StarwarsSearchable> | null) => {\n          onChangeHandler(newValue);\n        } }\n        onInputChange={ (event, newInputValue) => onInputChangeHandler(event, newInputValue) }\n        isOptionEqualToValue = { (option: ResultProperty<StarwarsSearchable>, value: ResultProperty<StarwarsSearchable>) => { return option.uid === value.uid; } }\n      />\n      <Box ml={ 2 }>\n        { isFetching && <ProgressCircle size={ 20 } /> }\n      </Box>\n    </Stack>\n  );\n}\n\nexport default SearchAutoComplete;\n\nfunction AutoCompleteTextField({params, entity}: {params: AutocompleteRenderInputParams, entity: string}) {\n  return (\n    <TextField { ...params } label={ `Filter ${entity}` } variant=\"standard\" />\n  );\n}","import AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { Stack, Tooltip, IconButton, Typography, Divider, Box, Button } from \"@mui/material\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport SimpleGridDisplay, { DisplayName } from \"src/core/shared/display/SimpleGridDisplay\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport LoadingLogo from \"src/shared/loading/full-logo/LoadingLogo\";\nimport { starwarsContentApi, useFetchSpeciesQuery } from \"src/core/store/swapi/swapi\";\nimport { selectPage, selectTotalPages } from \"src/core/store/swapi/swapi.selectors\";\nimport { dispatchPaging } from \"src/core/store/swapi/swapi.reducer\";\nimport { scrollToElementById } from \"src/shared/utils/general.utils\";\nimport SearchAutoComplete from \"src/core/shared/search/SearchAutoComplete\";\nimport { ResultProperty, StarwarsSearchable, StarwarsSpecie } from \"src/shared/models/starwars.model\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst ENTITY_NAME = \"species\";\n\nfunction SpeciesAll() {\n\n  const { isMobile } = useScreenSize();\n  const dispatch = useAppDispatch();\n  const page: number = useAppSelector(selectPage(ENTITY_NAME));\n  const totalPages: number = useAppSelector(selectTotalPages(ENTITY_NAME));\n  const { data, isFetching, isLoading, error, isSuccess, isError, refetch } = useFetchSpeciesQuery({ \n    entity: ENTITY_NAME, \n    pagination: { page }\n  });\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    scrollToElementById('top-pagination', 300, \"end\");\n  }, [isSuccess]);\n\n  const onPageHandler = (_: React.ChangeEvent<unknown>, page: number) => {\n    dispatch(dispatchPaging({entityId: ENTITY_NAME, pagination: {page: page}}));\n  };\n\n  const onResultSelectHandler = (selection: ResultProperty<StarwarsSearchable> | null) => {\n    navigate(`./${selection?.uid}`);\n  };\n\n  if (isLoading) return (\n    <Stack direction=\"column\" width=\"100%\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n      <LoadingLogo message={ ENTITY_NAME } />\n    </Stack>\n  );\n\n  if (isError) {\n    return <ErrorPage reason={ (error as any).status } debug={ (error as any).error } />;\n  }\n\n  if (!data) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n        position: \"sticky\",\n        sx: {top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 }>\n          <Grid xs={ 10 } sm={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n              <SearchAutoComplete entity={ ENTITY_NAME } onResultSelect={ onResultSelectHandler } />\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n      <Box mt={ 2 } mx={ isMobile ? 2 : 0 }>\n        <SimpleGridDisplay data={ data.results } itemUrlPath={ ENTITY_NAME } totalPages={ totalPages } page={ page } onPaged={ onPageHandler }\n          totalRecords={ data.total_records } isFetching={ isFetching }  />\n      </Box>\n    </Stack>\n  );\n};\n\nexport default SpeciesAll;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\nimport { Pagination } from \"src/shared/models/http.model\";\nimport { RootState } from \"src/store/appStore\";\n\nconst swapiConfigSlice = (state: RootState) => {\n  return state.swapiConfig;\n};\n\nexport const selectPagination = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): Pagination | undefined => {\n    return slice.pagination[entityId]?.pagination;\n  }\n);\n\nexport const selectPage = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.page ?? 1;\n  }\n);\n\nexport const selectTotalPages = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.total_pages ?? 0;\n  }\n);\n\nexport const selectTotalRecords = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.total_records ?? 0;\n  }\n);\n\nexport const selectNextPageUrl = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): string | null | undefined=> {\n    return slice.pagination[entityId]?.pagination.next;\n  }\n);\n\nexport const selectFetchPageUrl = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): string | undefined=> {\n    return slice.pagination[entityId]?.pagination.fetchUrl ?? `${BASE_SW_API}${entityId}?page=1&limit=30`;\n  }\n);","import Grid from '@mui/material/Unstable_Grid2';\nimport { ReactNode } from 'react';\n\nexport interface LayoutGutterProps {\n  children: ReactNode;\n  size?: \"full\" | \"med\" | \"skinny\"\n}\n\nfunction LayoutWithGutter({ size = \"med\", children }: LayoutGutterProps) {\n\n  return (\n    // <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } sm={ sizes.width } smOffset={ sizes.offset }>\n    //   { children }\n    // </Grid>\n    <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } \n      sm={ size==='full' ? 12 : (size === 'med' ? 7 : (4)) } \n      smOffset={ size==='full' ? 0 : (size === 'med' ? 2.5 : (4)) }>\n      { children }\n    </Grid>\n  );\n}\n\nexport default LayoutWithGutter;","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Theme } from '@emotion/react';\nimport { SxProps } from '@mui/material';\n\nexport default function ProgressCircle({ size=40, color='grey.500', styleProps }: {size?: number, color?: string, styleProps?: SxProps<Theme>}) {\n  return (\n    <Stack sx={ { color: color, ...styleProps } } spacing={ 1 } direction=\"row\">\n      <CircularProgress color=\"inherit\" size={ size } />\n    </Stack>\n  );\n}","import { AppBar, Stack, Button, Tooltip, IconButton, AppBarTypeMap } from \"@mui/material\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport Toolbar from '@mui/material/Toolbar';\nimport { GREY } from \"src/theme/palette\";\n\ninterface ToolbarProps {\n  toolbarProps: any;\n  children: any;\n}\n\nexport default function AppToolbar({ toolbarProps, children }: ToolbarProps) {\n  \n  return (\n    <AppBar elevation={ 0 } { ...toolbarProps }>\n      <Toolbar \n        variant=\"regular\" \n        sx={ {bgcolor: (theme) => theme.palette.mode === 'light' ? GREY[100] : null, \n          color: (theme) => theme.palette.mode === 'light' ? '#000' : null,\n          pr: 0\n        } }>\n        { children }\n      </Toolbar>\n    </AppBar>\n  );\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * A media query string\n * which matches screen widths less than the screen size given by the breakpoint key (down)\n * @returns \n */\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.down('md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.down('xl'));\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize\n  };\n\n};\n\nexport default useScreenSize;","// extracted by mini-css-extract-plugin\nexport default {\"parentClass\":\"LoadingLogo_parentClass__NFHXT\",\"loadingLogo\":\"LoadingLogo_loadingLogo__BqUtz\",\"loadingParent\":\"LoadingLogo_loadingParent__VASnq\",\"loading-container\":\"LoadingLogo_loading-container__cjLsJ\",\"whole-page\":\"LoadingLogo_whole-page__DkCG7\",\"ldsFacebook\":\"LoadingLogo_ldsFacebook__pRdY2\",\"lds-facebook\":\"LoadingLogo_lds-facebook__JLntj\"};","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useReducer, useState, useContext, useMemo, Suspense } from 'react';\nimport classes from './LoadingLogo.module.scss';\nimport logo from '../../../static/img/death-star.png';\n\nexport interface LoadingLogoProps {\n  message: string;\n  children?: any;\n}\n\nexport default function LoadingLogo(props: LoadingLogoProps) {\n\n\n  return (\n    <div className={ `${classes.parentClass} w-100` }>\n      <div>\n        <div className={ classes.loadingLogo }>\n          <img src={ logo }\n            className={ `${classes.logoImg} d-inline-block` } alt=\"logo\" />\n        </div>\n    \n      </div>\n      <div className={ classes.loadingParent }>\n        <div className={ classes.ldsFacebook }><div></div><div></div><div></div></div>\n      </div>\n      <div className={ classes.secfont }>\n        Loading {props.message} ...\n      </div>\n    </div>\n  );\n};","\nexport function scrollToElementById(id: string, timeout?: number, position?: ScrollLogicalPosition): void {\n  let top = document.getElementById(id);\n  if (top) {\n    setTimeout(() => {\n      top?.scrollIntoView({block: position as any ?? \"end\"});\n      top = null;\n    }, timeout ?? 0);\n  }\n}\n\nexport function scrollToTop() {\n  window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\n};\n\n\nexport function scrollToBottom() {\n  window.scrollTo({\n    top: document.documentElement.offsetHeight,\n    left: 0,\n    behavior: \"smooth\",\n  });\n};\n\nexport function convertCommaDecimalNumberToNumber(num: string): number {\n  if (num) {\n    const stripped = num.trim();\n    return parseFloat(stripped.replace(/,/g, ''));\n  }\n  return NaN;\n}\n\nexport function insertIntoArrayAtIndex<T>(arr: T[], index: number, item: T): T[] {\n  const arrCopy: T[] = JSON.parse(JSON.stringify(arr));\n  arrCopy.splice(index, 0, item);\n  return arrCopy;\n}\n\nexport function capitalizeFirstLetter(str: string): string | undefined {\n  if (str) {\n    return (str.charAt(0).toUpperCase()) + str.slice(1);\n  }\n  return undefined;\n}\n\nexport function objectsEqual(o1: any, o2: any): boolean {\n  return typeof o1 === 'object' && Object.keys(o1).length > 0\n  ? Object.keys(o1).length === Object.keys(o2).length\n      && Object.keys(o1).every(p => objectsEqual(o1[p], o2[p]))\n  : o1 === o2;\n}\n\nexport function arraysEqual(a1: any[], a2: any[]): boolean {\n  if (a1 && a2) {\n    return a1.length === a2.length && a1.every((o, idx) => objectsEqual(o, a2[idx]));\n  }\n  return false;\n}\n\nexport function removeEmptyFromObject(obj: any): any {\n  if (!obj) {\n    return {};\n  }\n  const result = JSON.parse(JSON.stringify(obj));\n  Object.keys(result).forEach((key) => {\n    if (result[key] === null || result[key] === undefined) {\n      delete result[key];\n    }\n  });\n  return result;\n}\n\nexport function isObjectEmpty(obj: any): boolean {\n  if (obj) {\n    const keys = Object.keys(obj);\n    return keys.length < 1;\n  }\n  return false;\n}\n\n// Remove objects in an array if the object has the same value by key provided\nexport function deduplicateObjectArrayByKey<T>(arr: T[], key: string): T[] {\n  if (arr && arr.length > 0) {\n    const uniqueByValues: any[] = arr.map((res: T) => res[key as keyof T]);\n    const filtered = arr.filter((res: T, index: number) => {\n      return !uniqueByValues.includes(res[key as keyof T], index + 1);\n    });\n    return filtered;\n  }\n  return [];\n}\n\n","import { useEffect } from 'react';\nimport { useFirstMountState } from './useFirstMountState';\nvar useUpdateEffect = function (effect, deps) {\n    var isFirstMount = useFirstMountState();\n    useEffect(function () {\n        if (!isFirstMount) {\n            return effect();\n        }\n    }, deps);\n};\nexport default useUpdateEffect;\n","import { useRef } from 'react';\nexport function useFirstMountState() {\n    var isFirst = useRef(true);\n    if (isFirst.current) {\n        isFirst.current = false;\n        return true;\n    }\n    return isFirst.current;\n}\n"],"names":["ErrorPage","reason","debug","marginY","width","direction","spacing","justifyContent","alignItems","variant","sx","textTransform","fontWeight","component","style","display","textAlign","JSON","stringify","DisplayName","name","id","useState","className","p","flexCenter","border","borderRadius","title","ellipsis","data","itemUrlPath","gutterSize","totalPages","page","totalRecords","isFetching","onPaged","size","xs","mb","minWidth","fullWidth","labelId","value","label","onChange","e","target","range","map","num","color","lineHeight","PAGE_LIMIT_30","sm","md","xl","to","uid","mt","count","shape","showFirstButton","showLastButton","disabled","AutoCompleteTextField","params","entity","onResultSelect","options","setOptions","setValue","inputValue","setInputValue","debouncedInputValue","useDebounce","useSearchContentQuery","skipToken","error","isError","refetch","useEffect","useUpdateEffect","disablePortal","autoHighlight","blurOnSelect","filterOptions","x","getOptionLabel","option","properties","noOptionsText","loading","renderInput","event","newValue","selected","onInputChange","newInputValue","onInputChangeHandler","isOptionEqualToValue","ml","ENTITY_NAME","isMobile","useScreenSize","dispatch","useAppDispatch","useAppSelector","selectPage","selectTotalPages","useFetchSpeciesQuery","pagination","isLoading","isSuccess","navigate","useNavigate","scrollToElementById","height","message","status","toolbarProps","position","top","container","selection","mx","results","_","dispatchPaging","entityId","total_records","swapiConfigSlice","state","swapiConfig","createSelector","slice","total_pages","selectTotalRecords","selectNextPageUrl","next","selectFetchPageUrl","fetchUrl","BASE_SW_API","children","xsOffset","smOffset","ProgressCircle","styleProps","AppToolbar","elevation","bgcolor","theme","palette","mode","GREY","pr","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useTheme","useMediaQuery","breakpoints","down","isMed","isLg","isXl","LoadingLogo","props","classes","src","logo","alt","timeout","document","getElementById","scrollIntoView","block","effect","deps","isFirstMount","isFirst","useRef","current","useFirstMountState"],"sourceRoot":""}