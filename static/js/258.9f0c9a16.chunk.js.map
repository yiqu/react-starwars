{"version":3,"file":"static/js/258.9f0c9a16.chunk.js","mappings":"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","sources":["shared/form/m-autocomplete/FormAutocomplete.tsx","shared/models/form.model.ts","shared/form/m-select/FormSelect.tsx","create-new/FormFields.tsx","shared/rest/useSwGet.ts","create-new/new-dialog/NewFilmForm.tsx","shared/form/schemas/all-schemas.ts","create-new/new-dialog/NewFilmDialog.tsx","create-new/core/CreateNewFilm.tsx","shared/form/m-input/FormInput.tsx","shared/rest/starwars-api.ts","shared/utils/sleep.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormAutocompleteProps, FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\nimport Checkbox from '@mui/material/Checkbox';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport { NewFilmData } from 'src/create-new/FormFields';\n\nconst FormAutocomplete = ({ label, name, options, loading, ...props}: FormAutocompleteProps) => {\n  const formik = useFormikContext<any>();\n\n  const onValueChangeHandler = (event: any, value: any) => {\n    formik.setFieldValue(name, value);\n  };\n\n  return (\n    <>\n      <FormControl fullWidth>\n        {props.showLabel && <InputLabel htmlFor={ name }>{ label }</InputLabel>}\n\n        <Field as={ Autocomplete } label={ label } name={ name } id={ name } disabled={ loading }\n        { ...props.props } onChange={ onValueChangeHandler } options={ options } loading={ loading }\n        renderInput={ (params: any) => (\n          <TextField { ...params } label={ loading ? `Loading ${name}...` : `Select ${name}` } placeholder={ label }\n            error={ formik.touched[name] && !!formik.errors[name] }/>\n        ) }/>\n\n        <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n          {\n            (formik.touched[name] && formik.errors[name]) ? (<><ErrorMessage name={ name } /></>) : (<>{props.helperText}</>)\n          }\n        </FormHelperText>\n       \n      </FormControl>\n    </>\n  );\n};\n\nexport default FormAutocomplete;","import { TextFieldProps, SelectProps } from '@mui/material';\n\nexport const NONE_SELECTED_VALUE = 'NONE_SELECTED';\nexport interface FormInputProps {\n  name: string;\n  label?: string;\n  showLabel?: boolean;\n  helperText?: string;\n  valueChange?: (payload: any) => void;\n}\n\nexport interface FormInput2Props extends FormInputProps {\n  props?: TextFieldProps;\n}\n\nexport interface FormAutocompleteProps extends FormInputProps {\n  options : any[];\n  props?: any;\n  loading?: boolean;\n}\n\nexport interface FormSelectProps extends FormInputProps {\n  options?: any[];\n  useDefaultNoneSelected?: boolean | string;\n  props?: SelectProps;\n}\n\nexport type FormikInputProps = TextFieldProps & FormInputProps;\n\nexport type FormikSelectProps = SelectProps & FormSelectProps;\n\nexport type GenericFormFieldObject = FormInput2Props | FormAutocompleteProps | FormSelectProps;\n\nexport interface AsyncFormFieldOptions<T> {\n  [key: string]: {\n    options:  T[] | undefined,\n    loading?: boolean\n  }\n}\n\nexport interface FormFieldOptions<T> {\n  [key: string]: {\n    options:  T[] | undefined,\n  }\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormikSelectProps, FormInputProps, FormSelectProps, NONE_SELECTED_VALUE } from 'src/shared/models/form.model';\nimport { FormHelperText, MenuItem, Select, Typography } from '@mui/material';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\n\nconst FormikSelect = ({ label, name, ...props}: FormSelectProps) => {\n  const formik = useFormikContext<any>();\n\n  return (\n    <>\n      <FormControl fullWidth>\n\n        <InputLabel id={ name }>{ label }</InputLabel>\n\n        <Field as={ Select } label={ label } name={ name } id={ name } \n          error={ formik.touched[name] && !!formik.errors[name] }\n          { ...props.props } >\n          {\n            props.useDefaultNoneSelected && (\n            <MenuItem value={ NONE_SELECTED_VALUE } key={ '' } disabled>\n              <Typography sx={ {color: '#666'} }>Select { props.useDefaultNoneSelected }</Typography>\n            </MenuItem>\n            ) \n          }\n          {\n            props.options?.map((opt) => {\n              const display = opt.display ?? opt;\n              const value = opt.value ?? opt;\n              return (\n                <MenuItem value={ value } key={ opt.value }>{ display }</MenuItem>\n              );\n            })\n          }\n        </Field>\n        <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n          {\n            (formik.touched[name] && formik.errors[name]) ? (<><ErrorMessage name={ name } /></>) : (<>{props.helperText}</>)\n          }\n        </FormHelperText>\n      </FormControl>\n      \n    </>\n  );\n};\n\nexport default FormikSelect;","import React from 'react';\nimport FormAutocomplete from \"src/shared/form/m-autocomplete/FormAutocomplete\";\nimport FormInput from \"src/shared/form/m-input/FormInput\";\nimport FormikSelect from \"src/shared/form/m-select/FormSelect\";\nimport { AsyncFormFieldOptions } from \"src/shared/models/form.model\";\n\nexport const CreateFormFields = (controlObject: any, selectOptions: AsyncFormFieldOptions<any>) => {\n  \n  // const formField = React.useCallback((): JSX.Element => {\n  //   switch (controlObject.name) {\n  //     case 'starships': {\n  //       return (\n  //         <>\n  //           <FormikSelect name={ controlObject.name } label={ controlObject.label }\n  //             options={ selectOptions[controlObject.name]?.options ?? [] } { ...controlObject }\n  //             >\n  //           </FormikSelect>\n  //         </>\n  //       );\n  //     }\n  //     case 'title': {\n  //       return (\n  //         <>\n  //           <FormInput name={ controlObject.name } label={ controlObject.label }\n  //             { ...controlObject }\n  //             >\n  //           </FormInput>\n  //         </>\n  //       );\n  //     }\n  //     case 'director': {\n  //       return (\n  //         <>\n  //           <FormInput name={ controlObject.name } label={ controlObject.label }\n  //             { ...controlObject }\n  //             >\n  //           </FormInput>\n  //         </>\n  //       );\n  //     }\n  //     case 'characters': {\n  //       return (\n  //         <>\n  //           <FormAutocomplete name={ controlObject.name } label={ controlObject.label }\n  //             options={ selectOptions[controlObject.name]?.options ?? [] } \n  //             loading={ selectOptions[controlObject.name]?.loading } \n  //             { ...controlObject } >\n  //           </FormAutocomplete>\n  //         </>\n  //       );\n  //     }\n  //     default: {\n  //       return (\n  //         <> No component matched </>\n  //       );\n  //     }\n  //   }\n  // }, []);\n\n\n  switch (controlObject.name) {\n    case 'starships': {\n      return (\n        <>\n          <FormikSelect name={ controlObject.name } label={ controlObject.label }\n            options={ selectOptions[controlObject.name]?.options ?? [] } { ...controlObject }\n            >\n          </FormikSelect>\n        </>\n      );\n    }\n    case 'title': {\n      return (\n        <>\n          <FormInput name={ controlObject.name } label={ controlObject.label }\n            { ...controlObject }\n            >\n          </FormInput>\n        </>\n      );\n    }\n    case 'director': {\n      return (\n        <>\n          <FormInput name={ controlObject.name } label={ controlObject.label }\n            { ...controlObject }\n            >\n          </FormInput>\n        </>\n      );\n    }\n    case 'characters': {\n      return (\n        <>\n          <FormAutocomplete name={ controlObject.name } label={ controlObject.label }\n            options={ selectOptions[controlObject.name]?.options ?? [] } \n            loading={ selectOptions[controlObject.name]?.loading } \n            { ...controlObject } >\n          </FormAutocomplete>\n        </>\n      );\n    }\n    default: {\n      return (\n        <> No component matched </>\n      );\n    }\n  }\n};\n\n\nexport interface NewFilmData {\n  title: string;\n  director: string;\n  characters: string[];\n  starships: string;\n  opening_crawl: string;\n  planets: string[];\n  species: string[];\n  vehicles: string[];\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport useSWR from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nimport { axiosStarwarsFetcher } from 'src/shared/rest/starwars-api';\nimport { GetHookProps, HttpParams } from '../models/http.model';\nimport { useEffect, useState } from 'react';\nimport { usePreviousDistinct, useDeepCompareEffect } from 'react-use';\nimport { HttpResponse } from '../models/starwars.model';\n\nconst useSwGet = <T>(url: string, params: HttpParams) => {\n\n  const [ httpParams, setParams ] = useState<HttpParams | undefined>(params);\n\n  useDeepCompareEffect(() => {\n    setParams((prev) => {\n      return {\n        ...prev,\n        ...params\n      };\n    });\n  }, [params]);\n\n  const { data, error } = useSWRImmutable([url, httpParams, 3000], axiosStarwarsFetcher<HttpResponse<T>>);\n\n  return {\n    data: data?.results,\n    loading: !error && (data === undefined),\n    isError: error\n  };\n\n};\n\nexport default useSwGet;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Box, Button, Checkbox, Divider, IconButton, Stack, TextField, Typography } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport React, { useEffect, useState } from 'react';\n import { Form, Formik, useFormikContext } from 'formik';\nimport { CreateFormFields } from '../FormFields';\nimport { StarwarsContent, StarwarsPeople } from 'src/shared/models/starwars.model';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport useSwGet from 'src/shared/rest/useSwGet';\nimport { DEFAULT_MAX_PAGE_PARAMS } from 'src/shared/rest/starwars-api';\nimport * as _ from \"lodash\";\nimport { AsyncFormFieldOptions, GenericFormFieldObject } from 'src/shared/models/form.model';\nimport FormInput from 'src/shared/form/m-input/FormInput';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst NewFilmForm = (props: any) => {\n\n  const formikContext = useFormikContext<any>();\n  const [ selectOptions, setSelectOptions ] = useState<AsyncFormFieldOptions<any>>({});\n  const [ formFields, setFormFields ] = useState<GenericFormFieldObject[]>([]);\n  const { data: peopleListData, isError, loading } = useSwGet<StarwarsContent>('people', DEFAULT_MAX_PAGE_PARAMS);\n  const { data: starshipsList, isError: starshipsError, loading: starshipsLoading } = \n    useSwGet<StarwarsContent>('starships', DEFAULT_MAX_PAGE_PARAMS);\n  const { data: vehiclesList, isError: vehiclesError, loading: vehiclesLoading } = \n    useSwGet<StarwarsContent>('vehicles', DEFAULT_MAX_PAGE_PARAMS);\n  \n  useEffect(() => {\n    console.log(formikContext.values);\n  }, [formikContext.values]);\n\n  useEffect(() => {\n    setFormFields(defaultFormFields);\n  }, []);\n\n  useEffect(() => {\n    setSelectOptions((res) => {\n      return {\n        ...res,\n        characters: {\n          options: peopleListData,\n          loading\n        }\n      };\n    });\n  }, [peopleListData, loading]);\n\n\n  return (\n    <Form>\n      { formFields.map((field) => {\n          return (\n            <Grid key={ field.name } xs={ 12 } md={ 12 } xl={ 6 }>\n              { CreateFormFields(field, selectOptions) }\n            </Grid>\n          );\n        }) \n      }\n    </Form>\n  );\n};\n\nexport default NewFilmForm;\n\nexport const defaultFormFields: GenericFormFieldObject[] = [\n  {\n    name: 'title',\n    label: 'Title',\n    helperText: 'Your film title',\n  },\n  {\n    name: 'director',\n    label: 'Director',\n    helperText: 'Yourself! Or someone else..',\n  },\n  {\n    name: 'characters',\n    label: 'Characters',\n    helperText: 'Core people in your film',\n    props: {\n      autoHighlight: true,\n      multiple: true,\n      disableCloseOnSelect: true,\n      getOptionLabel: (option: StarwarsPeople) => option.name,\n      renderOption: (props: any, option: StarwarsPeople, { selected }: {selected: boolean}) => { return (\n        <li { ...props } style={ {height: '2rem'} }>\n          <Checkbox\n            icon={ icon }\n            checkedIcon={ checkedIcon }\n            style={ { marginRight: 8 } }\n            checked={ selected }\n          />\n          {option.name}\n        </li>\n      );},\n      renderInput: (params: any) => (\n        <TextField { ...params } label=\"Select your characters\" placeholder=\"Characters\" />\n      ),\n      noOptionsText: 'No characters available',\n      loadingText: 'Loading characters...'\n    }\n  },\n  {\n    name: 'openingCrawl',\n    label: 'Opening Crawl Text',\n  },\n  {\n    name: 'planets',\n    label: 'Planets',\n  },\n  {\n    name: 'species',\n    label: 'Species',\n  },\n  {\n    name: 'vehicles',\n    label: 'Vehicles',\n  },\n  {\n    name: 'starships',\n    label: 'starships',\n    useDefaultNoneSelected: 'your starships',\n    props: {\n      variant: \"outlined\",\n      size: 'small'\n    }\n  }\n];","import * as Yup from 'yup';\n\nexport const validationSchema = Yup.object({\n  title: Yup.string().required(),\n  director: Yup.string().required().min(1),\n  characters: Yup.array().min(1, \"At least one character is required\"),\n  // starships: Yup.array().min(1,  \"At least one starship is required\"),\n  // opening_crawl: Yup.string().required(),\n  // planets: Yup.array().min(1,  \"At least one planet is required\"),\n  // species: Yup.array().min(1,  \"At least one species is required\"),\n  // vehicles: Yup.array().min(1,  \"At least one vehicle is required\"),\n});","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport { DialogProps } from 'src/shared/models/dialog.model';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Box, Button, Divider, IconButton, Stack, Typography } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport React, { useEffect, useState } from 'react';\n import { Form, Formik, useFormikContext } from 'formik';\nimport { NewFilmData } from '../FormFields';\nimport NewFilmForm from './NewFilmForm';\nimport { NONE_SELECTED_VALUE } from 'src/shared/models/form.model';\nimport { validationSchema } from 'src/shared/form/schemas/all-schemas';\n\n\n\nconst NewFilmDialog = (props: DialogProps) => {\n\n  const initValues: NewFilmData = {\n    title: '',\n    director: '',\n    characters: [],\n    starships: NONE_SELECTED_VALUE,\n    opening_crawl: '',\n    planets: [],\n    species: [],\n    vehicles: []\n  };\n\n  const handleClose = (event: any, reason?: string) => {\n    if (reason !== 'backdropClick') {\n      props.onClose(null);\n    }\n  };\n\n  const formSubmitHandler = (payload: any) => {\n  };\n\n  return (\n    <Dialog onClose={ handleClose } open={ props.open } disableEscapeKeyDown maxWidth={ 'md' }\n      PaperProps={ {sx:{minWidth:'calc(100% - 50rem)'}} }>\n    \n      <DialogTitle bgcolor=\"primary.main\" color=\"white\">\n        <Stack direction={ 'row' } justifyContent=\"space-between\" alignItems=\"center\">\n          <div>\n            { props.isEditMode ? 'Editing' : 'Create New Movie' }\n          </div>\n          <div>\n            <IconButton sx={ {color:'white'} } onClick={ handleClose }>\n              <CloseIcon />\n            </IconButton>\n          </div>\n        </Stack>\n      </DialogTitle>\n\n      <Divider />\n\n      <DialogContent >\n        <Grid container spacing={ 2 }>\n          <Formik \n            initialValues={ initValues }\n            onSubmit={ formSubmitHandler }\n            // validateOnChange={ false }\n            // validateOnBlur={ false }\n            validationSchema={ validationSchema }\n            >\n            {(formik) => {\n              return <div style={ {width: '100%'} }>\n                <NewFilmForm />\n              </div>;\n            }}\n          </Formik>\n        </Grid>\n      </DialogContent>\n\n      <Divider />\n\n      <DialogActions>\n        <Button variant=\"text\" startIcon={ <RestartAltIcon /> }>\n          Reset\n        </Button>\n        <Button variant=\"text\" startIcon={ <SaveIcon /> } >\n          Save\n        </Button>\n      </DialogActions>\n\n    </Dialog>\n  );\n};\n\nexport default NewFilmDialog;\n\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { createSearchParams, Outlet, useNavigate, useSearchParams } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { Button, Typography } from \"@mui/material\";\nimport AddAPhotoOutlinedIcon from '@mui/icons-material/AddAPhotoOutlined';\nimport NewFilmDialog from \"../new-dialog/NewFilmDialog\";\n\nconst CreateNewFilm = () => {\n\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  const handleClickOpen = () => {\n    setShowDialog(true);\n  };\n  const handleClose = () => {\n    setShowDialog(false);\n  };\n\n  return (\n    <>\n      <Grid container >\n        <Grid container mx={ 2 } my={ 2 } xs={ 12 } spacing={ 2 }>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"h6\" >\n              Create your own Starwars movie!\n            </Typography>\n          </Grid>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"body2\">\n              Try adding your own movie with starships, vehicles, species, and planets.\n            </Typography>\n          </Grid>\n\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Button variant=\"contained\" startIcon={ <AddAPhotoOutlinedIcon /> } onClick={ handleClickOpen }>\n              Add New Movie\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <NewFilmDialog onClose={ handleClose } open={ showDialog }></NewFilmDialog>      \n    </>\n    \n  );\n};\n\nexport default CreateNewFilm;;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\n\nconst FormInput = ({ label, name, valueChange, ...props}: FormInput2Props) => {\n  const formik = useFormikContext<any>();\nconsole.log(\"input\");\n  return (\n    <>\n      <FormControl fullWidth>\n        {props.showLabel && <InputLabel htmlFor={ name }>{ label }</InputLabel>}\n\n        <Field as={ TextField } label={ label } name={ name } id={ name }\n        error={ formik.touched[name] && !!formik.errors[name] }\n        { ...props.props } />\n\n        <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n          {\n            (formik.touched[name] && formik.errors[name]) ? (<><ErrorMessage name={ name } /></>) : (<>{props.helperText}</>)\n          }\n        </FormHelperText>\n      </FormControl>\n    </>\n  );\n};\n\nexport default FormInput;","import axios, { AxiosResponse } from 'axios';\nimport { HttpParams } from '../models/http.model';\nimport { sleep } from '../utils/sleep';\n\nexport const SW_BASE_API = 'https://swapi.tech/api/';\nexport const DEFAULT_MAX_PAGE_PARAMS = {limit: 10000, page: 1};\n\nconst axiosStarwarsInstance = axios.create({\n  baseURL: SW_BASE_API,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosStarwarsInstance = () => {\n  return axiosStarwarsInstance;\n};\n\nexport const axiosStarwarsGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosStarwarsInstance.get<T>(url, {\n    params: params\n  });\n};\n\nexport default axiosStarwarsInstance;\n\nexport const axiosStarwarsFetcher = async <T>(url: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n  return await axiosStarwarsGet<T>(url, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n      } \n    });\n};\n","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n"],"names":["label","name","options","loading","props","formik","useFormikContext","FormControl","fullWidth","showLabel","InputLabel","htmlFor","as","Autocomplete","id","disabled","onChange","event","value","setFieldValue","renderInput","params","TextField","placeholder","error","touched","errors","FormHelperText","helperText","NONE_SELECTED_VALUE","Select","useDefaultNoneSelected","MenuItem","Typography","sx","color","map","opt","display","CreateFormFields","controlObject","selectOptions","FormInput","url","useState","httpParams","setParams","useDeepCompareEffect","prev","useSWRImmutable","axiosStarwarsFetcher","data","results","undefined","isError","icon","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","formikContext","setSelectOptions","formFields","setFormFields","useSwGet","DEFAULT_MAX_PAGE_PARAMS","peopleListData","useEffect","console","log","values","defaultFormFields","res","characters","field","Grid","xs","md","xl","autoHighlight","multiple","disableCloseOnSelect","getOptionLabel","option","renderOption","selected","style","height","Checkbox","marginRight","checked","noOptionsText","loadingText","variant","size","validationSchema","Yup","title","required","director","min","initValues","starships","opening_crawl","planets","species","vehicles","handleClose","reason","onClose","Dialog","open","disableEscapeKeyDown","maxWidth","PaperProps","minWidth","DialogTitle","bgcolor","Stack","direction","justifyContent","alignItems","isEditMode","IconButton","onClick","Close","Divider","DialogContent","container","spacing","initialValues","onSubmit","payload","width","DialogActions","Button","startIcon","RestartAlt","Save","showDialog","setShowDialog","mx","my","flexDirection","AddAPhotoOutlined","valueChange","limit","page","axiosStarwarsInstance","axios","baseURL","timeout","headers","responseType","axiosStarwarsGet","get","slow","sleep","then","catch","response","status","time","Promise","resolve","reject","setTimeout"],"sourceRoot":""}