{"version":3,"file":"static/js/258.194fe3e6.chunk.js","mappings":"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","sources":["shared/form/m-autocomplete/FormAutocomplete.tsx","shared/form/m-select/FormSelect.tsx","shared/models/form.model.ts","create-new/FormFields.tsx","shared/rest/useSwGet.ts","create-new/new-dialog/NewFilmForm.tsx","shared/form/schemas/all-schemas.ts","create-new/new-dialog/NewFilmDialog.tsx","create-new/core/CreateNewFilm.tsx","shared/form/m-input/FormInput.tsx","shared/rest/starwars-api.ts","shared/utils/sleep.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormAutocompleteProps, FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\nimport Checkbox from '@mui/material/Checkbox';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport { NewFilmData } from 'src/create-new/FormFields';\n\nconst FormAutocomplete = ({ label, name, options, loading, validate, ...props}: FormAutocompleteProps) => {\n  const formik = useFormikContext<any>();\n\n  const onValueChangeHandler = (event: any, value: any) => {\n    formik.setFieldValue(name, value);\n  };\n  return (\n    <>\n      <FormControl fullWidth>\n\n        { props.showLabel && <InputLabel htmlFor={ name }>{ label }</InputLabel> }\n\n        <Field as={ Autocomplete } \n          label={ label } \n          name={ name } \n          id={ name } \n          onChange={ onValueChangeHandler } \n          renderInput={ (params: any) => (\n            <TextField { ...params }\n              name={ name }\n              variant=\"standard\"\n              label={ loading ? `Loading ${name}...` : `Select ${name}` } \n              placeholder={ label }\n              error={ formik.touched[name] && !!formik.errors[name] }\n            />\n          ) }\n          getOptionLabel={ (option: any) => option.id }\n          validate={ validate }\n          options={ options }\n          loading={ loading }\n          { ...props.props } \n        />\n\n        <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n          {\n            (formik.touched[name] && formik.errors[name]) ? (<ErrorMessage name={ name } />) : (<>{ props.helperText }</>)\n          }\n        </FormHelperText>\n       \n      </FormControl>\n    </>\n  );\n};\n\nexport default FormAutocomplete;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormikSelectProps, FormInputProps, FormSelectProps, NONE_SELECTED_VALUE } from 'src/shared/models/form.model';\nimport { FormHelperText, MenuItem, Select, Typography } from '@mui/material';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\n\nconst FormikSelect = ({ label, name, validate, ...props}: FormSelectProps) => {\n  const formik = useFormikContext<any>();\n\n  return (\n    <>\n      <FormControl fullWidth>\n\n        <InputLabel id={ name }>{ label }</InputLabel>\n\n        <Field as={ Select } \n          label={ label } \n          name={ name } \n          id={ name } \n          error={ formik.touched[name] && !!formik.errors[name] }\n          validate={ validate }\n          variant=\"standard\"\n          { ...props.props } >\n            \n          {\n            props.useDefaultNoneSelected && (\n            <MenuItem value={ NONE_SELECTED_VALUE } key={ '' } disabled>\n              <Typography sx={ {color: '#666'} }>Select { props.useDefaultNoneSelected }</Typography>\n            </MenuItem>\n            ) \n          }\n          {\n            props.options?.map((opt) => {\n              const display = opt.display ?? opt;\n              const value = opt.value ?? opt;\n              return (\n                <MenuItem value={ value } key={ opt.value }>{ display }</MenuItem>\n              );\n            })\n          }\n\n        </Field>\n        <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n          {\n            (formik.touched[name] && formik.errors[name]) ? (<><ErrorMessage name={ name } /></>) : (<>{props.helperText}</>)\n          }\n        </FormHelperText>\n      </FormControl>\n      \n    </>\n  );\n};\n\nexport default FormikSelect;","import { TextFieldProps, SelectProps } from '@mui/material';\n\nexport const NONE_SELECTED_VALUE = 'NONE_SELECTED';\nexport interface FormInputProps {\n  name: string;\n  label?: string;\n  showLabel?: boolean;\n  helperText?: string;\n  type: string;\n  validate?: (value: any) => string | null;\n  valueChange?: (payload: any) => void;\n}\n\nexport interface FormInput2Props extends FormInputProps {\n  props?: TextFieldProps;\n}\n\nexport interface FormAutocompleteProps extends FormInputProps {\n  options: any[];\n  props?: any;\n  loading?: boolean;\n}\n\nexport interface FormSelectProps extends FormInputProps {\n  options?: any[];\n  useDefaultNoneSelected?: boolean | string;\n  props?: SelectProps;\n}\n\nexport type FormikInputProps = TextFieldProps & FormInputProps;\n\nexport type FormikSelectProps = SelectProps & FormSelectProps;\n\nexport type GenericFormFieldObject = FormInput2Props | FormAutocompleteProps | FormSelectProps;\n\nexport interface AsyncFormFieldOptions<T> {\n  [key: string]: {\n    options:  T[] | undefined,\n    loading?: boolean\n  }\n}\n\nexport interface FormFieldOptions<T> {\n  [key: string]: {\n    options:  T[] | undefined,\n  }\n}","import React from 'react';\nimport FormAutocomplete from \"src/shared/form/m-autocomplete/FormAutocomplete\";\nimport FormInput from \"src/shared/form/m-input/FormInput\";\nimport FormikSelect from \"src/shared/form/m-select/FormSelect\";\n\nexport const CreateFormFields = (controlObject: any) => {\n  switch (controlObject.type) {\n    case 'select': {\n      return (\n        <>\n          <FormikSelect name={ controlObject.name } label={ controlObject.label }\n            options={ controlObject.options ?? [] } { ...controlObject }\n            >\n          </FormikSelect>\n        </>\n      );\n    }\n    case 'text': {\n      return (\n        <>\n          <FormInput name={ controlObject.name } label={ controlObject.label }\n            { ...controlObject }\n            >\n          </FormInput>\n        </>\n      );\n    }\n    case 'autocomplete': {\n     // console.log(controlObject.props.options)\n      return (\n        <>\n          <FormAutocomplete name={ controlObject.name } label={ controlObject.label }\n            options={ controlObject.props.options ?? [] }\n            loading={ controlObject.props.loading } \n            { ...controlObject } >\n          </FormAutocomplete>\n        </>\n      );\n    }\n    default: {\n      return (\n        <> No component matched... </>\n      );\n    }\n  }\n};\n\n\nexport interface NewFilmData {\n  title: string;\n  director: string;\n  characters: string[];\n  starships: string[];\n  opening_crawl: string;\n  planets: string[];\n  species: string[];\n  vehicles: string[];\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport useSWR from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nimport { axiosStarwarsFetcher } from 'src/shared/rest/starwars-api';\nimport { GetHookProps, HttpParams } from '../models/http.model';\nimport { useEffect, useState } from 'react';\nimport { usePreviousDistinct, useDeepCompareEffect } from 'react-use';\nimport { HttpResponse } from '../models/starwars.model';\n\nconst useSwGet = <T>(url: string, params: HttpParams) => {\n\n  const [ httpParams, setParams ] = useState<HttpParams | undefined>(params);\n\n  useDeepCompareEffect(() => {\n    setParams((prev) => {\n      return {\n        ...prev,\n        ...params\n      };\n    });\n  }, [params]);\n\n  const { data, error } = useSWRImmutable([url, httpParams], axiosStarwarsFetcher<HttpResponse<T>>);\n\n  return {\n    data: data?.results,\n    loading: !error && (data === undefined),\n    isError: error\n  };\n\n};\n\nexport default useSwGet;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Box, Button, Checkbox, Divider, IconButton, Stack, TextField, Typography } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport React, { useEffect, useState } from 'react';\n import { Form, Formik, useFormikContext } from 'formik';\nimport { CreateFormFields } from '../FormFields';\nimport { StarwarsContent, StarwarsPeople } from 'src/shared/models/starwars.model';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport useSwGet from 'src/shared/rest/useSwGet';\nimport { DEFAULT_MAX_PAGE_PARAMS } from 'src/shared/rest/starwars-api';\nimport * as _ from \"lodash\";\nimport { AsyncFormFieldOptions, GenericFormFieldObject } from 'src/shared/models/form.model';\nimport FormInput from 'src/shared/form/m-input/FormInput';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst NewFilmForm = (props: any) => {\n\n  const formikContext = useFormikContext<any>();\n\n  const [ formFields, setFormFields ] = useState<GenericFormFieldObject[]>([]);\n\n  const { data: peopleListData, isError, loading: peopleListLoading } = \n    useSwGet<StarwarsContent>('people', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: starshipsList, isError: starshipsError, loading: starshipsLoading } = \n    useSwGet<StarwarsContent>('starships', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: vehiclesList, isError: vehiclesError, loading: vehiclesLoading } = \n    useSwGet<StarwarsContent>('vehicles', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: planetList, isError: planetsError, loading: planetsLoading } = \n    useSwGet<StarwarsContent>('planets', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: speciesList, isError: speciesError, loading: speciesLoading } = \n    useSwGet<StarwarsContent>('species', DEFAULT_MAX_PAGE_PARAMS);\n  \n  useEffect(() => {\n    console.log(formikContext.values);\n  }, [formikContext.values]);\n\n  useEffect(() => {\n    setFormFields(defaultFormFields);\n  }, []);\n\n  useEffect(() => {\n    if (peopleListData && peopleListData.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'characters';\n        });\n        fields[index].props.options = peopleListData;\n        fields[index].props.loading = false;\n        return fields;\n      });\n    }\n  }, [peopleListData]);\n\n  useEffect(() => {\n    if (starshipsList && starshipsList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'starships';\n        });\n        fields[index].props.options = starshipsList;\n        fields[index].props.loading = false;\n        return fields;\n      });\n    }\n  }, [starshipsList]);\n\n  useEffect(() => {\n    if (vehiclesList && vehiclesList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'vehicles';\n        });\n        fields[index].props.options = vehiclesList;\n        fields[index].props.loading = false;\n        return fields;\n      });\n    }\n  }, [vehiclesList]);\n\n  useEffect(() => {\n    if (planetList && planetList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'planets';\n        });\n        fields[index].props.options = planetList;\n        fields[index].props.loading = false;\n        return fields;\n      });\n    }\n  }, [planetList]);\n\n  useEffect(() => {\n    if (speciesList && speciesList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'species';\n        });\n        fields[index].props.options = speciesList;\n        fields[index].props.loading = false;\n        return fields;\n      });\n    }\n  }, [speciesList]);\n\n\n  return (\n    <Form>\n      <Grid container spacing={ 2 }>\n        { formFields.map((field) => {\n          return (\n            <Grid key={ field.name } xs={ 12 } >\n              { CreateFormFields(field) }\n            </Grid>\n          );\n        }) \n      }\n      </Grid>\n    </Form>\n  );\n};\n\nexport default NewFilmForm;\n\nexport const defaultFormFields: GenericFormFieldObject[] = [\n  {\n    name: 'title',\n    label: 'Title',\n    helperText: 'Your film title',\n    type: 'text',\n    props: {\n      variant: \"outlined\"\n    }\n  },\n  {\n    name: 'director',\n    label: 'Director',\n    helperText: 'Yourself! Or someone else..',\n    type: 'text',\n    props: {\n      variant: \"outlined\"\n    }\n  },\n  {\n    name: 'characters',\n    label: 'Characters',\n    helperText: 'Core people in your film',\n    type: 'autocomplete',\n    props: {\n      options: [],\n      autoHighlight: true,\n      multiple: true,\n      disableCloseOnSelect: true,\n      getOptionLabel: (option: StarwarsPeople) => option.name,\n      renderOption: (props: any, option: StarwarsPeople, { selected }: {selected: boolean}) => { return (\n        <li { ...props } style={ {height: '2rem'} }>\n          <Checkbox\n            icon={ icon }\n            checkedIcon={ checkedIcon }\n            style={ { marginRight: 8 } }\n            checked={ selected }\n          />\n          {option.name}\n        </li>\n      );},\n      renderInput: (params: any) => (\n        <TextField { ...params } label=\"Select your characters\" placeholder=\"Characters\" variant='outlined' />\n      ),\n      noOptionsText: 'No characters available',\n      loadingText: 'Loading characters...',\n      loading: true\n    }\n  },\n  {\n    name: 'openingCrawl',\n    label: 'Opening Crawl Text',\n    type: 'textarea',\n  },\n  {\n    name: 'planets',\n    label: 'Planets',\n    type: 'autocomplete',\n    props: {\n      autoHighlight: true,\n      multiple: true,\n      disableCloseOnSelect: true,\n      getOptionLabel: (option: StarwarsPeople) => option.name,\n    }\n  },\n  {\n    name: 'species',\n    label: 'Species',\n    type: 'autocomplete',\n    props: {\n      autoHighlight: true,\n      multiple: true,\n      disableCloseOnSelect: true,\n      getOptionLabel: (option: StarwarsPeople) => option.name,\n    }\n  },\n  {\n    name: 'vehicles',\n    label: 'Vehicles',\n    type: 'autocomplete',\n    props: {\n      autoHighlight: true,\n      multiple: true,\n      disableCloseOnSelect: true,\n      getOptionLabel: (option: StarwarsPeople) => option.name,\n    }\n  },\n  {\n    name: 'starships',\n    label: 'starships',\n    type: 'autocomplete',\n    props: {\n      autoHighlight: true,\n      multiple: true,\n      disableCloseOnSelect: true,\n      getOptionLabel: (option: StarwarsPeople) => option.name,\n    }\n  }\n];","import * as Yup from 'yup';\n\nexport const validationSchema = Yup.object({\n  title: Yup.string().required(),\n  director: Yup.string().required().min(1),\n  characters: Yup.array().min(1, \"At least one character is required\"),\n  // starships: Yup.array().min(1,  \"At least one starship is required\"),\n  // opening_crawl: Yup.string().required(),\n  // planets: Yup.array().min(1,  \"At least one planet is required\"),\n  // species: Yup.array().min(1,  \"At least one species is required\"),\n  // vehicles: Yup.array().min(1,  \"At least one vehicle is required\"),\n});","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport { DialogProps } from 'src/shared/models/dialog.model';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Box, Button, Divider, IconButton, Paper, Stack, Typography } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport React, { useEffect, useState } from 'react';\n import { Form, Formik, useFormikContext } from 'formik';\nimport { NewFilmData } from '../FormFields';\nimport NewFilmForm from './NewFilmForm';\nimport { NONE_SELECTED_VALUE } from 'src/shared/models/form.model';\nimport { validationSchema } from 'src/shared/form/schemas/all-schemas';\n\n\n\nconst NewFilmDialog = (props: DialogProps) => {\n\n  const initValues: NewFilmData = {\n    title: '',\n    director: '',\n    characters: [],\n    starships: [],\n    opening_crawl: '',\n    planets: [],\n    species: [],\n    vehicles: []\n  };\n\n  const handleClose = (event: any, reason?: string) => {\n    if (reason !== 'backdropClick') {\n      props.onClose(null);\n    }\n  };\n\n  const formSubmitHandler = (payload: any) => {\n    console.log(payload);\n  };\n\n  return (\n     \n    <Formik \n      initialValues={ initValues }\n      onSubmit={ formSubmitHandler }\n      // validateOnChange={ false }\n      // validateOnBlur={ false }\n      validationSchema={ validationSchema } >\n      {(formik) => {\n        return <>\n          <Dialog onClose={ handleClose } open={ props.open } disableEscapeKeyDown >\n  \n            <DialogTitle bgcolor=\"primary.main\" color=\"white\">\n              <Stack direction={ 'row' } justifyContent=\"space-between\" alignItems=\"center\">\n                <div>\n                  { props.isEditMode ? 'Editing' : 'Create New Movie' }\n                </div>\n                <div>\n                  <IconButton sx={ {color:'white'} } onClick={ handleClose }>\n                    <CloseIcon />\n                  </IconButton>\n                </div>\n              </Stack>\n            </DialogTitle>\n\n            <Divider />\n\n            <DialogContent >\n              <NewFilmForm />\n            </DialogContent>\n\n            <DialogActions>\n              <Button variant=\"text\" startIcon={ <RestartAltIcon /> } onClick={ formik.handleReset }>\n                Reset\n              </Button>\n              <Button variant=\"text\" startIcon={ <SaveIcon /> } onClick={ formik.submitForm }>\n                Save\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </>;\n      }}\n    </Formik>\n  );\n};\n\nexport default NewFilmDialog;\n\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { createSearchParams, Outlet, useNavigate, useSearchParams } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { Button, Typography } from \"@mui/material\";\nimport AddAPhotoOutlinedIcon from '@mui/icons-material/AddAPhotoOutlined';\nimport NewFilmDialog from \"../new-dialog/NewFilmDialog\";\n\nconst CreateNewFilm = () => {\n\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  const handleClickOpen = () => {\n    setShowDialog(true);\n  };\n  const handleClose = () => {\n    setShowDialog(false);\n  };\n\n  return (\n    <>\n      <Grid container >\n        <Grid container mx={ 2 } my={ 2 } xs={ 12 } spacing={ 2 }>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"h6\" >\n              Create your own Starwars movie.\n            </Typography>\n          </Grid>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"body2\">\n              Try adding your own movie with starships, vehicles, species, and planets.\n            </Typography>\n          </Grid>\n\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Button variant=\"contained\" startIcon={ <AddAPhotoOutlinedIcon /> } onClick={ handleClickOpen }>\n              Add New Movie\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      { showDialog && <NewFilmDialog onClose={ handleClose } open={ showDialog }></NewFilmDialog> }     \n    </>\n    \n  );\n};\n\nexport default CreateNewFilm;;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\n\nconst FormInput = ({ label, name, valueChange, validate, ...props}: FormInput2Props) => {\n  const formik = useFormikContext<any>();\n  return (\n    <>\n      <FormControl fullWidth>\n\n        { props.showLabel && <InputLabel htmlFor={ name }>{ label }</InputLabel> }\n\n        <Field as={ TextField } \n          label={ label } \n          name={ name } \n          id={ name }\n          error={ formik.touched[name] && !!formik.errors[name] }\n          validate={ validate }\n          variant=\"standard\"\n          { ...props.props } />\n\n        <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n          {\n            (formik.touched[name] && formik.errors[name]) ? (<><ErrorMessage name={ name } /></>) : (<>{props.helperText}</>)\n          }\n        </FormHelperText>\n\n      </FormControl>\n    </>\n  );\n};\n\nexport default FormInput;","import axios, { AxiosResponse } from 'axios';\nimport { HttpParams } from '../models/http.model';\nimport { sleep } from '../utils/sleep';\n\nexport const SW_BASE_API = 'https://swapi.tech/api/';\nexport const DEFAULT_MAX_PAGE_PARAMS = {limit: 10000, page: 1};\n\nconst axiosStarwarsInstance = axios.create({\n  baseURL: SW_BASE_API,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosStarwarsInstance = () => {\n  return axiosStarwarsInstance;\n};\n\nexport const axiosStarwarsGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosStarwarsInstance.get<T>(url, {\n    params: params\n  });\n};\n\nexport default axiosStarwarsInstance;\n\nexport const axiosStarwarsFetcher = async <T>(url: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n  return await axiosStarwarsGet<T>(url, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n      } \n    });\n};\n","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n"],"names":["label","name","options","loading","validate","props","formik","useFormikContext","FormControl","fullWidth","showLabel","InputLabel","htmlFor","as","Autocomplete","id","onChange","event","value","setFieldValue","renderInput","params","TextField","variant","placeholder","error","touched","errors","getOptionLabel","option","FormHelperText","helperText","Select","useDefaultNoneSelected","MenuItem","disabled","Typography","sx","color","map","opt","display","CreateFormFields","controlObject","type","FormInput","url","useState","httpParams","setParams","useDeepCompareEffect","prev","useSWRImmutable","axiosStarwarsFetcher","data","results","undefined","isError","icon","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","formikContext","formFields","setFormFields","useSwGet","DEFAULT_MAX_PAGE_PARAMS","peopleListData","starshipsList","vehiclesList","planetList","speciesList","useEffect","console","log","values","defaultFormFields","length","fields","index","findIndex","field","Grid","container","spacing","xs","autoHighlight","multiple","disableCloseOnSelect","renderOption","selected","style","height","Checkbox","marginRight","checked","noOptionsText","loadingText","validationSchema","Yup","title","required","director","min","characters","handleClose","reason","onClose","initialValues","starships","opening_crawl","planets","species","vehicles","onSubmit","payload","Dialog","open","disableEscapeKeyDown","DialogTitle","bgcolor","Stack","direction","justifyContent","alignItems","isEditMode","IconButton","onClick","Close","Divider","DialogContent","DialogActions","Button","startIcon","RestartAlt","handleReset","Save","submitForm","showDialog","setShowDialog","mx","my","flexDirection","AddAPhotoOutlined","valueChange","limit","page","axiosStarwarsInstance","axios","baseURL","timeout","headers","responseType","axiosStarwarsGet","get","slow","sleep","then","res","catch","response","status","time","Promise","resolve","reject","setTimeout"],"sourceRoot":""}