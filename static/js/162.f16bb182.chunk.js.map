{"version":3,"file":"static/js/162.f16bb182.chunk.js","mappings":"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","sources":["core/store/swapi/swapi.selectors.ts","core/shared/search/SearchAutoComplete.tsx","core/species/all/SpeciesAll.tsx","shared/utils/general.utils.ts","shared/components/toolbar/Toolbar.tsx","shared/hooks/useDebounce.ts","../node_modules/react-use/esm/useUpdateEffect.js","../node_modules/react-use/esm/useFirstMountState.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\nimport { Pagination } from \"src/shared/models/http.model\";\nimport { RootState } from \"src/store/appStore\";\n\nconst swapiConfigSlice = (state: RootState) => {\n  return state.swapiConfig;\n};\n\nexport const selectPage = createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination.page;\n  }\n);\n\nexport const selectTotalPages = createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination.total_pages ?? 0;\n  }\n);\n\nexport const selectTotalRecords = createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination.total_records ?? 0;\n  }\n);\n\nexport const selectNextPageUrl = createSelector(\n  swapiConfigSlice,\n  (slice): string | null | undefined=> {\n    return slice.pagination.next;\n  }\n);","import { Autocomplete, AutocompleteRenderInputParams, InputAdornment, TextField, Stack, Box } from \"@mui/material\";\nimport { skipToken } from \"@reduxjs/toolkit/query/react\";\nimport { useEffect, useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport { useSearchContentQuery } from \"src/core/store/swapi/swapi\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { useDebounce } from \"src/shared/hooks/useDebounce\";\nimport { ResultProperty, StarwarsSearchable } from \"src/shared/models/starwars.model\";\n\nexport interface SearchAutoCompleteProps {\n  entity: string;\n  onResultSelect: (selection: ResultProperty<StarwarsSearchable> | null) => void;\n}\n\nfunction SearchAutoComplete({ entity, onResultSelect }: SearchAutoCompleteProps) {\n\n  // dropdown options\n  const [options, setOptions] = useState<readonly ResultProperty<StarwarsSearchable>[]>([]);\n  // dropdown selection\n  const [value, setValue] = useState<ResultProperty<StarwarsSearchable> | null>(null);\n  // user text input\n  const [inputValue, setInputValue] = useState<string | null>(null);\n  const debouncedInputValue = useDebounce<string | null>(inputValue, 600);\n\n  const { data, isFetching, error, isError, refetch } = useSearchContentQuery(debouncedInputValue ? {\n    entity,\n    name: debouncedInputValue\n  } : skipToken);\n\n  useEffect(() => {\n    setOptions(data ?? []);\n  }, [data]);\n\n  useUpdateEffect(() => {\n  }, [debouncedInputValue]);\n\n  /**\n   * Drop down selection change\n   * @param selected selected from dropdown\n   */\n  const onChangeHandler = (selected: ResultProperty<StarwarsSearchable> | null) => {\n    setOptions(selected ? [selected] : options);\n    setValue(selected);\n    onResultSelect(selected);\n  };\n\n  /**\n   * Input text change\n   * @param event \n   * @param value user's input text\n   */\n  const onInputChangeHandler = (event: any, value: string) => {\n    setInputValue(value);\n  };\n\n  const onRenderOption = (props: any, option: any) => {\n  };\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n      <Autocomplete\n        disablePortal\n        id=\"search-entity-autocomplete\"\n        options={ options }\n        fullWidth\n        autoHighlight\n        blurOnSelect\n        filterOptions={ (x) => x }\n        value={ value }\n        getOptionLabel={ (option) => {\n          return option.properties.name;\n        } }\n        noOptionsText = { `Search for ${entity}` }\n        loading= { isFetching }\n        renderInput={ (params: AutocompleteRenderInputParams) => <AutoCompleteTextField params={ params } entity={ entity } /> }\n        onChange={ (event: any, newValue: ResultProperty<StarwarsSearchable> | null) => {\n          onChangeHandler(newValue);\n        } }\n        onInputChange={ (event, newInputValue) => onInputChangeHandler(event, newInputValue) }\n        isOptionEqualToValue = { (option: ResultProperty<StarwarsSearchable>, value: ResultProperty<StarwarsSearchable>) => { return option.uid === value.uid; } }\n      />\n      <Box ml={ 2 }>\n        { isFetching && <ProgressCircle size={ 20 } /> }\n      </Box>\n    </Stack>\n  );\n}\n\nexport default SearchAutoComplete;\n\nfunction AutoCompleteTextField({params, entity}: {params: AutocompleteRenderInputParams, entity: string}) {\n  return (\n    <TextField { ...params } label={ `Filter ${entity}` } variant=\"standard\" />\n  );\n}","import AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { Stack, Tooltip, IconButton, Typography, Divider, Box, Button } from \"@mui/material\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport FilterInput from \"src/core/movies/movies/filter/FilterInput\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport SimpleGridDisplay, { DisplayName } from \"src/core/shared/display/SimpleGridDisplay\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport LoadingLogo from \"src/shared/loading/full-logo/LoadingLogo\";\nimport { starwarsContentApi, useFetchSpeciesQuery } from \"src/core/store/swapi/swapi\";\nimport { selectPage, selectTotalPages } from \"src/core/store/swapi/swapi.selectors\";\nimport { dispatchPaging } from \"src/core/store/swapi/swapi.reducer\";\nimport { scrollToElementById } from \"src/shared/utils/general.utils\";\nimport SearchAutoComplete from \"src/core/shared/search/SearchAutoComplete\";\nimport { ResultProperty, StarwarsSearchable, StarwarsSpecie } from \"src/shared/models/starwars.model\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst ENTITY_NAME = \"species\";\n\nfunction SpeciesAll() {\n\n  const { isMobile } = useScreenSize();\n  const dispatch = useAppDispatch();\n  const page: number = useAppSelector(selectPage);\n  const totalPages: number = useAppSelector(selectTotalPages);\n  const { data, isFetching, isLoading, error, isSuccess, isError, refetch } = useFetchSpeciesQuery({ \n    entity: ENTITY_NAME, \n    pagination: { page }\n  });\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    scrollToElementById('top-pagination', 300, \"end\");\n  }, [isSuccess]);\n\n  const onPageHandler = (_: React.ChangeEvent<unknown>, page: number) => {\n    dispatch(dispatchPaging(page));\n  };\n\n  const onResultSelectHandler = (selection: ResultProperty<StarwarsSearchable> | null) => {\n    navigate(`./${selection?.uid}`);\n  };\n\n  if (isLoading) return (\n    <Stack direction=\"column\" width=\"100%\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n      <LoadingLogo message=\"species\" />\n    </Stack>\n  );\n\n  if (isError) {\n    return <ErrorPage reason={ (error as any).status } debug={ (error as any).error } />;\n  }\n\n  if (!data) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n        position: \"sticky\",\n        sx: {top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 }>\n          <Grid xs={ 10 } sm={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n              <SearchAutoComplete entity={ ENTITY_NAME } onResultSelect={ onResultSelectHandler } />\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n      <Box mt={ 2 } mx={ isMobile ? 2 : 0 }>\n        <SimpleGridDisplay data={ data.results } itemUrlPath={ ENTITY_NAME } totalPages={ totalPages } page={ page } onPaged={ onPageHandler }\n          totalRecords={ data.total_records } isFetching={ isFetching }  />\n      </Box>\n    </Stack>\n  );\n};\n\nexport default SpeciesAll;\n","\nexport function scrollToElementById(id: string, timeout?: number, position?: ScrollLogicalPosition): void {\n  let top = document.getElementById(id);\n  if (top) {\n    setTimeout(() => {\n      top?.scrollIntoView({block: position as any ?? \"end\"});\n      top = null;\n    }, timeout ?? 0);\n  }\n}\n\nexport function scrollToTop() {\n  window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\n};\n\n\nexport function scrollToBottom() {\n  window.scrollTo({\n    top: document.documentElement.offsetHeight,\n    left: 0,\n    behavior: \"smooth\",\n  });\n};\n\nexport function convertCommaDecimalNumberToNumber(num: string): number {\n  if (num) {\n    const stripped = num.trim();\n    return parseFloat(stripped.replace(/,/g, ''));\n  }\n  return NaN;\n}\n\nexport function insertIntoArrayAtIndex<T>(arr: T[], index: number, item: T): T[] {\n  const arrCopy: T[] = JSON.parse(JSON.stringify(arr));\n  arrCopy.splice(index, 0, item);\n  return arrCopy;\n}\n\nexport function capitalizeFirstLetter(str: string): string | undefined {\n  if (str) {\n    return (str.charAt(0).toUpperCase()) + str.slice(1);\n  }\n  return undefined;\n}\n\nexport function objectsEqual(o1: any, o2: any): boolean {\n  return typeof o1 === 'object' && Object.keys(o1).length > 0\n  ? Object.keys(o1).length === Object.keys(o2).length\n      && Object.keys(o1).every(p => objectsEqual(o1[p], o2[p]))\n  : o1 === o2;\n}\n\nexport function arraysEqual(a1: any[], a2: any[]): boolean {\n  if (a1 && a2) {\n    return a1.length === a2.length && a1.every((o, idx) => objectsEqual(o, a2[idx]));\n  }\n  return false;\n}\n\nexport function removeEmptyFromObject(obj: any): any {\n  if (!obj) {\n    return {};\n  }\n  const result = JSON.parse(JSON.stringify(obj));\n  Object.keys(result).forEach((key) => {\n    if (result[key] === null || result[key] === undefined) {\n      delete result[key];\n    }\n  });\n  return result;\n}\n\nexport function isObjectEmpty(obj: any): boolean {\n  if (obj) {\n    const keys = Object.keys(obj);\n    return keys.length < 1;\n  }\n  return false;\n}\n\n// Remove objects in an array if the object has the same value by key provided\nexport function deduplicateObjectArrayByKey<T>(arr: T[], key: string): T[] {\n  if (arr && arr.length > 0) {\n    const uniqueByValues: any[] = arr.map((res: T) => res[key as keyof T]);\n    const filtered = arr.filter((res: T, index: number) => {\n      return !uniqueByValues.includes(res[key as keyof T], index + 1);\n    });\n    return filtered;\n  }\n  return [];\n}\n\n","import { AppBar, Stack, Button, Tooltip, IconButton, AppBarTypeMap } from \"@mui/material\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport Toolbar from '@mui/material/Toolbar';\nimport { GREY } from \"src/theme/palette\";\n\ninterface ToolbarProps {\n  toolbarProps: any;\n  children: any;\n}\n\nexport default function AppToolbar({ toolbarProps, children }: ToolbarProps) {\n  \n  return (\n    <AppBar elevation={ 0 } { ...toolbarProps }>\n      <Toolbar \n        variant=\"regular\" \n        sx={ {bgcolor: (theme) => theme.palette.mode === 'light' ? GREY[100] : null, \n          color: (theme) => theme.palette.mode === 'light' ? '#000' : null,\n          pr: 0\n        } }>\n        { children }\n      </Toolbar>\n    </AppBar>\n  );\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};","import { useEffect } from 'react';\nimport { useFirstMountState } from './useFirstMountState';\nvar useUpdateEffect = function (effect, deps) {\n    var isFirstMount = useFirstMountState();\n    useEffect(function () {\n        if (!isFirstMount) {\n            return effect();\n        }\n    }, deps);\n};\nexport default useUpdateEffect;\n","import { useRef } from 'react';\nexport function useFirstMountState() {\n    var isFirst = useRef(true);\n    if (isFirst.current) {\n        isFirst.current = false;\n        return true;\n    }\n    return isFirst.current;\n}\n"],"names":["swapiConfigSlice","state","swapiConfig","selectPage","createSelector","slice","pagination","page","selectTotalPages","total_pages","total_records","next","entity","onResultSelect","useState","options","setOptions","value","setValue","inputValue","setInputValue","debouncedInputValue","useDebounce","useSearchContentQuery","name","skipToken","data","isFetching","error","isError","refetch","useEffect","useUpdateEffect","Stack","direction","justifyContent","alignItems","width","Autocomplete","disablePortal","id","fullWidth","autoHighlight","blurOnSelect","filterOptions","x","getOptionLabel","option","properties","noOptionsText","loading","renderInput","params","AutoCompleteTextField","onChange","event","newValue","selected","onInputChange","newInputValue","onInputChangeHandler","isOptionEqualToValue","uid","Box","ml","size","TextField","label","variant","ENTITY_NAME","isMobile","useScreenSize","dispatch","useAppDispatch","useAppSelector","totalPages","useFetchSpeciesQuery","isLoading","isSuccess","navigate","useNavigate","timeout","position","top","document","getElementById","setTimeout","scrollIntoView","block","scrollToElementById","height","LoadingLogo","message","ErrorPage","reason","status","debug","toolbarProps","sx","container","xs","sm","selection","mt","mx","SimpleGridDisplay","results","itemUrlPath","onPaged","_","dispatchPaging","totalRecords","AppToolbar","children","elevation","bgcolor","theme","palette","mode","GREY","color","pr","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","effect","deps","isFirstMount","isFirst","useRef","current","useFirstMountState"],"sourceRoot":""}