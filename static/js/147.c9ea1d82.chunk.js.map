{"version":3,"file":"static/js/147.c9ea1d82.chunk.js","mappings":"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","sources":["404/ErrorPage.tsx","core/planets/all/PlanetsAll.tsx","core/shared/display/SimpleGridDisplay.tsx","core/shared/search/SearchAutoComplete.tsx","core/store/swapi/swapi.selectors.ts","shared/components/date/DateDisplay2.tsx","shared/components/date/DurationDisplay.tsx","shared/components/layouts/LayoutWithGutter.tsx","shared/components/progress/CircleProgress.tsx","shared/components/toolbar/Toolbar.tsx","shared/hooks/useDebounce.ts","shared/hooks/useIsMobile.ts","webpack://starwars/./src/shared/loading/full-logo/LoadingLogo.module.scss?618b","shared/loading/full-logo/LoadingLogo.tsx","shared/utils/general.utils.ts","store/appHook.ts","../node_modules/react-use/esm/useUpdateEffect.js","../node_modules/react-use/esm/useFirstMountState.js"],"sourcesContent":["import { Box, Stack, Typography } from \"@mui/material\";\n\nexport interface ErrorPageProp {\n  reason?: string;\n  debug?: any;\n}\n\nexport default function ErrorPage({ reason, debug }: ErrorPageProp) {\n\n  return (\n    <Box marginY={ 5 } width=\"100%\">\n      <Stack direction=\"column\" spacing={ 5 } justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"h5\" sx={ {textTransform:'uppercase'} }>\n          An error has occurred!\n        </Typography>\n\n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            REASON\n          </Typography>\n          <Typography variant=\"body2\">\n            { reason }\n          </Typography>\n        </Stack>\n        \n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            DEBUG\n          </Typography>\n          <Typography variant=\"body2\" component=\"div\">\n            <pre>\n              <code style={ {display: 'flex', textAlign: 'center'} }>\n                { JSON.stringify(debug) }\n              </code>\n            </pre>\n          </Typography>\n        </Stack>\n      </Stack>\n    </Box>\n  );\n};","import AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { Stack, Box, Button, CircularProgress, Typography } from \"@mui/material\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport SimpleGridDisplay, { DisplayName } from \"src/core/shared/display/SimpleGridDisplay\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport LoadingLogo from \"src/shared/loading/full-logo/LoadingLogo\";\nimport { planetsTag, starwarsContentApi, useFetchPlanetsQuery, useFetchStarshipsQuery } from \"src/core/store/swapi/swapi\";\nimport { selectPage, selectTotalPages } from \"src/core/store/swapi/swapi.selectors\";\nimport { dispatchPaging } from \"src/core/store/swapi/swapi.reducer\";\nimport { scrollToElementById } from \"src/shared/utils/general.utils\";\nimport SearchAutoComplete from \"src/core/shared/search/SearchAutoComplete\";\nimport { ResultProperty, StarwarsSearchable, StarwarsSpecie } from \"src/shared/models/starwars.model\";\nimport { useNavigate } from \"react-router-dom\";\nimport DateDisplay2 from \"src/shared/components/date/DateDisplay2\";\nimport DurationDisplay from \"src/shared/components/date/DurationDisplay\";\nimport { RefreshOutlined } from \"@mui/icons-material\";\nimport toast from \"react-hot-toast\";\n\nconst ENTITY_NAME = \"planets\";\n\nfunction PlanetsAll() {\n\n  const { isMobile } = useScreenSize();\n  const dispatch = useAppDispatch();\n  const page: number = useAppSelector(selectPage(ENTITY_NAME));\n  const totalPages: number = useAppSelector(selectTotalPages(ENTITY_NAME));\n  const { data, isFetching, isLoading, error, isSuccess, isError, refetch, fulfilledTimeStamp, startedTimeStamp } = useFetchPlanetsQuery({ \n    entity: ENTITY_NAME, \n    pagination: { page }\n  });\n  const fetchTimeDuration = (fulfilledTimeStamp ?? 0) - (startedTimeStamp ?? 0);\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    scrollToElementById('top-pagination', 300, \"end\");\n  }, [isSuccess]);\n\n  const onPageHandler = (_: React.ChangeEvent<unknown>, page: number) => {\n    dispatch(dispatchPaging({entityId: ENTITY_NAME, pagination: {page: page}}));\n  };\n\n  const onResultSelectHandler = (selection: ResultProperty<StarwarsSearchable> | null) => {\n    navigate(`./${selection?.uid}`);\n  };\n\n  const handleRefresh = () => {\n    dispatch(dispatchPaging({entityId: ENTITY_NAME, pagination: {page: 1}}));\n    const refresh$ = refetch();\n    toast.promise(refresh$, {loading: 'Refreshing...', success: 'Refreshed all Planets', error: 'Error!'});\n  };\n\n  const handleRefresh2 = () => {\n    dispatch(starwarsContentApi.util.invalidateTags([{type: planetsTag, id: 'PARTIAL-LIST'}]));\n  };\n\n  if (isLoading) return (\n    <Stack direction=\"column\" width=\"100%\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n      <LoadingLogo message={ ENTITY_NAME } />\n    </Stack>\n  );\n\n  if (isError) {\n    return <ErrorPage reason={ (error as any).status } debug={ (error as any).error } />;\n  }\n\n  if (!data) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n        position: \"sticky\",\n        sx: {top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 }>\n          <Grid xs={ 4 } sm={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n              <SearchAutoComplete entity={ ENTITY_NAME } onResultSelect={ onResultSelectHandler } />\n            </Stack>\n          </Grid>\n          <Grid xs={ 8 } xsOffset=\"auto\" display=\"flex\">\n            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\" width=\"100%\" spacing={ 2 } data-tooltip-id=\"fetch-information\">\n              { isFetching && <CircularProgress size={ 20 } /> }\n              { !isFetching && <Typography fontSize={ 11 } component=\"div\">\n                Last fetched <DateDisplay2 dateInMilli={ fulfilledTimeStamp ?? 0 } />, took: <DurationDisplay durationInMilli={ fetchTimeDuration } />\n              </Typography> }\n              <Button variant=\"outlined\" startIcon={ <RefreshOutlined /> } onClick={ handleRefresh2 }>\n                Refresh\n              </Button>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n      <Box mt={ 2 } mx={ isMobile ? 2 : 0 }>\n        <SimpleGridDisplay data={ data.results } itemUrlPath={ ENTITY_NAME } totalPages={ totalPages } page={ page } onPaged={ onPageHandler }\n          totalRecords={ data.total_records } isFetching={ isFetching }  />\n      </Box>\n    </Stack>\n  );\n};\n\nexport default PlanetsAll;\n","import { FC, ReactNode, useState } from \"react\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { Link } from \"react-router-dom\";\nimport { Box, Divider, Pagination, Stack, Typography } from \"@mui/material\";\nimport { StarwarsContent } from \"src/shared/models/starwars.model\";\nimport { filter, interval, take, tap } from \"rxjs\";\nimport { ellipsis, flexCenter } from \"src/shared/utils/css.utils\";\nimport LayoutWithGutter from \"src/shared/components/layouts/LayoutWithGutter\";\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { range } from 'lodash';\nimport { PAGE_LIMIT_30 } from \"src/shared/utils/constants\";\n\nexport interface SimpleGridDisplayProps {\n  data: StarwarsContent[];\n  itemUrlPath: string;\n  gutterSize?: \"full\" | \"med\" | \"skinny\";\n  totalPages?: number;\n  page?: number;\n  totalRecords?: number;\n  onPaged?: (event: React.ChangeEvent<unknown>, page: number) => void;\n  isFetching?: boolean;\n  children?: ReactNode;\n}\n\nfunction SimpleGridDisplay({ data, itemUrlPath, gutterSize=\"med\", totalPages=0, page=0, totalRecords=0, isFetching, onPaged }: SimpleGridDisplayProps) {\n\n  const pageSelectionHandler = (e: SelectChangeEvent) => {\n    onPaged && onPaged(null as any, +e.target.value);\n  };\n\n  return (\n    <LayoutWithGutter size={ gutterSize }>\n      { (totalPages > 0) && <Grid xs={ 12 } mb={ 2 } id=\"top-pagination\">\n        <Stack direction=\"row\" sx={ {justifyContent:\"space-between\", alignItems:\"center\"} } width=\"100%\">\n          <Box sx={ { minWidth: 120 } }>\n            <FormControl fullWidth size=\"small\" variant=\"standard\">\n              <InputLabel id=\"page-selection\">Page</InputLabel>\n              <Select\n                labelId=\"page-selection\"\n                value={ `${page}` }\n                label=\"Age\"\n                onChange={ pageSelectionHandler }>\n                {\n                  range(1, totalPages+1, 1).map((num) => {\n                    return <MenuItem value={ num } key={ num }>{num}</MenuItem>;\n                  })\n                }\n              </Select>\n            </FormControl>\n          </Box>\n          <Box>\n            <Typography color=\"text.secondary\" sx={ {lineHeight: 1} }> \n              {((page-1) * PAGE_LIMIT_30)+1} - {(page===totalPages) ? totalRecords : page*PAGE_LIMIT_30} of { totalRecords } \n            </Typography>\n          </Box>\n          \n        </Stack>\n      </Grid> }\n      {\n        data.map((display: StarwarsContent) => {\n          return (\n            <Grid key={ display.uid } xs={ 12 } sm={ 6 } md={ 4 } xl={ 2.4 }>\n              {\n                <Box sx={ {p: 1} }>\n                  <Link to={ `/${itemUrlPath}/${display.uid}` }>\n                    <DisplayName name={ display.name } id={ display.uid } />\n                  </Link>\n                </Box>\n              }\n            </Grid>\n          );\n        })\n      }\n\n      {\n        (onPaged && (totalPages > 0)) && (\n          <Grid xs={ 12 } mt={ 2 }>\n            <Stack direction=\"row\" sx={ {...flexCenter} } width=\"100%\">\n              <Pagination count={ totalPages } shape=\"rounded\" page={ page } showFirstButton showLastButton \n                onChange={ onPaged } disabled={ isFetching } />\n            </Stack>\n          </Grid>\n        )\n      }\n      \n    </LayoutWithGutter>\n  );\n};\n\nexport default SimpleGridDisplay;\n\nexport function DisplayName({ name, id }: {name: string; id: string}) {\n\n  const [className, setClassName] = useState<string>('');\n  const [ animating, setAnimating] = useState<boolean>(false);\n\n  const onMouseOverHandler = () => {\n    if (!animating) {\n      setAnimating(true);\n      setClassName(\"animate__animated animate__headShake\");\n      interval(600).pipe(\n        take(2)\n      ).subscribe({\n        complete: () => {\n          setClassName(\"\");\n          setAnimating(false);\n        }\n      });\n    }\n  };\n\n  return (\n    <Stack direction=\"row\" sx={ {fontWeight:'500', p: 1, ...flexCenter, border: '1px solid #ddd', borderRadius: '10px',} } title={ `#${id} ${name}` }\n      className={ className } >\n      <Typography variant=\"h6\" sx={ {...ellipsis} }>\n        { name } \n      </Typography>\n    </Stack>\n  );\n}","import { Autocomplete, AutocompleteRenderInputParams, InputAdornment, TextField, Stack, Box } from \"@mui/material\";\nimport { skipToken } from \"@reduxjs/toolkit/query/react\";\nimport { useEffect, useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport { useSearchContentQuery } from \"src/core/store/swapi/swapi\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { useDebounce } from \"src/shared/hooks/useDebounce\";\nimport { ResultProperty, StarwarsSearchable } from \"src/shared/models/starwars.model\";\n\nexport interface SearchAutoCompleteProps {\n  entity: string;\n  onResultSelect: (selection: ResultProperty<StarwarsSearchable> | null) => void;\n}\n\nfunction SearchAutoComplete({ entity, onResultSelect }: SearchAutoCompleteProps) {\n\n  // dropdown options\n  const [options, setOptions] = useState<readonly ResultProperty<StarwarsSearchable>[]>([]);\n  // dropdown selection\n  const [value, setValue] = useState<ResultProperty<StarwarsSearchable> | null>(null);\n  // user text input\n  const [inputValue, setInputValue] = useState<string | null>(null);\n  const debouncedInputValue = useDebounce<string | null>(inputValue, 600);\n\n  const { data, isFetching, error, isError, refetch } = useSearchContentQuery(debouncedInputValue ? {\n    entity,\n    name: debouncedInputValue\n  } : skipToken);\n  \n  useEffect(() => {\n    setOptions(data ?? []);\n  }, [data]);\n\n  useUpdateEffect(() => {\n  }, [debouncedInputValue]);\n\n  /**\n   * Drop down selection change\n   * @param selected selected from dropdown\n   */\n  const onChangeHandler = (selected: ResultProperty<StarwarsSearchable> | null) => {\n    setOptions(selected ? [selected] : options);\n    setValue(selected);\n    onResultSelect(selected);\n  };\n\n  /**\n   * Input text change\n   * @param event \n   * @param value user's input text\n   */\n  const onInputChangeHandler = (event: any, value: string) => {\n    setInputValue(value);\n  };\n\n  const onRenderOption = (props: any, option: any) => {\n  };\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n      <Autocomplete\n        disablePortal\n        id=\"search-entity-autocomplete\"\n        options={ options }\n        fullWidth\n        autoHighlight\n        blurOnSelect\n        filterOptions={ (x) => x }\n        value={ value }\n        getOptionLabel={ (option) => {\n          return option.properties.name ?? option.properties.title;\n        } }\n        noOptionsText = { `Search for ${entity}` }\n        loading= { isFetching }\n        renderInput={ (params: AutocompleteRenderInputParams) => <AutoCompleteTextField params={ params } entity={ entity } /> }\n        onChange={ (event: any, newValue: ResultProperty<StarwarsSearchable> | null) => {\n          onChangeHandler(newValue);\n        } }\n        onInputChange={ (event, newInputValue) => onInputChangeHandler(event, newInputValue) }\n        isOptionEqualToValue = { (option: ResultProperty<StarwarsSearchable>, value: ResultProperty<StarwarsSearchable>) => { return option.uid === value.uid; } }\n      />\n      <Box ml={ 2 }>\n        { isFetching && <ProgressCircle size={ 20 } /> }\n      </Box>\n    </Stack>\n  );\n}\n\nexport default SearchAutoComplete;\n\nfunction AutoCompleteTextField({params, entity}: {params: AutocompleteRenderInputParams, entity: string}) {\n  return (\n    <TextField { ...params } label={ `Filter ${entity}` } variant=\"standard\" />\n  );\n}","import { createSelector } from \"@reduxjs/toolkit\";\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\nimport { Pagination } from \"src/shared/models/http.model\";\nimport { RootState } from \"src/store/appStore\";\n\nconst swapiConfigSlice = (state: RootState) => {\n  return state[\"sw-entities-config\"];\n};\n\nexport const selectPagination = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): Pagination | undefined => {\n    return slice.pagination[entityId]?.pagination;\n  }\n);\n\nexport const selectPage = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.page ?? 1;\n  }\n);\n\nexport const selectTotalPages = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.total_pages ?? 0;\n  }\n);\n\nexport const selectTotalRecords = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.total_records ?? 0;\n  }\n);\n\nexport const selectNextPageUrl = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): string | null | undefined=> {\n    return slice.pagination[entityId]?.pagination.next;\n  }\n);\n\nexport const selectFetchPageUrl = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): string | undefined=> {\n    return slice.pagination[entityId]?.pagination.fetchUrl ?? `${BASE_SW_API}${entityId}?page=1&limit=30`;\n  }\n);","import { format } from 'date-fns';\n\n\nexport interface DateDisplay2Props {\n  dateInMilli: number | undefined;\n}\n\nfunction DateDisplay2({ dateInMilli }: DateDisplay2Props) {\n  return (\n    <>\n      { (dateInMilli !== undefined) && format(dateInMilli, 'MM/dd/yyyy p') }\n    </>\n  );\n};\n\nexport default DateDisplay2;","import { formatDistance } from 'date-fns';\n\n\nexport interface DurationDisplayProps {\n  durationInMilli: number;\n}\n\nfunction DurationDisplay({ durationInMilli }: DurationDisplayProps) {\n  return (\n    <>\n      { (durationInMilli > 1000) ? (formatDistance(0, durationInMilli, { includeSeconds : true })) : (durationInMilli + ' ms') }\n    </>\n  );\n};\n\nexport default DurationDisplay;","import Grid from '@mui/material/Unstable_Grid2';\nimport { ReactNode } from 'react';\n\nexport interface LayoutGutterProps {\n  children: ReactNode;\n  size?: \"full\" | \"med\" | \"skinny\"\n}\n\nfunction LayoutWithGutter({ size = \"med\", children }: LayoutGutterProps) {\n\n  return (\n    // <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } sm={ sizes.width } smOffset={ sizes.offset }>\n    //   { children }\n    // </Grid>\n    <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } \n      sm={ size==='full' ? 12 : (size === 'med' ? 7 : (4)) } \n      smOffset={ size==='full' ? 0 : (size === 'med' ? 2.5 : (4)) }>\n      { children }\n    </Grid>\n  );\n}\n\nexport default LayoutWithGutter;","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Theme } from '@emotion/react';\nimport { SxProps } from '@mui/material';\n\nexport default function ProgressCircle({ size=40, color='grey.500', styleProps }: {size?: number, color?: string, styleProps?: SxProps<Theme>}) {\n  return (\n    <Stack sx={ { color: color, ...styleProps } } spacing={ 1 } direction=\"row\">\n      <CircularProgress color=\"inherit\" size={ size } />\n    </Stack>\n  );\n}","import { AppBar, Stack, Button, Tooltip, IconButton, AppBarTypeMap } from \"@mui/material\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport Toolbar from '@mui/material/Toolbar';\nimport { GREY } from \"src/theme/palette\";\n\ninterface ToolbarProps {\n  toolbarProps: any;\n  children: any;\n}\n\nexport default function AppToolbar({ toolbarProps, children }: ToolbarProps) {\n  \n  return (\n    <AppBar elevation={ 0 } { ...toolbarProps }>\n      <Toolbar \n        variant=\"regular\" \n        sx={ {bgcolor: (theme) => theme.palette.mode === 'light' ? GREY[100] : null, \n          color: (theme) => theme.palette.mode === 'light' ? '#000' : null,\n          pr: 0\n        } }>\n        { children }\n      </Toolbar>\n    </AppBar>\n  );\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * A media query string\n * which matches screen widths less than the screen size given by the breakpoint key (down)\n * @returns \n */\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.down('md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.down('xl'));\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize\n  };\n\n};\n\nexport default useScreenSize;","// extracted by mini-css-extract-plugin\nexport default {\"parentClass\":\"LoadingLogo_parentClass__NFHXT\",\"loadingLogo\":\"LoadingLogo_loadingLogo__BqUtz\",\"loadingParent\":\"LoadingLogo_loadingParent__VASnq\",\"loading-container\":\"LoadingLogo_loading-container__cjLsJ\",\"whole-page\":\"LoadingLogo_whole-page__DkCG7\",\"ldsFacebook\":\"LoadingLogo_ldsFacebook__pRdY2\",\"lds-facebook\":\"LoadingLogo_lds-facebook__JLntj\"};","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useReducer, useState, useContext, useMemo, Suspense } from 'react';\nimport classes from './LoadingLogo.module.scss';\nimport logo from '../../../static/img/death-star.png';\n\nexport interface LoadingLogoProps {\n  message: string;\n  children?: any;\n}\n\nexport default function LoadingLogo(props: LoadingLogoProps) {\n\n\n  return (\n    <div className={ `${classes.parentClass} w-100` }>\n      <div>\n        <div className={ classes.loadingLogo }>\n          <img src={ logo }\n            className={ `${classes.logoImg} d-inline-block` } alt=\"logo\" />\n        </div>\n    \n      </div>\n      <div className={ classes.loadingParent }>\n        <div className={ classes.ldsFacebook }><div></div><div></div><div></div></div>\n      </div>\n      <div className={ classes.secfont }>\n        Loading {props.message} ...\n      </div>\n    </div>\n  );\n};","\nexport function scrollToElementById(id: string, timeout?: number, position?: ScrollLogicalPosition): void {\n  let top = document.getElementById(id);\n  if (top) {\n    setTimeout(() => {\n      top?.scrollIntoView({block: position as any ?? \"end\"});\n      top = null;\n    }, timeout ?? 0);\n  }\n}\n\nexport function scrollToTop() {\n  window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\n};\n\n\nexport function scrollToBottom() {\n  window.scrollTo({\n    top: document.documentElement.offsetHeight,\n    left: 0,\n    behavior: \"smooth\",\n  });\n};\n\nexport function convertCommaDecimalNumberToNumber(num: string): number {\n  if (num) {\n    const stripped = num.trim();\n    return parseFloat(stripped.replace(/,/g, ''));\n  }\n  return NaN;\n}\n\nexport function insertIntoArrayAtIndex<T>(arr: T[], index: number, item: T): T[] {\n  const arrCopy: T[] = JSON.parse(JSON.stringify(arr));\n  arrCopy.splice(index, 0, item);\n  return arrCopy;\n}\n\nexport function capitalizeFirstLetter(str: string): string | undefined {\n  if (str) {\n    return (str.charAt(0).toUpperCase()) + str.slice(1);\n  }\n  return undefined;\n}\n\nexport function objectsEqual(o1: any, o2: any): boolean {\n  return typeof o1 === 'object' && Object.keys(o1).length > 0\n  ? Object.keys(o1).length === Object.keys(o2).length\n      && Object.keys(o1).every(p => objectsEqual(o1[p], o2[p]))\n  : o1 === o2;\n}\n\nexport function arraysEqual(a1: any[], a2: any[]): boolean {\n  if (a1 && a2) {\n    return a1.length === a2.length && a1.every((o, idx) => objectsEqual(o, a2[idx]));\n  }\n  return false;\n}\n\nexport function removeEmptyFromObject(obj: any): any {\n  if (!obj) {\n    return {};\n  }\n  const result = JSON.parse(JSON.stringify(obj));\n  Object.keys(result).forEach((key) => {\n    if (result[key] === null || result[key] === undefined) {\n      delete result[key];\n    }\n  });\n  return result;\n}\n\nexport function isObjectEmpty(obj: any): boolean {\n  if (obj) {\n    const keys = Object.keys(obj);\n    return keys.length < 1;\n  }\n  return false;\n}\n\n// Remove objects in an array if the object has the same value by key provided\nexport function deduplicateObjectArrayByKey<T>(arr: T[], key: string): T[] {\n  if (arr && arr.length > 0) {\n    const uniqueByValues: any[] = arr.map((res: T) => res[key as keyof T]);\n    const filtered = arr.filter((res: T, index: number) => {\n      return !uniqueByValues.includes(res[key as keyof T], index + 1);\n    });\n    return filtered;\n  }\n  return [];\n}\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useEffect } from 'react';\nimport { useFirstMountState } from './useFirstMountState';\nvar useUpdateEffect = function (effect, deps) {\n    var isFirstMount = useFirstMountState();\n    useEffect(function () {\n        if (!isFirstMount) {\n            return effect();\n        }\n    }, deps);\n};\nexport default useUpdateEffect;\n","import { useRef } from 'react';\nexport function useFirstMountState() {\n    var isFirst = useRef(true);\n    if (isFirst.current) {\n        isFirst.current = false;\n        return true;\n    }\n    return isFirst.current;\n}\n"],"names":["ErrorPage","reason","debug","marginY","width","direction","spacing","justifyContent","alignItems","variant","sx","textTransform","fontWeight","component","style","display","textAlign","JSON","stringify","ENTITY_NAME","isMobile","useScreenSize","dispatch","useAppDispatch","page","useAppSelector","selectPage","totalPages","selectTotalPages","useFetchPlanetsQuery","entity","pagination","data","isFetching","isLoading","error","isSuccess","isError","fulfilledTimeStamp","refetch","startedTimeStamp","fetchTimeDuration","navigate","useNavigate","useEffect","scrollToElementById","height","message","status","toolbarProps","position","top","container","xs","sm","onResultSelect","selection","uid","xsOffset","size","fontSize","dateInMilli","durationInMilli","startIcon","onClick","starwarsContentApi","type","planetsTag","id","mt","mx","results","itemUrlPath","onPaged","_","dispatchPaging","entityId","totalRecords","total_records","DisplayName","name","useState","className","p","flexCenter","border","borderRadius","title","ellipsis","gutterSize","mb","minWidth","fullWidth","labelId","value","label","onChange","e","target","range","map","num","color","lineHeight","PAGE_LIMIT_30","md","xl","to","count","shape","showFirstButton","showLastButton","disabled","AutoCompleteTextField","params","options","setOptions","setValue","inputValue","setInputValue","debouncedInputValue","useDebounce","useSearchContentQuery","skipToken","useUpdateEffect","disablePortal","autoHighlight","blurOnSelect","filterOptions","x","getOptionLabel","option","properties","noOptionsText","loading","renderInput","event","newValue","selected","onInputChange","newInputValue","onInputChangeHandler","isOptionEqualToValue","ml","swapiConfigSlice","state","createSelector","slice","total_pages","selectTotalRecords","selectNextPageUrl","next","selectFetchPageUrl","fetchUrl","BASE_SW_API","undefined","format","formatDistance","includeSeconds","children","smOffset","ProgressCircle","styleProps","AppToolbar","elevation","bgcolor","theme","palette","mode","GREY","pr","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useTheme","useMediaQuery","breakpoints","down","isMed","isLg","isXl","LoadingLogo","props","classes","src","logo","alt","timeout","document","getElementById","scrollIntoView","block","useDispatch","useSelector","effect","deps","isFirstMount","isFirst","useRef","current","useFirstMountState"],"sourceRoot":""}