{"version":3,"file":"static/js/32.4dcd5da1.chunk.js","mappings":"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","sources":["shared/rest/starwars-api.ts","core/fetchers/movies.ts","shared/rest/axios-rest.ts","core/fetchers/favorites.ts","core/hooks/useFetchFavorites.ts","core/hooks/useFetchMovies.ts","shared/form/m-input/FormInput.tsx","core/movies/movies/filter/FilterInputForm.tsx","shared/hooks/useDebounce.ts","core/movies/movies/filter/FilterInput.tsx","shared/hooks/useIsMobile.ts","core/utils/films.utils.tsx","core/movies/movies/MovieCard.tsx","core/movies/movies/Movies.tsx","shared/components/skeleton/LoadingSkeleton.tsx","shared/utils/sleep.js"],"sourcesContent":["import axios from 'axios';\nimport { HttpParams } from '../models/http.model';\n\nexport const SW_BASE_API = 'https://swapi.tech/api/';\n\nconst axiosStarwarsInstance = axios.create({\n  baseURL: SW_BASE_API,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosStarwarsInstance = () => {\n  return axiosStarwarsInstance;\n};\n\nexport const axiosStarwarsGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosStarwarsInstance.get<T>(url, {\n    params: params\n  });\n};\n\n\nexport default axiosStarwarsInstance;","import { AxiosResponse } from 'axios';\nimport { HttpParams } from 'src/shared/models/http.model';\nimport { axiosStarwarsGet } from 'src/shared/rest/starwars-api';\nimport { sleep } from \"../../shared/utils/sleep\";\n\n\nexport const axiosFetcher = async <T>(url: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n  return await axiosStarwarsGet<T>(url, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n        // return {TEST:\"TEST\"};\n      } \n    });\n};\n","import axios from 'axios';\nimport { HttpParams } from '../models/http.model';\n\nconst BASE_URL = 'https://kq-1-1a499.firebaseio.com/';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosInstance = () => {\n  return axiosInstance;\n};\n\nexport const axiosGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosInstance.get<T>(url + '.json', {\n    params: params\n  });\n};\n\nexport const axiosPost = <T>(url: string, data?: T) => {\n  return axiosInstance.post<T>(url + '.json', data);\n};\n\nexport const axiosPut = <T>(url: string, data?: T) => {\n  return axiosInstance.put<T>(url + '.json', data);\n};\n\nexport const axiosDelete = <T>(url: string, data?: T) => {\n  return axiosInstance.delete<T>(url + '.json');\n};\n\nexport default axiosInstance;","import { AxiosResponse } from 'axios';\nimport { HttpParams } from 'src/shared/models/http.model';\nimport { FavoriteToSave } from 'src/shared/models/starwars.model';\nimport { axiosGet, axiosPost, axiosPut } from 'src/shared/rest/axios-rest';\nimport { sleep } from \"../../shared/utils/sleep\";\n\nconst baseUrl: string = 'swdb/';\n\nexport const axiosFetcher = async <T>(userId: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n\n  const userUrl = `${baseUrl}${userId}/favorites`;\n\n  return await axiosGet<T>(userUrl, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n      } \n    });\n};\n\nexport const saveFavorite = (userId: string, film: FavoriteToSave): Promise<AxiosResponse<FavoriteToSave, any>> => {\n  const favUrl = `${baseUrl}${userId}/favorites`;\n  return axiosPost<FavoriteToSave>(favUrl, film);\n};\n\nexport const updateFavorite = (userId: string, favorite: FavoriteToSave): Promise<AxiosResponse<FavoriteToSave, any>> => {\n  const favUrl = `${baseUrl}${userId}/favorites/${favorite.fireId}`;\n  return axiosPut(favUrl, favorite);\n};","import { axiosFetcher } from '../fetchers/favorites';\nimport useSWR from \"swr\";\nimport { FetchFavoritesHookProp } from 'src/shared/models/core-props.model';\nimport { FavoriteMoviesObjList } from 'src/shared/models/starwars.model';\n\n\nconst useFetchFavorites = (props: FetchFavoritesHookProp) => {\n\n  const { data, isValidating, error, mutate } = useSWR(\n    () => {\n      if (props.params.fetchTime) {\n        return [props.userId, props.params];\n      }\n      return null;\n    }, \n    axiosFetcher<FavoriteMoviesObjList>, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const transformedData: FavoriteMoviesObjList = {};\n\n  if (data) {\n    const keys = Object.keys(data ?? {});\n    keys.forEach((key) => {\n      transformedData[data[key].episodeId] = {\n        fireId: key,\n        ...data[key],\n      };\n    });\n  }\n\n  return {\n    data: transformedData,\n    loading: isValidating || (!error && !data),\n    error,\n    mutate\n  };\n};\n\nexport default useFetchFavorites;","import { FetchMovieHookProp } from \"src/shared/models/core-props.model\";\nimport useSWR from \"swr\";\nimport { axiosFetcher } from \"../fetchers/movies\";\n\nconst useFetchMovies = <T>(props: FetchMovieHookProp) => {\n  const { data, isValidating, error, mutate } = useSWR(\n    () => {\n      // if (props.params?.fetchTime) {\n      //   return [props.url, props.params];\n      // }\n      // return null;\n      return [props.url, props.params];\n    },  axiosFetcher<T>, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  return {\n    data,\n    loading: isValidating || (!error && !data),\n    error,\n    mutate\n  };\n};\n\nexport default useFetchMovies;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInputProps } from 'src/shared/models/form.model';\n\nconst FormInput = ({ label, name, valueChange, ...props}: FormikInputProps) => {\n\n  return (\n    <>\n      { props.showLabel && <label htmlFor={ name }>{ label} </label> }\n      <Field as={ TextField } label={ label } name={ name } id={ name }\n        { ...props } sx={ {width: '100%'} } />\n    </>\n  );\n};\n\nexport default FormInput;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from 'src/shared/form/m-input/FormInput';\nimport { useDebounce } from 'src/shared/hooks/useDebounce';\nimport { useDeepCompareEffect } from 'react-use';\nimport { MoviesFilterInput } from 'src/shared/models/starwars.model';\n\n\nconst FilterInputForm = ({...props}) => {\n\n  const { values, submitForm } = useFormikContext<any>();\n\n  const debouncedTerm = useDebounce<MoviesFilterInput>(values, 600);\n\n  useDeepCompareEffect(() => {\n    props.filterChange(debouncedTerm);\n  }, [debouncedTerm]);\n\n  return (\n    <Form autoComplete=\"off\">\n      <FormInput { ...props.movieNameFilter } />\n    </Form>\n  );\n};\n\nexport default FilterInputForm;","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Formik, Field, Form, ErrorMessage, useFormikContext, FormikProps } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from 'src/shared/form/m-input/FormInput';\nimport { IconButton, InputAdornment, TextFieldProps } from '@mui/material';\nimport { useDebounce } from 'src/shared/hooks/useDebounce';\nimport { useDeepCompareEffect } from 'react-use';\nimport FilterInputForm from './FilterInputForm';\nimport { FCC } from 'src/shared/models/fc-children.model';\nimport { FilmFilterProp } from 'src/shared/models/core-props.model';\nimport { MoviesFilterInput } from 'src/shared/models/starwars.model';\nimport { Close, Filter, Search } from '@mui/icons-material';\n\n\nconst FilterInput: FCC<FilmFilterProp> = ({ filterChange }) => {\n\n  const initValue = {\n    movieName: ''\n  };\n \n  const filterChangeHandler = useCallback((payload: MoviesFilterInput) => {\n    filterChange(payload);\n  }, [filterChange]);\n\n  const movieNameFilter = (formik: FormikProps<MoviesFilterInput>): TextFieldProps => {\n    const clearInputHandler = () => {\n      formik.resetForm();\n    };\n    const filterInputHasValue = formik.values.movieName !== '';\n\n    return {\n      name: 'movieName',\n      placeholder: 'Filter by name',\n      id: 'movieName',\n      variant: 'standard',\n      InputProps: {\n        endAdornment: (<InputAdornment position='end'>\n          { filterInputHasValue && <IconButton onClick={ clearInputHandler }>\n            <Close />\n          </IconButton> }\n        </InputAdornment>),\n        startAdornment: (\n          <InputAdornment position='start'>\n            <Search />\n          </InputAdornment>\n        )\n      }\n    };\n  };\n\n  const submitHandler = (payload: any) => {\n  };\n\n  return (\n    <Formik\n      initialValues={ initValue }\n      onSubmit={ submitHandler }\n    >\n      {(formik) => {\n        return <FilterInputForm movieNameFilter={ movieNameFilter(formik) } filterChange={ filterChangeHandler } />;\n      }}\n      \n    </Formik>\n  );\n};\n\nexport default FilterInput;","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.down('md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.down('xl'));\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize\n  };\n\n};\n\nexport default useScreenSize;","import { FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport moment from 'moment';\n\nexport const getFilmFavoriteToggleTooltip = (favorited?: FavoriteToSave) => {\n  let tooltip: string = '';\n  const dateFromNow = favorited?.lastUpdated ? (moment(favorited?.lastUpdated).fromNow()) : ('');\n\n  if (favorited?.isCurrentFavorite) {\n    tooltip = 'Remove from favorites';\n  } else {\n    tooltip = 'Add to favorites';\n  }\n\n  if (favorited?.lastUpdated) {\n    tooltip = tooltip + '. ' + (favorited.isCurrentFavorite ? 'Favorited ' : 'Unfavorited ') + dateFromNow;\n  }\n\n  return tooltip;\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { FCC } from \"src/shared/models/fc-children.model\";\nimport { StarwarsFilmCardProps } from \"src/shared/models/starwars.model\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Link } from \"react-router-dom\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport FavIcon from '@mui/icons-material/Favorite';\nimport IconButton from '@mui/material/IconButton';\nimport { useEffect } from 'react';\nimport { Stack } from \"@mui/material\";\nimport { getFilmFavoriteToggleTooltip } from \"src/core/utils/films.utils\";\n\n\nconst MovieCard: FCC<StarwarsFilmCardProps> = (props: StarwarsFilmCardProps) => {\n\n  const favoriteToggleHandler = () => {\n    props.onFavoriteToggle(props.film, props.favorited);\n  };\n\n  const { isXl } = useScreenSize();\n\n  return (\n    <Card sx={ {border:\"2px solid #726f53\", height:(isXl ? '100%': '100%'), display:'flex',\n      flexDirection:'column', justifyContent:'space-between'} } \n      elevation={ 4 }>\n      <div>\n        <CardMedia\n          component=\"img\"\n          alt=\"poster\"\n          height=\"440\"\n          image={ `${process.env.PUBLIC_URL}/assets/poster-img/${props.film.episode_id}.png` }\n          sx={ {backgroundColor: '#000', objectFit: 'contain'} }\n        />\n        <CardContent>\n          <Stack direction={ {lg: 'column', xl: 'row'} } justifyContent={ {xl:'space-between', lg:'flex-start'} }\n            marginBottom={ {lg:'10px', xl: '0px'} }>\n            <Typography gutterBottom variant=\"h5\" component={ Link } to={ `./${props.uid}` } sx={ {fontFamily:'Poppins',\n              fontWeight:'500'} }>\n              { props.film.title }\n            </Typography>\n            <Typography variant=\"h5\" color='text.secondary' sx={ {fontWeight: '300'} }>\n              EP { props.film.episode_id }\n            </Typography>\n          </Stack>\n          \n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Released: { props.film.release_date }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Directed by: { props.film.director }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Produced by: { props.film.producer }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.primary\" sx={ {mt:'10px'} }>\n            { props.film.opening_crawl }\n          </Typography>\n        </CardContent>\n      </div>\n      \n      <CardActions sx={ {display: 'flex', justifyContent: 'space-between'} }>\n        <div>\n          <Button size=\"small\" component={ Link } to={ `./${props.uid}` }>\n            Learn More\n          </Button>\n        </div>\n        <div>\n          <IconButton aria-label=\"favorite\" onClick={ favoriteToggleHandler } \n            title={ getFilmFavoriteToggleTooltip(props.favorited) }>\n            <FavIcon color={ props.film.userFavorited ? 'error' : 'disabled' } />\n          </IconButton>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default MovieCard;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Button } from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { useCallback, useMemo, useState, useEffect } from \"react\";\nimport { saveFavorite, updateFavorite } from \"src/core/fetchers/favorites\";\nimport useFetchFavorites from \"src/core/hooks/useFetchFavorites\";\nimport useFetchMovies from \"src/core/hooks/useFetchMovies\";\nimport LoadingSkeleton from \"src/shared/components/skeleton/LoadingSkeleton\";\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport { FavoriteToSave, HttpResponse, HttpResponse2, HttpResponse2List, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { axiosPost } from \"src/shared/rest/axios-rest\";\nimport FilterInput from \"./filter/FilterInput\";\nimport MovieCard from \"./MovieCard\";\n\nconst userId = 'yqu';\n\nconst Movies = () => {\n  const arrOfItems = Array.from(Array(3).keys());\n\n  const [saveFavLoading, setSaveFavLoading] = useState<boolean>(false);\n  const [fetchFavoriteTime, setFetchFavoriteTime] = useState<number>(0);\n  const [fetchMoviesParams, setFetchMoviesParams] = useState<HttpParams>({});\n\n  const {data: favMovies, error: favError, loading: favLoading, mutate: favMutate} = \n    useFetchFavorites({userId: userId, params: {fetchTime: fetchFavoriteTime}});\n\n  const {data, error, loading, mutate} = \n    useFetchMovies<HttpResponse2List<StarwarsFilm>>({ url: 'films', params: fetchMoviesParams });\n\n  const sorted: ResultProperty<StarwarsFilm>[] | undefined = useMemo(() => {\n    const sortedArr = data?.result ?? [];\n    if (sortedArr) {\n      sortedArr.sort((prev, next) => {\n        return prev.properties.episode_id > next.properties.episode_id ? 1 : -1;\n      });\n    }\n    sortedArr.forEach((res: ResultProperty<StarwarsFilm>) => {\n      res.properties.userFavorited = favMovies[res.properties.episode_id]?.isCurrentFavorite;\n    });\n\n    return sortedArr;\n  }, [data, favMovies]);\n\n  useEffect(() => {\n    //setFetchMoviesTime(new Date().getTime());\n    setFetchFavoriteTime(new Date().getTime());\n  }, []);\n\n  const onFavoriteToggleHandler = (film: StarwarsFilm, currentFavoriteStatus?: FavoriteToSave) => {\n    const { url: filmUrl } = film;\n    const filmId = (filmUrl.split(\"/\"))[filmUrl.split(\"/\").length - 1];\n\n    const favorite: FavoriteToSave = {\n      filmUrl,\n      filmId,\n      lastUpdated: new Date().getTime(),\n      episodeId: film.episode_id,\n      isCurrentFavorite: true,\n    };\n\n    setSaveFavLoading(true);\n    // update current favorited item in DB to false status\n    if (currentFavoriteStatus) {\n      favorite.isCurrentFavorite = !currentFavoriteStatus.isCurrentFavorite;\n      favorite.fireId = currentFavoriteStatus.fireId;\n      updateFavorite(userId, favorite).then((res) => {\n      }).catch((err) => {\n\n      }).finally(() => {\n        setSaveFavLoading(false);\n        setFetchFavoriteTime(new Date().getTime());\n      });\n\n    } else {\n      // create new favorited item to save\n      saveFavorite(userId, favorite).then((res) => {\n      }).catch((err) => {\n        // toast error\n      }).finally(() => {\n        // show toast save done\n        setSaveFavLoading(false);\n        setFetchFavoriteTime(new Date().getTime());\n      });\n    }\n  };\n\n  const onFilterChangeHandler = useCallback((filterValue: any) => {\n    if (filterValue.movieName) {\n      setFetchMoviesParams({\n        title: filterValue.movieName\n      });\n    } else {\n      setFetchMoviesParams({});\n    }\n  }, []);\n\n  return (\n    <Grid container spacing={ 2 } mx={ 2 } my={ 2 } xs={ 12 }>\n      {/* All Movies\n      <Button onClick={ refresh }>Refresh</Button> */}\n      { error && (<div>Error occured:</div>)}\n      <Grid xs={ 12 } sm={ 6 }>\n        <FilterInput filterChange={ onFilterChangeHandler } />\n      </Grid>\n      { loading ? \n        (\n          <Grid container xs={ 12 }>\n            { arrOfItems.map((item) => <Grid key={ item } xs={ 12 } sm={ 4 }> <LoadingSkeleton /> </Grid>) }\n          </Grid>\n        ) : \n        (\n          <Grid xs={ 12 } container>\n            {sorted?.map((res) => {\n              return (\n                <Grid key={ res.properties.episode_id } xs={ 12 } sm={ 6 } md={ 4 } lg={ 4 } xl={ 4 }>\n                  <MovieCard film={ res.properties } onFavoriteToggle={ onFavoriteToggleHandler } \n                    favorited={ favMovies[res.properties.episode_id] } uid={ res.uid } >\n                  </MovieCard>\n                </Grid>\n              );\n            })}\n          </Grid>\n        )\n      }\n    </Grid>\n  );\n};\n\nexport default Movies;","import * as React from 'react';\nimport Skeleton from '@mui/material/Skeleton';\nimport Stack from '@mui/material/Stack';\n\nconst LoadingSkeleton = () => {\n\n  return (\n    <Stack spacing={ 1 }>\n      {/* For variant=\"text\", adjust the height via font-size */}\n      <Skeleton variant=\"text\" sx={ { fontSize: '1rem' } } />\n\n      {/* For other variants, adjust the size with `width` and `height` */}\n      <Skeleton variant=\"circular\" width={ 40 } height={ 40 } />\n      <Skeleton variant=\"rectangular\" width={ '100%' } height={ 60 } />\n      <Skeleton variant=\"rounded\" width={ '100%' } height={ 60 } />\n    </Stack>\n  );\n};\n\nexport default LoadingSkeleton;","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n"],"names":["axiosStarwarsInstance","axios","baseURL","timeout","headers","responseType","axiosStarwarsGet","url","params","get","axiosFetcher","slow","sleep","then","res","data","catch","error","response","status","axiosInstance","axiosGet","baseUrl","userId","userUrl","saveFavorite","film","favUrl","post","updateFavorite","favorite","fireId","put","props","useSWR","fetchTime","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","isValidating","mutate","transformedData","Object","keys","forEach","key","episodeId","loading","label","name","valueChange","showLabel","htmlFor","as","TextField","id","sx","width","useFormikContext","values","debouncedTerm","submitForm","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","useDeepCompareEffect","filterChange","autoComplete","movieNameFilter","filterChangeHandler","useCallback","payload","formik","filterInputHasValue","movieName","placeholder","variant","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","resetForm","Close","startAdornment","Search","initialValues","onSubmit","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","isMed","isLg","isXl","getFilmFavoriteToggleTooltip","favorited","tooltip","dateFromNow","lastUpdated","moment","fromNow","isCurrentFavorite","useScreenSize","Card","border","height","display","flexDirection","justifyContent","elevation","CardMedia","component","alt","image","process","episode_id","backgroundColor","objectFit","CardContent","Stack","direction","lg","xl","marginBottom","Typography","gutterBottom","Link","to","uid","fontFamily","fontWeight","title","color","release_date","director","producer","mt","opening_crawl","CardActions","Button","size","onFavoriteToggle","userFavorited","arrOfItems","Array","from","setSaveFavLoading","fetchFavoriteTime","setFetchFavoriteTime","fetchMoviesParams","setFetchMoviesParams","useFetchFavorites","favMovies","useFetchMovies","sorted","useMemo","sortedArr","result","sort","prev","next","properties","Date","getTime","onFavoriteToggleHandler","currentFavoriteStatus","filmUrl","filmId","split","length","err","finally","onFilterChangeHandler","filterValue","Grid","container","spacing","mx","my","xs","sm","map","item","LoadingSkeleton","md","fontSize","time","Promise","resolve","reject"],"sourceRoot":""}