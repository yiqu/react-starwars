{"version":3,"file":"static/js/499.acedb43f.chunk.js","mappings":"ySAEA,GAAeA,EAAAA,EAAAA,IAA4BC,EAAAA,EAAAA,KAAK,OAAQ,CACtDC,EAAG,+MACD,mB,gCCsEJ,EA7DkB,WAEhB,IAAQC,GAAaC,EAAAA,EAAAA,KAAbD,SACFE,GAAWC,EAAAA,EAAAA,KACXC,GAAmBC,EAAAA,EAAAA,GAAeC,EAAAA,IAAkCC,OACpEC,GAAiCH,EAAAA,EAAAA,GAAeC,EAAAA,IACtD,GAAkCG,EAAAA,EAAAA,UAAiB,GAAE,eAA9CC,EAAS,KAAEC,EAAY,MAE9BC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAUX,GAASY,EAAAA,EAAAA,IAA0B,CAACC,KAAM,SAC1D,OAAQ,WACNF,EAAQG,OACV,CACF,GAAG,CAACd,EAAUQ,IAEd,IAAMO,GAAwBC,EAAAA,EAAAA,cAAY,SAACC,GAC3C,GAAG,IAMH,OACE,UAACC,EAAA,EAAK,CAACC,UAAU,SAASC,MAAM,OAAM,WACpC,SAAC,IAAU,CAACC,aAAe,CACzBC,SAAS,SACTC,GAAG,CAACC,IAAK1B,EAAW,OAAO,SAC1B,UACD,UAAC,IAAI,CAAC2B,WAAS,EAACC,GAAK,GAAKC,cAAgB,CAAED,GAAI,MAAOE,GAAI,OAAUC,eAAe,gBAAgBC,WAAW,SAAQ,WACrH,SAAC,IAAI,CAACJ,GAAK,GAAKE,GAAK,EAAG,UACtB,SAACV,EAAA,EAAK,CAACC,UAAU,MAAMU,eAAe,QAAQC,WAAW,SAAQ,UAC/D,UAAC,IAAI,CAACL,WAAS,EAACC,GAAK,GAAI,WACvB,SAAC,IAAI,CAACA,GAAK,EAAG,UACZ,SAACK,EAAA,EAAW,CAACC,aAAejB,EAAwBkB,MAAQ/B,OAE9D,SAAC,IAAI,CAACwB,GAAK,EAAIH,GAAK,CAACW,QAAQ,QAAUL,eAAe,SAASC,WAAW,SAAQ,SAC9ExB,IAAa,SAAC,IAAc,CAAC6B,KAAO,eAK9C,SAAC,IAAI,CAACT,GAAK,EAAIE,GAAK,EAAG,UACrB,SAACV,EAAA,EAAK,CAACC,UAAU,MAAMU,eAAe,WAAWC,WAAW,SAAQ,UAClE,SAACM,EAAA,EAAO,CAACC,MAAM,UAAS,UACtB,SAACC,EAAA,EAAU,CAACC,QA1BM,WAC9B9B,GAAa,IAAI+B,MAAOC,UAC1B,EAwB6D,UAC7C,SAACC,EAAe,kBAQ5B,SAACxB,EAAA,EAAK,CAACC,UAAU,SAASwB,EAAI,EAAIvB,MAAM,OAAM,UAC5C,SAAC,KAAM,QAKf,C,+KClEMwB,EAAqB,SAACC,GAC1B,OAAOA,EAAMC,aACf,EAEO,EACLC,EAAAA,GAAAA,cAAqB,SAACF,GAAgB,OAAKA,EAAMC,aAAa,IADjDE,EAAS,EAATA,UAGFC,GAHuB,EAAVC,WAA0B,EAAdC,eAAyB,EAATC,UAAsB,EAAXC,YAGlC,SAACR,GAC9B,OAAOD,EAAmBC,GAAOS,OACnC,GAEaC,EAA2B,SAACV,GACvC,OAAOD,EAAmBC,GAAOW,gBACnC,EAUaC,GAAkBC,EAAAA,EAAAA,IAC7BV,GACA,SAACH,GACC,IACMc,EAAyC,CAAC,EAMhD,OAPgBd,EAERe,SAAQ,SAACC,GACfF,EAAgBE,EAAIC,YAAU,UACzBD,EAEP,IACOF,CACT,IAGWI,GAAkBL,EAAAA,EAAAA,IAC7BV,GACA,SAACgB,GAMC,OALiCC,EAAAA,EAAAA,IAAQD,GAAS,SAACE,GACjD,OAAOA,EAAMC,QAAO,SAACN,GACnB,QAASA,EAAIO,iBACf,GACF,GAEF,G,8FC/CWnE,EAAoCoE,EAAAA,GAEpClE,EAAkDmE,EAAAA,E","sources":["../node_modules/@mui/icons-material/esm/RefreshOutlined.js","core/favorites/FavoritesLayout.tsx","core/store/favorites/favorites.selectors.ts","store/appHook.ts"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n}), 'RefreshOutlined');","import { IconButton, Stack, Tooltip } from \"@mui/material\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport FilterInput from \"../movies/movies/filter/FilterInput\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { RefreshOutlined } from \"@mui/icons-material\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport * as fromFavSelectors from '../store/favorites/favorites.selectors';\nimport { fetchFavoritesSwitchThunk, fetchFavoritesThunk } from \"../store/favorites/favorites.thunks\";\n\nconst Favorites = () => {\n\n  const { isMobile } = useScreenSize();\n  const dispatch = useAppDispatch();\n  const favCount: number = useAppSelector(fromFavSelectors.selectFavorited).length;\n  const isLoading: boolean | undefined = useAppSelector(fromFavSelectors.selectIsLoading);\n  const [fetchTime, setFetchTime] = useState<number>(0);\n\n  useEffect(() => {\n    const promise = dispatch(fetchFavoritesSwitchThunk({user: 'yqu'}));\n    return (() => {\n      promise.abort();\n    });\n  }, [dispatch, fetchTime]);\n\n  const onFilterChangeHandler = useCallback((userInput: string) => {\n  }, []);\n\n  const refreshFavoritesHandler = () => {\n    setFetchTime(new Date().getTime());\n  };\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n        position:\"sticky\",\n        sx:{top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 } flexDirection={ { xs: 'row', sm: 'row' } } justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid xs={ 10 } sm={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n              <Grid container xs={ 12 }>\n                <Grid xs={ 8 }>\n                  <FilterInput filterChange={ onFilterChangeHandler } count={ favCount }/>\n                </Grid>\n                <Grid xs={ 2 } sx={ {display:'flex'} } justifyContent=\"center\" alignItems=\"center\">\n                  { isLoading && <ProgressCircle size={ 20 } /> }\n                </Grid>\n              </Grid>\n            </Stack>\n          </Grid>\n          <Grid xs={ 2 } sm={ 8 }>\n            <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\">\n              <Tooltip title=\"Refresh\">\n                <IconButton onClick={ refreshFavoritesHandler }>\n                  <RefreshOutlined />\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n\n      <Stack direction=\"column\" p={ 3 } width=\"100%\">\n        <Outlet />\n      </Stack>\n\n    </Stack>\n  );\n};\n\nexport default Favorites;","import { createSelector, createAction } from \"@reduxjs/toolkit\";\nimport { FavoriteMoviesObjList, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { RootState } from \"src/store/appStore\";\nimport produce from 'immer';\nimport { adapter } from \"./favorites.reducer\";\n\nconst favoriteFilmsSlice = (state: RootState) => {\n  return state.favoriteFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  adapter.getSelectors((state: RootState) => state.favoriteFilms);\n\nexport const selectIsLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).loading;\n};\n\nexport const selectIsFirstTimeLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).firstTimeLoading;\n};\n\nexport const selectError = (state: RootState) => {\n  return favoriteFilmsSlice(state).error;\n};\n\nexport const selectErrorMsg = (state: RootState) => {\n  return favoriteFilmsSlice(state).errMsg;\n};\n\nexport const selectAllByEpId = createSelector(\n  selectAll,\n  (state: FavoriteToSave[]): FavoriteMoviesObjList => {\n    const allFavs = state;\n    const transformedData: FavoriteMoviesObjList = {};\n    allFavs.forEach((fav: FavoriteToSave) => {\n      transformedData[fav.episodeId] = {\n        ...fav\n      };\n    });\n    return transformedData;\n  }\n);\n\nexport const selectFavorited = createSelector(\n  selectAll,\n  (allFavs: FavoriteToSave[]) => {\n    const result: FavoriteToSave[] = produce(allFavs, (draft) => {\n      return draft.filter((fav) => {\n        return !!fav.isCurrentFavorite;\n      });\n    });\n    return result;\n  }\n);","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["createSvgIcon","_jsx","d","isMobile","useScreenSize","dispatch","useAppDispatch","favCount","useAppSelector","fromFavSelectors","length","isLoading","useState","fetchTime","setFetchTime","useEffect","promise","fetchFavoritesSwitchThunk","user","abort","onFilterChangeHandler","useCallback","userInput","Stack","direction","width","toolbarProps","position","sx","top","container","xs","flexDirection","sm","justifyContent","alignItems","FilterInput","filterChange","count","display","size","Tooltip","title","IconButton","onClick","Date","getTime","RefreshOutlined","p","favoriteFilmsSlice","state","favoriteFilms","adapter","selectAll","selectIsLoading","selectById","selectEntities","selectIds","selectTotal","loading","selectIsFirstTimeLoading","firstTimeLoading","selectAllByEpId","createSelector","transformedData","forEach","fav","episodeId","selectFavorited","allFavs","produce","draft","filter","isCurrentFavorite","useDispatch","useSelector"],"sourceRoot":""}