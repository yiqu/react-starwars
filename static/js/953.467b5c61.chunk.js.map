{"version":3,"file":"static/js/953.467b5c61.chunk.js","mappings":"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","sources":["shared/rest/starwars-api.ts","core/fetchers/movies.ts","core/hooks/useFetchMovieDetail.ts","core/movies/movies/movie/Movie.tsx","shared/components/skeleton/LoadingSkeleton.tsx","shared/utils/sleep.js","../node_modules/@mui/material/esm/Unstable_Grid2/Grid2.js"],"sourcesContent":["import axios from 'axios';\nimport { HttpParams } from '../models/http.model';\n\nexport const SW_BASE_API = 'https://swapi.dev/api/';\n\nconst axiosStarwarsInstance = axios.create({\n  baseURL: SW_BASE_API,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosStarwarsInstance = () => {\n  return axiosStarwarsInstance;\n};\n\nexport const axiosStarwarsGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosStarwarsInstance.get<T>(url, {\n    params: params\n  });\n};\n\n\nexport default axiosStarwarsInstance;","import { AxiosResponse } from 'axios';\nimport { HttpParams } from 'src/shared/models/http.model';\nimport { axiosStarwarsGet } from 'src/shared/rest/starwars-api';\nimport { sleep } from \"../../shared/utils/sleep\";\n\n\nexport const axiosFetcher = async <T>(url: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n  return await axiosStarwarsGet<T>(url, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n        // return {TEST:\"TEST\"};\n      } \n    });\n};\n","import { FetchMovieDetailHookProp } from \"src/shared/models/core-props.model\";\nimport useSWR from \"swr\";\nimport { axiosFetcher } from '../fetchers/movies';\n\nconst useFetchMovieDetail = <T>({ movieId }: FetchMovieDetailHookProp) => {\n\n  const { data, isValidating, error } = useSWR(`films/${movieId}`, axiosFetcher<T>, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  return {\n    data,\n    loading: isValidating || (!error && !data),\n    error\n  };\n};\n\nexport default useFetchMovieDetail;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport useFetchMovieDetail from \"src/core/hooks/useFetchMovieDetail\";\nimport { Routes, Route, useParams, Params } from 'react-router-dom';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport LoadingSkeleton from \"src/shared/components/skeleton/LoadingSkeleton\";\nimport { StarwarFilmDetail } from \"src/shared/models/starwars.model\";\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport CardMedia from '@mui/material/CardMedia';\n\n\nconst displayKeys = ['release_date', 'director', 'producer'];\n\nconst Movie = () => {\n\n  const params: Readonly<Params<string>> = useParams();\n  const { data, loading, error } = useFetchMovieDetail<StarwarFilmDetail>({ movieId: `${params.movieId}` });\n\n  return (\n    <Grid xs={ 12 } container sx={ {my: 2} }>\n      { loading ? <Grid xs={ 12 } sm={ 8 } smOffset={ 2 }> <LoadingSkeleton /> </Grid> : (\n        <Grid xs={ 10 } sm={ 8 } smOffset={ 2 } xsOffset={ 1 }>\n\n          <CardMedia\n            component=\"img\"\n            alt=\"poster\"\n            height=\"100\"\n            image={ `${process.env.PUBLIC_URL}/assets/poster-img/${data?.episode_id}.png` }\n            sx={ {backgroundColor: '#000', objectFit: 'cover', borderRadius: '25px'} } />\n\n          <Typography variant=\"h6\" component={ 'div' } sx={ {display: 'flex', justifyContent: 'center', mt: '2rem'} }>\n            <Typography variant=\"h6\" color='text.secondary' sx={ {fontWeight: '300', mr: '10px'} }>\n              EP { data?.episode_id }\n            </Typography>\n            { data?.title }\n          </Typography>\n          \n          <List dense={ false } sx={ {display: 'flex',justifyContent: 'center', alignItems:'center', flexDirection: 'column'} }>\n            { \n              displayKeys.map((objKey) => {\n                return (\n                  <React.Fragment key={ objKey }>\n                    <ListItem >\n                      <ListItemText sx={ {display: 'flex',justifyContent: 'center', alignItems:'center', flexDirection: 'column'} }\n                        primary={ objKey }\n                        secondary={  data![objKey as keyof StarwarFilmDetail] }/>\n                    </ListItem>\n                  </React.Fragment>\n                );\n              })\n            }\n\n          </List>\n            \n        </Grid>\n      ) }\n    </Grid>\n  );\n};\n\nexport default Movie;","import * as React from 'react';\nimport Skeleton from '@mui/material/Skeleton';\nimport Stack from '@mui/material/Stack';\n\nconst LoadingSkeleton = () => {\n\n  return (\n    <Stack spacing={ 1 }>\n      {/* For variant=\"text\", adjust the height via font-size */}\n      <Skeleton variant=\"text\" sx={ { fontSize: '1rem' } } />\n\n      {/* For other variants, adjust the size with `width` and `height` */}\n      <Skeleton variant=\"circular\" width={ 40 } height={ 40 } />\n      <Skeleton variant=\"rectangular\" width={ '100%' } height={ 60 } />\n      <Skeleton variant=\"rounded\" width={ '100%' } height={ 60 } />\n    </Stack>\n  );\n};\n\nexport default LoadingSkeleton;","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n","import PropTypes from 'prop-types';\nimport { createGrid } from '@mui/system/Unstable_Grid';\nimport { styled, useThemeProps } from '../styles';\nconst Grid2 = createGrid({\n  createStyledComponent: styled('div', {\n    name: 'MuiGrid2',\n    overridesResolver: (props, styles) => styles.root\n  }),\n  componentName: 'MuiGrid2',\n  // eslint-disable-next-line material-ui/mui-name-matches-component-name\n  useThemeProps: inProps => useThemeProps({\n    props: inProps,\n    name: 'MuiGrid2'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid2.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Grid2;"],"names":["axiosStarwarsInstance","axios","baseURL","timeout","headers","responseType","axiosStarwarsGet","url","params","get","axiosFetcher","slow","sleep","then","res","data","catch","error","response","status","movieId","useSWR","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","isValidating","loading","displayKeys","useParams","useFetchMovieDetail","xs","container","sx","my","sm","smOffset","LoadingSkeleton","xsOffset","CardMedia","component","alt","height","image","process","episode_id","backgroundColor","objectFit","borderRadius","Typography","variant","display","justifyContent","mt","color","fontWeight","mr","title","List","dense","alignItems","flexDirection","map","objKey","ListItem","ListItemText","primary","secondary","spacing","fontSize","width","time","Promise","resolve","reject","setTimeout","Grid2","createGrid","createStyledComponent","styled","name","overridesResolver","props","styles","root","componentName","useThemeProps","inProps"],"sourceRoot":""}