{"version":3,"file":"static/js/643.565f386d.chunk.js","mappings":"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","sources":["shared/rest/useSwGet.ts","shared/form/m-autocomplete/FormAutocomplete.tsx","shared/form/m-checkbox/FormCheckbox.tsx","shared/form/m-select/FormSelect.tsx","shared/models/form.model.ts","shared/form/m-textarea/FormTextArea.tsx","shared/form/FormFields.tsx","create-new/new-dialog/NewFilmForm.tsx","create-new/schemas/all-schemas.ts","create-new/new-dialog/NewFilmDialog.tsx","create-new/core/CreateNewFilm.tsx","shared/form/m-input/FormInput.tsx","shared/rest/starwars-api.ts","shared/utils/sleep.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport useSWR from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nimport { axiosStarwarsFetcher } from 'src/shared/rest/starwars-api';\nimport { GetHookProps, HttpParams } from '../models/http.model';\nimport { useEffect, useState } from 'react';\nimport { usePreviousDistinct, useDeepCompareEffect } from 'react-use';\nimport { HttpResponse } from '../models/starwars.model';\n\nconst useSwGet = <T>(url: string, params: HttpParams) => {\n\n  const [ httpParams, setParams ] = useState<HttpParams | undefined>(params);\n\n  useDeepCompareEffect(() => {\n    setParams((prev) => {\n      return {\n        ...prev,\n        ...params\n      };\n    });\n  }, [params]);\n\n  const { data, error, isLoading } = useSWRImmutable(`${url}`, axiosStarwarsFetcher<HttpResponse<T>>);\n\n  return {\n    data: data?.results,\n    loading: isLoading,\n    isError: error\n  };\n\n};\n\nexport default useSwGet;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormAutocompleteProps, FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { Checkbox, FormControl, FormHelperText, InputLabel } from '@mui/material';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { upperFirst, startCase } from 'lodash';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\n\n\nconst icon = <CheckBoxOutlineBlankIcon/>;\nconst checkedIcon = <CheckBoxIcon />;\n\nconst FormAutocomplete = ({ label, name, options, dataLoading, placeholder, validate, \n    disabled, ...props}: FormAutocompleteProps) => {\n  const formik = useFormikContext<any>();\n\n  const onValueChangeHandler = (event: any, value: any) => {\n    formik.setFieldValue(name, value);\n  };\n  \n  return (\n    <FormControl fullWidth size='small'>\n      <Field as={ Autocomplete } \n        label={ label } \n        name={ name } \n        id={ name } \n        onChange={ onValueChangeHandler } \n        renderInput={ (params: any) => (\n          <TextField { ...params }\n            name={ name }\n            variant=\"standard\"\n            label={ startCase((dataLoading ? `Loading ${name}...` : `Select ${name}`)) } \n            placeholder={ upperFirst(placeholder ?? label) }\n            error={ formik.touched[name] && !!formik.errors[name] }\n            { ...props.renderInputProps }\n          />\n        ) }\n        renderOption= { (props: any, option: any, { selected }: {selected: boolean}) => { return (\n          <li { ...props }>\n            <Checkbox\n              icon={ icon }\n              checkedIcon={ checkedIcon }\n              checked={ selected }\n            />\n            { option.name ?? option.display ?? option }\n          </li>\n        );} }\n        getOptionLabel={ (option: any) => option.name ?? option.display ?? option }\n        validate={ validate }\n        options={ options }\n        disabled={ disabled }\n        loading={ dataLoading }\n        loadingText = { `Loading ${label}` }\n        noOptionsText={ `No ${label} available` }\n        autoHighlight\n        { ...props.props } \n      />\n\n      <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n        {\n          (formik.touched[name] && formik.errors[name]) ? \n            (<ErrorMessage name={ name } render={ (err) => upperFirst(err) } />) : (<>{ props.helperText }</>)\n        }\n      </FormHelperText>\n      \n    </FormControl>\n  );\n};\n\nexport default FormAutocomplete;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormControlLabel, FormHelperText, InputLabel } from '@mui/material';\nimport Checkbox from '@mui/material/Checkbox';\nimport { upperFirst, startCase } from 'lodash';\n\nconst FormCheckbox = ({ label, name, props, disabled }: FormInput2Props) => {\n  const formik = useFormikContext<any>();\n  return (\n    <FormControl fullWidth size='small'>\n      <Field as={ FormControlLabel } \n        control={ <Checkbox checked={ !!formik.values[name] } \n          onChange={ (e: React.ChangeEvent<HTMLInputElement>) => formik.setFieldValue(name, e.target.checked || false) }/> }\n        label={ startCase(label) } \n        name={ name } \n        id={ name }\n        disabled={ disabled }\n        { ...props } />\n    </FormControl>\n  );\n};\n\nexport default FormCheckbox;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormSelectProps, NONE_SELECTED_VALUE } from 'src/shared/models/form.model';\nimport { FormHelperText, MenuItem, Select, Typography } from '@mui/material';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport { upperFirst, startCase } from 'lodash';\n\n\nconst FormikSelect = ({ label, name, options, disabled, \n    placeholder, validate, ...props}: FormSelectProps) => {\n\n  const formik = useFormikContext<any>();\n\n  return (\n    <FormControl fullWidth size='small'>\n      <InputLabel id={ name+'label' }> { startCase(label) } </InputLabel>\n\n      <Field as={ Select } \n        name={ name } \n        label={ startCase(label) }\n        id={ name } \n        validate={ validate }\n        variant=\"standard\"\n        error={ formik.touched[name] && !!formik.errors[name] }\n        disabled={ disabled }\n        { ...props.props } >\n        {\n          props.useDefaultNoneSelected && (\n          <MenuItem value={ NONE_SELECTED_VALUE } key={ '' } disabled>\n            <Typography sx={ {color: '#666'} }>Select { props.useDefaultNoneSelected }</Typography>\n          </MenuItem>\n          ) \n        }\n        {\n          options?.map((opt) => {\n            const display = opt.name ?? opt;\n            const value = opt.value ?? opt;\n            return (\n              <MenuItem value={ value } key={ opt.id ?? opt.uid }>{ display }</MenuItem>\n            );\n          })\n        }\n      </Field>\n      <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n        {\n          (formik.touched[name] && formik.errors[name]) ? \n            (<ErrorMessage name={ name } render={ (err) => upperFirst(err) } />) : (<>{props.helperText}</>)\n        }\n      </FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default FormikSelect;","import { TextFieldProps, SelectProps } from '@mui/material';\n\nexport const NONE_SELECTED_VALUE = 'NONE_SELECTED';\nexport interface FormInputProps {\n  name: string;\n  label?: string;\n  disabled?: boolean;\n  showLabel?: boolean;\n  helperText?: string;\n  placeholder?: string;\n  type: string;\n  validate?: (value: any) => string | null;\n  valueChange?: (payload: any) => void;\n}\n\nexport interface FormInput2Props extends FormInputProps {\n  props?: TextFieldProps;\n}\n\nexport interface FormAutocompleteProps extends FormInputProps {\n  options: any[];\n  props?: any;\n  dataLoading?: boolean;\n  renderInputProps?: any;\n}\n\nexport interface FormSelectProps extends FormInputProps {\n  options?: any[];\n  useDefaultNoneSelected?: boolean | string;\n  props?: SelectProps;\n}\n\nexport type FormikInputProps = TextFieldProps & FormInputProps;\n\nexport type FormikSelectProps = SelectProps & FormSelectProps;\n\nexport type GenericFormFieldObject = FormInput2Props | FormAutocompleteProps | FormSelectProps;\n\nexport interface AsyncFormFieldOptions<T> {\n  [key: string]: {\n    options:  T[] | undefined,\n    loading?: boolean\n  }\n}\n\nexport interface FormFieldOptions<T> {\n  [key: string]: {\n    options:  T[] | undefined,\n  }\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\nimport TextareaAutosize from '@mui/base/TextareaAutosize';\nimport { upperFirst, startCase } from 'lodash';\n\nconst FormTextArea = ({ label, name, placeholder, disabled, validate, ...props}: FormInput2Props) => {\n  const formik = useFormikContext<any>();\n  return (\n    <FormControl fullWidth size='small'>\n\n      <Field as={ TextField } \n        multiline\n        name={ name } \n        id={ name }\n        validate={ validate }\n        minRows={ 1 }\n        label={ startCase(label) }\n        error={ formik.touched[name] && !!formik.errors[name] }\n        placeholder={ upperFirst(placeholder ?? label) }\n        InputProps={ {\n          inputComponent: TextareaAutosize,\n          inputProps: {\n            style: {\n              resize: \"vertical\",\n              minHeight: \"3.5rem\"\n            },\n          }\n        } }\n        { ...props.props } />\n\n      <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n        {\n          (formik.touched[name] && formik.errors[name]) ? \n            (<ErrorMessage name={ name } render={ (err) => upperFirst(err) } />) : (<>{props.helperText}</>)\n        }\n      </FormHelperText>\n\n    </FormControl>\n  );\n};\n\nexport default FormTextArea;","import React from 'react';\nimport FormAutocomplete from \"src/shared/form/m-autocomplete/FormAutocomplete\";\nimport FormCheckbox from 'src/shared/form/m-checkbox/FormCheckbox';\nimport FormInput from \"src/shared/form/m-input/FormInput\";\nimport FormikSelect from \"src/shared/form/m-select/FormSelect\";\nimport FormTextArea from 'src/shared/form/m-textarea/FormTextArea';\n\nexport const CreateFormFields = (controlObject: any) => {\n  switch (controlObject.type) {\n    case 'select': {\n      return (\n        <FormikSelect \n          name={ controlObject.name } \n          label={ controlObject.label }\n          options={ controlObject.options ?? [] } \n          disabled={ controlObject.disabled }\n          placeholder={ controlObject.placeholder }\n          { ...controlObject }\n        />\n      );\n    }\n    case 'text': {\n      return (\n        <FormInput \n          name={ controlObject.name } \n          label={ controlObject.label }\n          disabled={ controlObject.disabled }\n          placeholder={ controlObject.placeholder }\n          { ...controlObject }\n        />\n      );\n    }\n    case 'autocomplete': {\n      return (\n        <FormAutocomplete \n          name={ controlObject.name } \n          label={ controlObject.label }\n          options={ controlObject.props.options ?? [] }\n          dataLoading={ controlObject.props.loading } \n          disabled={ controlObject.disabled }\n          placeholder={ controlObject.placeholder }\n          { ...controlObject } />\n      );\n    }\n    case 'textarea': {\n      return (\n        <FormTextArea \n          name={ controlObject.name } \n          label={ controlObject.label }\n          disabled={ controlObject.disabled }\n          placeholder={ controlObject.placeholder }\n          { ...controlObject } />\n      );\n    }\n    case 'checkbox': {\n      return (\n        <FormCheckbox \n          name={ controlObject.name }\n          label={ controlObject.label }\n          disabled={ controlObject.disabled }\n          { ...controlObject } />\n      );\n    }\n    default: {\n      return (\n        <> No component matched... </>\n      );\n    }\n  }\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Checkbox } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport React, { useEffect, useState } from 'react';\n import { Form, useFormikContext } from 'formik';\nimport { StarwarsContent, StarwarsPeople } from 'src/shared/models/starwars.model';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport useSwGet from 'src/shared/rest/useSwGet';\nimport { DEFAULT_MAX_PAGE_PARAMS } from 'src/shared/rest/starwars-api';\nimport { GenericFormFieldObject } from 'src/shared/models/form.model';\nimport { CreateFormFields } from 'src/shared/form/FormFields';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst NewFilmForm = (props: any) => {\n\n  const formikContext = useFormikContext<any>();\n\n  const [ formFields, setFormFields ] = useState<GenericFormFieldObject[]>([]);\n\n  const { data: peopleListData, isError, loading: peopleListLoading } = \n    useSwGet<StarwarsContent>('people', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: starshipsList, isError: starshipsError, loading: starshipsLoading } = \n    useSwGet<StarwarsContent>('starships', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: vehiclesList, isError: vehiclesError, loading: vehiclesLoading } = \n    useSwGet<StarwarsContent>('vehicles', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: planetList, isError: planetsError, loading: planetsLoading } = \n    useSwGet<StarwarsContent>('planets', DEFAULT_MAX_PAGE_PARAMS);\n\n  const { data: speciesList, isError: speciesError, loading: speciesLoading } = \n    useSwGet<StarwarsContent>('species', DEFAULT_MAX_PAGE_PARAMS);\n  \n  useEffect(() => {\n    console.log(formikContext.values);\n  }, [formikContext.values]);\n\n  useEffect(() => {\n    setFormFields(defaultFormFields);\n  }, []);\n\n  useEffect(() => {\n    if (peopleListData && peopleListData.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'characters';\n        });\n        fields[index].props.options = peopleListData;\n        return fields;\n      });\n    }\n  }, [peopleListData]);\n\n  useEffect(() => {\n    setFormFields((fields: any[]) => {\n      const index = fields.findIndex((field) => {\n        return field.name === 'characters';\n      });\n      fields[index].props.loading = peopleListLoading;\n      return [...fields];\n    });\n  }, [peopleListLoading]);\n\n  useEffect(() => {\n    if (starshipsList && starshipsList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'starships';\n        });\n        fields[index].props.options = starshipsList;\n        return fields;\n      });\n    }\n  }, [starshipsList]);\n\n  useEffect(() => {\n    setFormFields((fields: any[]) => {\n      const index = fields.findIndex((field) => {\n        return field.name === 'starships';\n      });\n      fields[index].props.loading = starshipsLoading;\n      return [...fields];\n    });\n  }, [starshipsLoading]);\n\n  useEffect(() => {\n    if (vehiclesList && vehiclesList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'vehicles';\n        });\n        fields[index].props.options = vehiclesList;\n        return fields;\n      });\n    }\n  }, [vehiclesList]);\n\n  useEffect(() => {\n    setFormFields((fields: any[]) => {\n      const index = fields.findIndex((field) => {\n        return field.name === 'vehicles';\n      });\n      fields[index].props.loading = vehiclesLoading;\n      return [...fields];\n    });\n  }, [vehiclesLoading]);\n\n  useEffect(() => {\n    if (planetList && planetList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'planets';\n        });\n        fields[index].options = planetList;\n        return [...fields];\n      });\n    }\n  }, [planetList]);\n\n  useEffect(() => {\n    if (speciesList && speciesList.length > -1) {\n      setFormFields((fields: any[]) => {\n        const index = fields.findIndex((field) => {\n          return field.name === 'species';\n        });\n        fields[index].props.options = speciesList;\n        return fields;\n      });\n    }\n  }, [speciesList]);\n\n  useEffect(() => {\n    setFormFields((fields: any[]) => {\n      const index = fields.findIndex((field) => {\n        return field.name === 'species';\n      });\n      fields[index].props.loading = speciesLoading;\n      return [...fields];\n    });\n  }, [speciesLoading]);\n\n\n  return (\n    <Form>\n      <Grid container spacing={ 2 }>\n        { formFields.map((field) => {\n          return (\n            <Grid key={ field.name } xs={ 12 } >\n              { CreateFormFields(field) }\n            </Grid>\n          );\n        }) \n      }\n      </Grid>\n    </Form>\n  );\n};\n\nexport default NewFilmForm;\n\nexport const defaultFormFields: GenericFormFieldObject[] = [\n  {\n    name: 'title',\n    label: 'title',\n    placeholder: 'A new hope',\n    type: 'text',\n    disabled: false,\n    props: {\n      variant: \"outlined\"\n    }\n  },\n  {\n    name: 'director',\n    label: 'director',\n    placeholder: 'George Lucas',\n    type: 'text',\n    disabled: false,\n    props: {\n      variant: \"outlined\"\n    }\n  },\n  {\n    name: 'characters',\n    label: 'characters',\n    type: 'autocomplete',\n    renderInputProps: {\n      variant: 'outlined' \n    },\n    disabled: false,\n    placeholder: 'Luke Skywalker, Han Solo...',\n    props: {\n      options: [],\n      multiple: true,\n      disableCloseOnSelect: true,\n      ChipProps: {\n        color: 'primary'\n      },\n    }\n  },\n  {\n    name: 'openingCrawl',\n    label: 'Opening crawl',\n    placeholder: 'In a galaxy far far away...',\n    type: 'textarea',\n    disabled: false,\n  },\n  {\n    name: 'planets',\n    label: 'Select planet',\n    type: 'select',\n    options: [],\n    disabled: false,\n    props: {\n      variant: 'outlined',\n    }\n  },\n  {\n    name: 'species',\n    label: 'Species',\n    type: 'autocomplete',\n    renderInputProps: {\n      variant: 'outlined' \n    },\n    disabled: false,\n    props: {\n      multiple: true,\n      disableCloseOnSelect: true,\n      ChipProps: {\n        color: 'primary'\n      },\n    }\n  },\n  {\n    name: 'vehicles',\n    label: 'Vehicles',\n    type: 'autocomplete',\n    renderInputProps: {\n      variant: 'outlined' \n    },\n    disabled: false,\n    props: {\n      multiple: true,\n      disableCloseOnSelect: true,\n      ChipProps: {\n        color: 'primary'\n      },\n    }\n  },\n  {\n    name: 'starships',\n    label: 'starships',\n    type: 'autocomplete',\n    renderInputProps: {\n      variant: 'outlined' \n    },\n    disabled: false,\n    props: {\n      multiple: true,\n      disableCloseOnSelect: true,\n      ChipProps: {\n        color: 'primary'\n      },\n    }\n  },\n  {\n    name: 'canon',\n    label: 'Canon movie',\n    type: 'checkbox',\n    disabled: false\n  }\n];","import * as Yup from 'yup';\n\nexport const newFilmValidationSchema = Yup.object({\n  title: Yup.string().required(),\n  director: Yup.string().required().min(1),\n  openingCrawl: Yup.string().required('Opening crawl text is a required field').min(5, 'At least 5 characters is required for crawl text'),\n  characters: Yup.array().min(1, \"At least one character is required\"),\n  starships: Yup.array().min(1,  \"At least one starship is required\"),\n  planets: Yup.object().required(\"Planet is a required field\"),\n  species: Yup.array().min(1,  \"At least one species is required\"),\n  vehicles: Yup.array().min(1,  \"At least one vehicle is required\"),\n});","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport { DialogProps } from 'src/shared/models/dialog.model';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Box, Button, Divider, IconButton, Paper, Stack, Typography } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\n import { Form, Formik, useFormikContext } from 'formik';\nimport NewFilmForm from './NewFilmForm';\nimport { newFilmValidationSchema } from '../schemas/all-schemas';\n\nexport interface NewFilmData {\n  title: string;\n  director: string;\n  characters: string[];\n  starships: string[];\n  openingCrawl: string;\n  planets: string;\n  species: string[];\n  vehicles: string[];\n  canon: boolean;\n}\n\nconst NewFilmDialog = ({ onClose, open, isEditMode }: DialogProps) => {\n\n  const initValues: NewFilmData = {\n    title: '',\n    director: '',\n    characters: [],\n    starships: [],\n    openingCrawl: 'In a galaxy far far away...',\n    planets: '',\n    species: [],\n    vehicles: [],\n    canon: false\n  };\n\n  const handleClose = (event: any, reason?: string) => {\n    if (reason !== 'backdropClick') {\n      onClose(null);\n    }\n  };\n\n  const formSubmitHandler = (payload: any) => {\n    console.log(payload);\n  };\n\n  return (\n     \n    <Formik \n      initialValues={ initValues }\n      onSubmit={ formSubmitHandler }\n      validationSchema={ newFilmValidationSchema } >\n      {(formik) => {\n        return <>\n          <Dialog onClose={ handleClose } open={ open } disableEscapeKeyDown >\n  \n            <DialogTitle bgcolor=\"primary.main\" color=\"white\">\n              <Stack direction={ 'row' } justifyContent=\"space-between\" alignItems=\"center\">\n                <div>\n                  { isEditMode ? 'Editing' : 'Create New Movie' }\n                </div>\n                <div>\n                  <IconButton sx={ {color:'white'} } onClick={ handleClose }>\n                    <CloseIcon />\n                  </IconButton>\n                </div>\n              </Stack>\n            </DialogTitle>\n\n            <Divider />\n\n            <DialogContent >\n              <NewFilmForm />\n            </DialogContent>\n\n            <DialogActions>\n              <Button variant=\"text\" startIcon={ <RestartAltIcon /> } onClick={ formik.handleReset }>\n                Reset\n              </Button>\n              <Button variant=\"text\" startIcon={ <SaveIcon /> } onClick={ formik.submitForm }>\n                Save\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </>;\n      }}\n    </Formik>\n  );\n};\n\nexport default NewFilmDialog;\n\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { createSearchParams, Outlet, useNavigate, useSearchParams } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { Button, Typography } from \"@mui/material\";\nimport AddAPhotoOutlinedIcon from '@mui/icons-material/AddAPhotoOutlined';\nimport NewFilmDialog from \"../new-dialog/NewFilmDialog\";\n\nconst CreateNewFilm = () => {\n\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  const handleClickOpen = () => {\n    setShowDialog(true);\n  };\n  const handleClose = () => {\n    setShowDialog(false);\n  };\n\n  return (\n    <>\n      <Grid container >\n        <Grid container mx={ 2 } my={ 2 } xs={ 12 } spacing={ 2 }>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"h6\" >\n              Create your own Starwars movie.\n            </Typography>\n          </Grid>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"body2\">\n              Try adding your own movie with starships, vehicles, species, and planet.\n            </Typography>\n          </Grid>\n\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Button variant=\"contained\" startIcon={ <AddAPhotoOutlinedIcon /> } onClick={ handleClickOpen }>\n              Add New Movie\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      { showDialog && <NewFilmDialog onClose={ handleClose } open={ showDialog }></NewFilmDialog> }     \n    </>\n    \n  );\n};\n\nexport default CreateNewFilm;;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { ErrorMessage, Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\nimport { upperFirst, startCase } from 'lodash';\n\n\nconst FormInput = ({ label, name, validate, \n    disabled, placeholder, ...props}: FormInput2Props) => {\n      \n  const formik = useFormikContext<any>();\n  return (\n    <FormControl fullWidth size='small'>\n      <Field as={ TextField } \n        label={ startCase(label) } \n        name={ name } \n        id={ name }\n        error={ formik.touched[name] && !!formik.errors[name] }\n        validate={ validate }\n        variant=\"standard\"\n        disabled={ disabled }\n        placeholder={ upperFirst(placeholder ?? label) }\n        { ...props.props } />\n\n      <FormHelperText id={ `${name}-helper-text` } error={ formik.touched[name] && !!formik.errors[name] }>\n        {\n          (formik.touched[name] && formik.errors[name]) ? \n            (<ErrorMessage name={ name } render={ (err) => upperFirst(err) } />) : (<>{props.helperText}</>)\n        }\n      </FormHelperText>\n\n    </FormControl>\n  );\n};\n\nexport default FormInput;","import axios, { AxiosResponse } from 'axios';\nimport { HttpParams } from '../models/http.model';\nimport { sleep } from '../utils/sleep';\n\nexport const SW_BASE_API = 'https://swapi.tech/api/';\nexport const DEFAULT_MAX_PAGE_PARAMS = {limit: 10000, page: 1};\n\nconst axiosStarwarsInstance = axios.create({\n  baseURL: SW_BASE_API,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosStarwarsInstance = () => {\n  return axiosStarwarsInstance;\n};\n\nexport const axiosStarwarsGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosStarwarsInstance.get<T>(url, {\n    params: params\n  });\n};\n\nexport default axiosStarwarsInstance;\n\nexport const axiosStarwarsFetcher = async <T>(url: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n  return await axiosStarwarsGet<T>(url, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n      } \n    });\n};\n","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n"],"names":["url","params","useState","setParams","useDeepCompareEffect","prev","useSWRImmutable","axiosStarwarsFetcher","data","error","isLoading","results","loading","isError","icon","CheckBoxOutlineBlank","checkedIcon","CheckBox","label","name","options","dataLoading","placeholder","validate","disabled","props","formik","useFormikContext","FormControl","fullWidth","size","as","Autocomplete","id","onChange","event","value","setFieldValue","renderInput","TextField","variant","startCase","upperFirst","touched","errors","renderInputProps","renderOption","option","selected","Checkbox","checked","display","getOptionLabel","loadingText","noOptionsText","autoHighlight","FormHelperText","render","err","helperText","FormControlLabel","control","values","e","target","InputLabel","Select","useDefaultNoneSelected","MenuItem","Typography","sx","color","map","opt","uid","multiline","minRows","InputProps","inputComponent","TextareaAutosize","inputProps","style","resize","minHeight","CreateFormFields","controlObject","type","FormInput","formikContext","formFields","setFormFields","useSwGet","DEFAULT_MAX_PAGE_PARAMS","peopleListData","peopleListLoading","starshipsList","starshipsLoading","vehiclesList","vehiclesLoading","planetList","speciesList","speciesLoading","useEffect","console","log","defaultFormFields","length","fields","index","findIndex","field","Grid","container","spacing","xs","multiple","disableCloseOnSelect","ChipProps","newFilmValidationSchema","Yup","title","required","director","min","openingCrawl","characters","starships","planets","species","vehicles","onClose","open","isEditMode","handleClose","reason","initialValues","canon","onSubmit","payload","validationSchema","Dialog","disableEscapeKeyDown","DialogTitle","bgcolor","Stack","direction","justifyContent","alignItems","IconButton","onClick","Close","Divider","DialogContent","DialogActions","Button","startIcon","RestartAlt","handleReset","Save","submitForm","showDialog","setShowDialog","mx","my","flexDirection","AddAPhotoOutlined","limit","page","axiosStarwarsInstance","axios","baseURL","timeout","headers","responseType","axiosStarwarsGet","get","slow","sleep","then","res","catch","response","status","time","Promise","resolve","reject","setTimeout"],"sourceRoot":""}