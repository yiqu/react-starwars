{"version":3,"file":"static/js/309.89035d8c.chunk.js","mappings":"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","sources":["core/favorites/FavoritesLayout.tsx","core/store/favorites/favorites.selectors.ts","../node_modules/@mui/icons-material/esm/RefreshOutlined.js"],"sourcesContent":["import { IconButton, Stack, Tooltip } from \"@mui/material\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport FilterInput from \"../movies/movies/filter/FilterInput\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { RefreshOutlined } from \"@mui/icons-material\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport * as fromFavSelectors from '../store/favorites/favorites.selectors';\nimport { fetchFavoritesThunk } from \"../store/favorites/favorites.thunks\";\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport { resetExtraParams } from \"../store/favorites\";\n\nconst Favorites = () => {\n\n  const { isMobile } = useScreenSize();\n  const dispatch = useAppDispatch();\n  const favCount: number = useAppSelector(fromFavSelectors.selectFavorited).length;\n  const isLoading: boolean | undefined = useAppSelector(fromFavSelectors.selectIsLoading);\n  const extraFetchParams: HttpParams | undefined = useAppSelector(fromFavSelectors.selectExtraFetchParams);\n\n  const onFilterChangeHandler = useCallback((userInput: string) => {\n    const params = {\n      orderBy: '\"episodeId\"',\n      equalTo: `${userInput.trim()}`\n    };\n    dispatch(fetchFavoritesThunk({ httpParams: {user: 'yqu'}, extra: params }));\n  }, [dispatch]);\n\n  const refreshFavoritesHandler = () => {\n    if (extraFetchParams?.equalTo) {\n      dispatch(resetExtraParams());\n    } else {\n      dispatch(fetchFavoritesThunk({ httpParams: {user: 'yqu'} }));\n    }\n  };\n\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n        position:\"sticky\",\n        sx:{top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 } flexDirection={ { xs: 'row', sm: 'row' } } justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid xs={ 10 } sm={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n              <Grid container xs={ 12 }>\n                <Grid xs={ 8 }>\n                  <FilterInput filterChange={ onFilterChangeHandler } count={ favCount } placeholderText={ 'Filter by EP number. e.g. 3' } \n                    currentText={ extraFetchParams ? extraFetchParams.equalTo : undefined } />\n                </Grid>\n                <Grid xs={ 2 } sx={ {display:'flex'} } justifyContent=\"center\" alignItems=\"center\">\n                  { isLoading && <ProgressCircle size={ 20 } /> }\n                </Grid>\n              </Grid>\n            </Stack>\n          </Grid>\n          <Grid xs={ 2 } sm={ 8 }>\n            <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\">\n              <Tooltip title=\"Refresh\">\n                <IconButton onClick={ refreshFavoritesHandler }>\n                  <RefreshOutlined />\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n\n      <Stack direction=\"column\" p={ 3 } width=\"100%\">\n        <Outlet />\n      </Stack>\n\n    </Stack>\n  );\n};\n\nexport default Favorites;","import { createSelector, createAction } from \"@reduxjs/toolkit\";\nimport { FavoriteMoviesObjList, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { RootState } from \"src/store/appStore\";\nimport produce from 'immer';\nimport { adapter } from \"./favorites.reducer\";\nimport { HttpParams } from \"src/shared/models/http.model\";\n\nconst favoriteFilmsSlice = (state: RootState) => {\n  return state.favoriteFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  adapter.getSelectors((state: RootState) => state.favoriteFilms);\n\nexport const selectIsLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).loading;\n};\n\nexport const selectIsFavToggleLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).favoriteToggleLoading;\n};\n\nexport const selectIsFirstTimeLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).firstTimeLoading;\n};\n\nexport const selectError = (state: RootState) => {\n  return favoriteFilmsSlice(state).error;\n};\n\nexport const selectErrorMsg = (state: RootState) => {\n  return favoriteFilmsSlice(state).errMsg;\n};\n\nexport const selectAllByEpId = createSelector(\n  selectAll,\n  (state: FavoriteToSave[]): FavoriteMoviesObjList => {\n    const allFavs = state;\n    const transformedData: FavoriteMoviesObjList = {};\n    allFavs.forEach((fav: FavoriteToSave) => {\n      transformedData[fav.episodeId] = {\n        ...fav\n      };\n    });\n    return transformedData;\n  }\n);\n\nexport const selectFavorited = createSelector(\n  selectAll,\n  (allFavs: FavoriteToSave[]) => {\n    const result: FavoriteToSave[] = produce(allFavs, (draft) => {\n      return draft.filter((fav) => {\n        return !!fav.isCurrentFavorite;\n      }).sort((a, b) => {\n        return a.lastUpdated < b.lastUpdated ? 1 : -1;\n      });\n    });\n    return result;\n  }\n);\n\nexport const selectExtraFetchParams = createSelector(\n  favoriteFilmsSlice,\n  (state): HttpParams | undefined => {\n    return state.extraFetchParams;\n  }\n);\n\nexport const selectFilteredFavorites = createSelector(\n  selectAll,\n  favoriteFilmsSlice,\n  (allFavs, state) => {\n    const favs = state.extraFetchParams?.equalTo ? (state.filteredFavorites ?? []) : allFavs;\n    const result: FavoriteToSave[] = produce(favs, (draft) => {\n      return draft.filter((fav) => {\n        return !!fav.isCurrentFavorite;\n      }).sort((a, b) => {\n        return a.lastUpdated < b.lastUpdated ? 1 : -1;\n      });\n    });\n    return result;\n  }\n);","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n}), 'RefreshOutlined');"],"names":["isMobile","useScreenSize","dispatch","useAppDispatch","favCount","useAppSelector","fromFavSelectors","length","isLoading","extraFetchParams","onFilterChangeHandler","useCallback","userInput","params","orderBy","equalTo","trim","fetchFavoritesThunk","httpParams","user","extra","Stack","direction","width","toolbarProps","position","sx","top","container","xs","flexDirection","sm","justifyContent","alignItems","FilterInput","filterChange","count","placeholderText","currentText","undefined","display","size","Tooltip","title","IconButton","onClick","resetExtraParams","RefreshOutlined","p","favoriteFilmsSlice","state","favoriteFilms","adapter","selectAll","selectIsLoading","selectById","selectEntities","selectIds","selectTotal","loading","selectIsFavToggleLoading","favoriteToggleLoading","selectIsFirstTimeLoading","firstTimeLoading","selectAllByEpId","createSelector","transformedData","forEach","fav","episodeId","selectFavorited","allFavs","produce","draft","filter","isCurrentFavorite","sort","a","b","lastUpdated","selectExtraFetchParams","selectFilteredFavorites","favs","filteredFavorites","createSvgIcon","_jsx","d"],"sourceRoot":""}