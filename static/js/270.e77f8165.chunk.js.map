{"version":3,"file":"static/js/270.e77f8165.chunk.js","mappings":"uLAOe,SAASA,EAAU,GAAmC,IAAjCC,EAAM,EAANA,OAAQC,EAAK,EAALA,MAE1C,OACE,SAAC,IAAG,CAACC,QAAU,EAAIC,MAAM,OAAM,UAC7B,UAAC,IAAK,CAACC,UAAU,SAASC,QAAU,EAAIC,eAAe,SAASC,WAAW,SAAQ,WACjF,SAAC,IAAU,CAACC,QAAQ,KAAKC,GAAK,CAACC,cAAc,aAAc,qCAI3D,UAAC,IAAK,CAACN,UAAU,SAASC,QAAU,EAAIC,eAAe,SAASC,WAAW,SAAQ,WACjF,SAAC,IAAU,CAACC,QAAQ,QAAQG,WAAa,IAAK,qBAG9C,SAAC,IAAU,CAACH,QAAQ,QAAO,SACvBR,QAIN,UAAC,IAAK,CAACI,UAAU,SAASC,QAAU,EAAIC,eAAe,SAASC,WAAW,SAAQ,WACjF,SAAC,IAAU,CAACC,QAAQ,QAAQG,WAAa,IAAK,oBAG9C,SAAC,IAAU,CAACH,QAAQ,QAAQI,UAAU,MAAK,UACzC,0BACE,iBAAMC,MAAQ,CAACC,QAAS,OAAQC,UAAW,UAAW,SAClDC,KAAKC,UAAUhB,gBAQjC,C,4QClCaiB,EAA+B,SAACC,GAC3C,IAAIC,EAAkB,GAChBC,EAAuB,OAATF,QAAS,IAATA,GAAAA,EAAWG,YAAeC,IAAgB,OAATJ,QAAS,IAATA,OAAS,EAATA,EAAWG,aAAaE,UAAc,GAY3F,OATEJ,EADW,OAATD,QAAS,IAATA,GAAAA,EAAWM,kBACH,wBAEA,mBAGC,OAATN,QAAS,IAATA,GAAAA,EAAWG,cACbF,EAAUA,EAAU,MAAQD,EAAUM,kBAAoB,aAAe,gBAAkBJ,GAGtFD,CACT,E,0CCAA,EAXoB,SAAH,GAA4E,IAAD,IAArEM,KAAAA,OAAI,IAAC,IAAC,MAAEF,QAAAA,OAAO,IAAC,GAAI,MAAEG,OAAAA,OAAM,IAAC,mBAAgB,EAElE,OACE,SAACC,EAAA,EAAO,CAACC,MAAQH,EAAOH,IAAOG,GAAMC,OAAOA,GAAU,gBAAiB,UACrE,SAACG,EAAA,EAAU,CAAClB,UAAU,OAAOE,QAAQ,OAAOP,WAAW,SAASD,eAAe,SAAQ,SACpFoB,GAAQ,SAAC,IAAM,CAACA,KAAOA,EAAOF,QAAUA,EAAUG,OAASH,OAAUO,EAAWJ,EAASK,SAAW,OAAe,yCAI5H,E,kICFaC,GAAsBC,EAAAA,EAAAA,kBACjC,gEAA+D,yCAC/D,WAAOC,EAA+CC,GAAQ,gFAa3D,OAXGC,EAAUC,IAAOC,EAAAA,GAAmB,8BAA6B,UAAiB,OAAXJ,QAAW,IAAXA,OAAW,EAAXA,EAAaK,aAElFC,GAAOC,EAAAA,EAAAA,GAAUL,EAAS,CAC9BM,OAAQP,EAASO,SAChBC,MACDC,EAAAA,EAAAA,IAAU,SAACC,GACT,GAAIA,EAAIC,GACN,OAAOD,EAAIE,OAEb,MAAM,IAAIC,MAAM,cAAgBH,EAAII,OACtC,KACA,EAAD,QAEkBC,EAAAA,EAAAA,GAAcV,GAAM,KAAD,EAA5B,OAAJW,EAAI,yBACHA,GAAI,2CACZ,qDAlB8D,IAyBpDC,GAA6BnB,EAAAA,EAAAA,kBACxC,mDAAkD,yCAClD,WAAOC,EAAgCC,GAAQ,8EAU3C,OATIkB,GAAG,kBACJnB,EAAYmB,KAAG,IAClBhC,aAAa,IAAIiC,MAAOC,UACxB/B,kBAAmBU,EAAYsB,YAE3BhB,EAAOiB,EAAAA,EAAAA,IAAyBvB,EAAYwB,IAAKL,GAAKV,MAC1DgB,EAAAA,EAAAA,IAAI,SAACd,GACH,OAAOA,EAAIe,QACb,KACD,mBACMV,EAAAA,EAAAA,GAAcV,IAAK,2CAC3B,qDAbiD,GAclD,CACEqB,UAAW,SAACC,EAAkB3B,GAE5B,OAAO,CACT,IAsCS4B,IA7BsB9B,EAAAA,EAAAA,kBACjC,iDAAgD,yCAChD,WAAOC,EAAgCC,GAAQ,gFAU5C,OATKkB,GAAG,kBACJnB,EAAYmB,KAAG,IAClBhC,aAAa,IAAIiC,MAAOC,UACxB/B,kBAAmBU,EAAYsB,YAE3BhB,EAAOiB,EAAAA,EAAAA,IAAyBvB,EAAYwB,IAAKL,GAAKV,MAC1DgB,EAAAA,EAAAA,IAAI,SAACd,GACH,OAAOA,EAAIe,QACb,KACA,EAAD,QAEkCV,EAAAA,EAAAA,GAAcV,GAAM,KAAD,EACc,OAD9DwB,EAAoB,OAC1B7B,EAAS8B,SAASjC,EAAoB,CAACO,WAAY,CAAC2B,KAAM,UAAU,kBAC7DF,GAAoB,2CAC5B,qDAhB+C,GAiBhD,CACEH,UAAW,SAACC,EAAkB3B,GAC5B,OAAO,CACT,KAQsCF,EAAAA,EAAAA,kBACxC,oDAAmD,yCACnD,WAAOC,EAAgCC,GAAQ,8EAU3C,OATIkB,GAAG,kBACJnB,EAAYmB,KAAG,IAClBhC,aAAa,IAAIiC,MAAOC,UACxB/B,kBAAmBU,EAAYsB,YAE3BhB,EAAOiB,EAAAA,EAAAA,KAA+BvB,EAAYwB,IAAKL,GAAKV,MAChEgB,EAAAA,EAAAA,IAAI,SAACd,GACH,OAAOA,EAAIe,QACb,KACD,mBACMV,EAAAA,EAAAA,GAAcV,IAAK,2CAC3B,qDAbkD,GAcnD,CACEqB,UAAW,SAACC,EAAkB3B,GAE5B,OAAO,CACT,KCrFW,SAASgC,EAAU,GAAoG,IAAlGC,EAAI,EAAJA,KAAMC,EAAY,EAAZA,aAAcC,EAAG,EAAHA,IAAKC,EAAM,EAANA,OAAQC,EAAmB,EAAnBA,oBAC7DP,GADkG,EAAhBQ,kBACvEC,EAAAA,EAAAA,MAsCjB,OACE,UAACC,EAAA,EAAI,CAACnE,GAAK,CAACK,QAAQ,OAClB+D,cAAc,SACdvE,eAAe,iBACfwE,UAAY,EAAG,WAEf,4BACE,SAACC,EAAA,EAAS,CACRnE,UAAU,MACVoE,IAAI,SACJC,OAAO,MACPC,MAAK,UAAMC,GAAsB,8BAAsBd,EAAKe,WAAU,QACtE3E,GAAK,CAAC4E,gBAAiB,OAAQC,UAAW,cAE5C,UAACC,EAAA,EAAW,YACV,UAACC,EAAA,EAAK,CAACpF,UAAY,CAACqF,GAAI,SAAUC,GAAI,OAASpF,eAAiB,CAACoF,GAAG,gBAAiBD,GAAG,cACtFE,aAAe,CAACF,GAAG,OAAQC,GAAI,OAAQ,WACvC,SAAC5D,EAAA,EAAU,CAAC8D,cAAY,EAACpF,QAAQ,KAAKI,UAAYiF,EAAAA,GAAOC,GAAE,YAAQvB,GAAQ9D,GAAK,CAC9EE,WAAW,OAAQ,SACjB0D,EAAKxC,SAET,UAACC,EAAA,EAAU,CAACtB,QAAQ,KAAKuF,MAAM,iBAAiBtF,GAAK,CAACE,WAAY,OAAQ,gBACnE0D,EAAKe,kBAId,UAACI,EAAA,EAAK,CAACnF,QAAU,EAAG,WAClB,UAACmF,EAAA,EAAK,CAACpF,UAAU,MAAMC,QAAU,GAAK,WACpC,SAACyB,EAAA,EAAU,CAACtB,QAAQ,QAAQuF,MAAM,iBAAgB,wBAGlD,SAACjE,EAAA,EAAU,CAACtB,QAAQ,QAAQuF,MAAM,iBAAgB,UAChD,SAAC,EAAW,CAACrE,KAAO2C,EAAK2B,aAAerE,OAAO,sBAInD,UAACG,EAAA,EAAU,CAACtB,QAAQ,QAAQuF,MAAM,iBAAgB,0BACjC1B,EAAK4B,aAEtB,UAACnE,EAAA,EAAU,CAACtB,QAAQ,QAAQuF,MAAM,iBAAgB,0BACjC1B,EAAK6B,aAEtB,SAACpE,EAAA,EAAU,CAACtB,QAAQ,QAAQuF,MAAM,eAAc,SAC5C1B,EAAK8B,0BAOf,UAACC,EAAA,EAAW,CAAC3F,GAAK,CAACK,QAAS,OAAQR,eAAgB,iBAAkB,WACpE,0BACE,SAAC+F,EAAA,EAAM,CAACC,KAAK,QAAQ1F,UAAYiF,EAAAA,GAAOC,GAAE,YAAQvB,GAAO,yBAI3D,0BACE,SAACgC,EAAA,EAAU,CACT,aAAW,WACXC,QA/FoB,WAAO,IAAD,IAiB9BC,EAhBSC,EAAYrC,EAAjBV,IACFgD,EAAUD,EAAQE,MAAM,KAAMF,EAAQE,MAAM,KAAKC,OAAS,GAC1DxE,EAAkBC,IACtBC,EAAAA,GAAkB,uBAAD,OACmB,QAAb,EAAA8B,EAAKyC,gBAAQ,OAAb,EAAeC,OAAU,KAAiB,QAAd,EAAC1C,EAAKyC,gBAAQ,aAAb,EAAeC,QAAS,GAAE,SAC9E,CAAE5C,KAAMK,IAGJsC,EAA2B,CAC/BJ,QAAAA,EACAC,OAAAA,EACArF,aAAa,IAAIiC,MAAOC,UACxBwD,UAAW3C,EAAKe,WAChB3D,mBAAmB,GAIjB4C,EAAKyC,UACPA,EAASrF,mBAAqB4C,EAAKyC,SAASrF,kBAC5CqF,EAASC,OAAS1C,EAAKyC,SAASC,OAChCN,EAAUvC,EAASb,EAA2B,CAC5CC,IAAKwD,EACLnD,IAAKtB,EACLoB,WAAYY,EAAKyC,SAASrF,sBAG5BgF,EAAUvC,EAASF,EAA2B,CAC5CV,IAAKwD,EACLnD,IAAKtB,EACLoB,WAAW,KAGfgD,EAAQQ,MAAK,SAACC,GAAC,OAAKhD,EAASjC,EAAoB,CAACO,WAAY,CAAC2B,KAAM,SAAS,GAChF,EA8DUtC,MAAQX,EAA6BoD,GACrC6C,WAAc1C,EAAsB,SACjCA,GAAuB,SAAC2C,EAAA,EAAmB,KAAM,SAAC,IAAO,CAACrB,MAAoB,OAAZzB,QAAY,IAAZA,GAAAA,EAAc7C,kBAAoB,QAAU,sBAM7H,C,IC7IY4F,E,uBAGX,SAHWA,GAAAA,EAAoB,cAApBA,EAAoB,YAG/B,CAHWA,IAAAA,EAAoB,K,sJCyB1BC,GAAc,QA2HpB,GAxHe,WACb,IAAMpD,GAAWS,EAAAA,EAAAA,KACjB,GAAwC4C,EAAAA,EAAAA,MAAiB,eAAlDC,EAAY,KACbC,GAD8B,KACND,EAAaE,IAAI,yBACvCC,GAAaC,EAAAA,EAAAA,KAAbD,SACFE,GAAWC,EAAAA,EAAAA,MAEjB,GAAsDC,EAAAA,EAAAA,UAAwBN,GAAsB,eACpG,GAD0B,KAAwB,MAC8BO,EAAAA,GAAAA,OAAlEC,EAAS,EAAfC,KAA4BC,EAAY,EAAvBC,UAAqCC,EAAa,EAAzBC,WAClD,GAAqHC,EAAAA,EAAAA,SAAmBxG,EAAW,CACjJyG,iBAAkB,SAACN,GAAU,IAAD,EAC1B,OAAO,kBACFA,GAAI,IACPO,aAAuB,QAAX,EAAEP,EAAKA,YAAI,aAAT,EAAWtE,KAAI,SAACS,GAC5B,IAAMf,EAAe,OAAT2E,QAAS,IAATA,OAAS,EAATA,EAAWS,MAAK,SAACpF,GAC3B,OAAOA,EAAI0D,YAAc3C,EAAKsE,WAAWvD,UAC3C,IACA,OAAO,kBACFf,GAAI,IACPyC,SAAUxD,GAEd,IAAGsF,MAAK,SAACC,EAAGC,GACV,OAAOD,EAAEF,WAAWvD,WAAa0D,EAAEH,WAAWvD,WAAa,GAAK,CAClE,KAEJ,IAhBYqD,GAAF,EAAJP,KAAkB,EAAZO,cAAcL,EAAS,EAATA,UAAWE,EAAU,EAAVA,WAAYS,EAAkB,EAAlBA,mBAAoBC,EAAgB,EAAhBA,iBAA2BC,GAAF,EAAPC,QAAgB,EAAPD,SAASE,EAAK,EAALA,MAmBrGC,GAAuC,OAAlBL,QAAkB,IAAlBA,EAAAA,EAAsB,IAAsB,OAAhBC,QAAgB,IAAhBA,EAAAA,EAAoB,GAsB3E,OAAIZ,GACF,SAAC5C,EAAA,EAAK,CAACpF,UAAU,SAASD,MAAM,OAAOG,eAAe,SAASC,WAAW,SAAS0E,OAAO,QAAO,UAC/F,SAACoE,EAAA,EAAW,CAACC,QAAUhC,OAIvB2B,GACK,SAAClJ,EAAA,EAAS,CAACC,OAAUmJ,EAAcjG,OAASjD,MAASkJ,EAAcA,QAGvEV,GAKH,UAACjD,EAAA,EAAK,CAACpF,UAAU,SAASD,MAAM,OAAM,WACpC,SAAC,IAAU,CAACoJ,aAAe,CACzBC,SAAU,SACV/I,GAAI,CAACgJ,IAAK9B,EAAW,OAAO,SAC3B,UACD,UAAC,IAAI,CAAC+B,WAAS,EAACC,GAAK,GAAI,WACvB,SAAC,IAAI,CAACA,GAAK,EAAG,UACZ,SAACnE,EAAA,EAAK,CAACpF,UAAU,MAAME,eAAe,QAAQC,WAAW,SAASJ,MAAM,OAAM,UAC5E,SAACyJ,EAAA,EAAkB,CAACC,OAASvC,GAAcwC,eAnCzB,SAACC,GAC7BlC,EAAS,KAAD,OAAe,OAATkC,QAAS,IAATA,OAAS,EAATA,EAAWxF,KAC3B,SAoCQ,SAAC,IAAI,CAACoF,GAAK,EAAIK,SAAS,OAAOlJ,QAAQ,OAAM,UAC3C,UAAC0E,EAAA,EAAK,CAACpF,UAAU,MAAME,eAAe,MAAMC,WAAW,SAASJ,MAAM,OAAOE,QAAU,EAAI,kBAAgB,oBAAmB,UAC1HiI,IAAc,SAAC2B,EAAA,EAAgB,CAAC3D,KAAO,MACtCgC,IAAc,UAACxG,EAAA,EAAU,CAACoI,SAAW,GAAKtJ,UAAU,MAAK,2BAC7C,SAACuJ,GAAA,EAAY,CAACC,YAAgC,OAAlBrB,QAAkB,IAAlBA,EAAAA,EAAsB,IAAO,YAAO,SAACsB,GAAA,EAAe,CAACC,gBAAkBlB,QAElH,SAAC/C,EAAA,EAAM,CAAC7F,QAAQ,WAAW+J,WAAY,SAACC,EAAA,EAAe,IAAMhE,QApC1C,WAC7BtC,EAASuG,GAAAA,GAAAA,KAAAA,eAAyC,CAAC,CAACC,KAAM,eAC5D,EAkC2G,gCAG/F,SAACrE,EAAA,EAAM,CAAC7F,QAAQ,WAAW+J,WAAY,SAACC,EAAA,EAAe,IAAMhE,QA3C9C,WACzBtC,EAASyG,EAAAA,GAAAA,KAAAA,eAAqC,CAAC,CAACD,KAAM,WACxD,EAyCuG,sCAOnG,SAACE,EAAA,EAAG,CAACC,GAAK,EAAIC,GAAKnD,EAAW,EAAI,EAAG,UACnC,SAACoD,EAAA,EAAgB,CAACzE,KAAO,MAAO,SAChB,OAAZmC,QAAY,IAAZA,OAAY,EAAZA,EAAc7E,KAAI,SAACS,GACnB,OACE,SAAC,IAAI,CAAoCsF,GAAK,GAAKqB,GAAK,EAAIC,SAAW,EAAIC,GAAK,EAAG,UACjF,SAAC9G,EAAS,CACRI,OAtGH,MAuGGH,KAAOA,EAAKsE,WACZrE,aAAiBD,EAAKyC,SACtBvC,IAAMF,EAAKE,IACXE,oBAAsB0D,EACtBzD,iBAAmB2D,KAPXhE,EAAKsE,WAAWvD,WAUhC,SAGJ,SAAC,KAAQ,CAAC+F,GAAG,oBAAoBC,MAAM,SAASC,OAAS,GAAI,UAC3D,SAAC7F,EAAA,EAAK,CAACpF,UAAU,SAASE,eAAe,SAASC,WAAW,SAAQ,UACnE,UAACqK,EAAA,EAAG,6BACY,SAACT,GAAA,EAAY,CAACC,YAAcrB,IAAuB,OAAG,SAACuC,GAAA,EAAS,CAAClB,YAAcrB,IAAuB,qBAnDrH,uBAyDX,C,yKCxDA,SAASwC,EAAsB,GAA4E,IAA3EC,EAAM,EAANA,OAAQ3B,EAAM,EAANA,OACtC,OACE,SAAC,KAAS,kBAAM2B,GAAM,IAAGC,MAAK,iBAAa5B,GAAWrJ,QAAQ,aAElE,CANA,IA1EA,SAA4B,GAAsD,IAApDqJ,EAAM,EAANA,OAAQC,EAAc,EAAdA,eAGpC,GAA8B/B,EAAAA,EAAAA,UAAwD,IAAG,eAAlF2D,EAAO,KAAEC,EAAU,KAE1B,GAA0B5D,EAAAA,EAAAA,UAAoD,MAAK,eAA5E6D,EAAK,KAAEC,EAAQ,KAEtB,GAAoC9D,EAAAA,EAAAA,UAAwB,MAAK,eAA1D+D,EAAU,KAAEC,EAAa,KAC1BC,GAAsBC,EAAAA,EAAAA,GAA2BH,EAAY,KAEnE,GAAsDI,EAAAA,EAAAA,IAAsBF,EAAsB,CAChGnC,OAAAA,EACAsC,KAAMH,GACJI,EAAAA,WAHIlE,EAAI,EAAJA,KAAMI,EAAU,EAAVA,WAkCd,OAlC+B,EAALa,MAAc,EAAPF,QAAgB,EAAPC,SAK1CmD,EAAAA,EAAAA,YAAU,WACRV,EAAe,OAAJzD,QAAI,IAAJA,EAAAA,EAAQ,GACrB,GAAG,CAACA,KAEJoE,EAAAA,EAAAA,IAAgB,WAChB,GAAG,CAACN,KAyBF,UAAC,IAAK,CAAC5L,UAAU,MAAME,eAAe,QAAQC,WAAW,SAASJ,MAAM,OAAM,WAC5E,SAAC,IAAY,CACXoM,eAAa,EACbpB,GAAG,6BACHO,QAAUA,EACVc,WAAS,EACTC,eAAa,EACbC,cAAY,EACZC,cAAgB,SAAC9D,GAAC,OAAKA,CAAC,EACxB+C,MAAQA,EACRgB,eAAiB,SAACC,GAAY,IAAD,EAC3B,OAA6B,QAA7B,EAAOA,EAAOlE,WAAWwD,YAAI,QAAIU,EAAOlE,WAAW9G,KACrD,EACAiL,cAAa,qBAAmBjD,GAChCkD,QAAWzE,EACX0E,YAAc,SAACxB,GAAqC,OAAK,SAACD,EAAqB,CAACC,OAASA,EAAS3B,OAASA,GAAW,EACtHoD,SAAW,SAACC,EAAYC,GAnCN,IAACC,EACvBzB,GADuByB,EAoCDD,GAnCA,CAACC,GAAY1B,GACnCG,EAASuB,GACTtD,EAAesD,EAkCX,EACAC,cAAgB,SAACH,EAAOI,GAAa,OA3Bd,SAACJ,EAAYtB,GACxCG,EAAcH,EAChB,CAyBgD2B,CAAqBL,EAAOI,EAAc,EACpFE,qBAAyB,SAACX,EAA4CjB,GAAgD,OAAOiB,EAAOtI,MAAQqH,EAAMrH,GAAK,KAEzJ,SAAC,IAAG,CAACkJ,GAAK,EAAG,SACTnF,IAAc,SAAC,IAAc,CAAChC,KAAO,SAI/C,C,kDCvEA,IARA,SAAsB,GAAqC,IAAnC8D,EAAW,EAAXA,YACtB,OACE,mCACqBrI,IAAhBqI,IAA8BzI,EAAAA,EAAAA,GAAOyI,EAAa,iBAG3D,C,kDCCA,IARA,SAAmB,GAAqC,IAAnCA,EAAW,EAAXA,YACnB,OACE,mCACqBrI,IAAhBqI,IAA8BsD,EAAAA,EAAAA,GAAoBtD,EAAa,CAAEuD,gBAAgB,KAG1F,C,kDCGA,IARA,SAAyB,GAA4C,IAA1CrD,EAAe,EAAfA,gBACzB,OACE,8BACKA,EAAkB,KAASsD,EAAAA,EAAAA,GAAe,EAAGtD,EAAiB,CAAEqD,gBAAiB,IAAYrD,EAAkB,OAGxH,C,kDCSA,IAdA,SAA0B,GAAgD,IAAD,IAA7ChE,KAAAA,OAAI,MAAG,MAAK,EAAEuH,EAAQ,EAARA,SAExC,OAIE,SAAC,IAAI,CAACnE,WAAS,EAACrJ,QAAU,EAAIsJ,GAAK,GAAKK,SAAW,EACjDgB,GAAY,SAAP1E,EAAgB,GAAe,QAATA,EAAiB,EAAK,EACjD2E,SAAkB,SAAP3E,EAAgB,EAAc,QAATA,EAAiB,IAAO,EAAK,SAC3DuH,GAGR,C,kHCde,SAASC,EAAe,GAA0G,IAAD,IAAvGxH,KAAAA,OAAI,IAAC,KAAE,MAAEP,MAAAA,OAAK,IAAC,aAAU,EAAEgI,EAAU,EAAVA,WAClE,OACE,SAAC,IAAK,CAACtN,IAAE,QAAKsF,MAAOA,GAAUgI,GAAe1N,QAAU,EAAID,UAAU,MAAK,UACzE,SAAC,IAAgB,CAAC2F,MAAM,UAAUO,KAAOA,KAG/C,C,kHCFe,SAAS0H,EAAW,GAA2C,IAAzCzE,EAAY,EAAZA,aAAcsE,EAAQ,EAARA,SAEjD,OACE,SAAC,KAAM,gBAAC/I,UAAY,GAASyE,GAAY,cACvC,SAAC,IAAO,CACN/I,QAAQ,UACRC,GAAK,CAACwN,QAAS,SAACC,GAAK,MAA4B,UAAvBA,EAAMC,QAAQC,KAAmBC,EAAAA,EAAAA,KAAY,IAAI,EACzEtI,MAAO,SAACmI,GAAK,MAA4B,UAAvBA,EAAMC,QAAQC,KAAmB,OAAS,IAAI,EAChEE,GAAI,GACH,SACDT,MAIV,C,kFCtBa5B,EAAc,SAAIL,EAAU2C,GAEvC,OAA4CxG,EAAAA,EAAAA,UAAS6D,GAAM,eAApD4C,EAAc,KAAEC,EAAiB,KAgBxC,OAfApC,EAAAA,EAAAA,YACE,WAEE,IAAMqC,EAAUC,YAAW,WACzBF,EAAkB7C,EACpB,GAAG2C,GAIH,OAAO,WACLK,aAAaF,EACf,CACF,GACA,CAAC9C,EAAO2C,IAEHC,CACT,C,kDCYA,IAzBsB,WAEpB,IAAMN,GAAQW,EAAAA,EAAAA,KAad,MAAO,CACLlH,UAZyBmH,EAAAA,EAAAA,GAAcZ,EAAMa,YAAYC,KAAK,OAa9DC,OAXmBH,EAAAA,EAAAA,GAAcZ,EAAMa,YAAYG,QAAQ,KAAM,OAYjEC,MAVkBL,EAAAA,EAAAA,GAAcZ,EAAMa,YAAYG,QAAQ,KAAM,OAWhEE,MATeN,EAAAA,EAAAA,GAAcZ,EAAMa,YAAYG,QAAQ,KAAM,OAU7DG,WARoBP,EAAAA,EAAAA,GAAcZ,EAAMa,YAAYO,GAAG,OAW3D,C,qEC9BA,GAAgB,YAAc,iCAAiC,YAAc,iCAAiC,cAAgB,mCAAmC,oBAAoB,uCAAuC,aAAa,gCAAgC,YAAc,iCAAiC,eAAe,mC,sBCSxT,SAASjG,EAAYkG,GAGlC,OACE,iBAAKC,UAAS,UAAMC,EAAAA,YAAmB,UAAU,WAC/C,0BACE,gBAAKD,UAAYC,EAAAA,YAAqB,UACpC,gBAAKC,IAAMC,EACTH,UAAS,UAAMC,EAAAA,QAAe,mBAAoBzK,IAAI,cAI5D,gBAAKwK,UAAYC,EAAAA,cAAuB,UACtC,iBAAKD,UAAYC,EAAAA,YAAqB,WAAC,oBAAW,oBAAW,yBAE/D,iBAAKD,UAAYC,EAAAA,QAAiB,qBACvBF,EAAMjG,QAAO,YAI9B,C,8FCzBa3E,EAAoCiL,EAAAA,YAEpCC,EAAkDC,EAAAA,W","sources":["404/ErrorPage.tsx","core/utils/films.utils.tsx","shared/components/date/DateDisplay.tsx","core/store/favorites/favorites.thunks.ts","core/movies/movies/MovieCard.tsx","shared/models/general.model.ts","core/movies/movies/Movies.tsx","core/shared/search/SearchAutoComplete.tsx","shared/components/date/DateDisplay2.tsx","shared/components/date/DateToNow.tsx","shared/components/date/DurationDisplay.tsx","shared/components/layouts/LayoutWithGutter.tsx","shared/components/progress/CircleProgress.tsx","shared/components/toolbar/Toolbar.tsx","shared/hooks/useDebounce.ts","shared/hooks/useIsMobile.ts","webpack://starwars/./src/shared/loading/full-logo/LoadingLogo.module.scss?618b","shared/loading/full-logo/LoadingLogo.tsx","store/appHook.ts"],"sourcesContent":["import { Box, Stack, Typography } from \"@mui/material\";\n\nexport interface ErrorPageProp {\n  reason?: string;\n  debug?: any;\n}\n\nexport default function ErrorPage({ reason, debug }: ErrorPageProp) {\n\n  return (\n    <Box marginY={ 5 } width=\"100%\">\n      <Stack direction=\"column\" spacing={ 5 } justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"h5\" sx={ {textTransform:'uppercase'} }>\n          An error has occurred!\n        </Typography>\n\n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            REASON\n          </Typography>\n          <Typography variant=\"body2\">\n            { reason }\n          </Typography>\n        </Stack>\n        \n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            DEBUG\n          </Typography>\n          <Typography variant=\"body2\" component=\"div\">\n            <pre>\n              <code style={ {display: 'flex', textAlign: 'center'} }>\n                { JSON.stringify(debug) }\n              </code>\n            </pre>\n          </Typography>\n        </Stack>\n      </Stack>\n    </Box>\n  );\n};","import { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport moment from 'moment';\nimport produce from 'immer';\nimport { Dictionary } from \"@reduxjs/toolkit\";\n\n\nexport const getFilmFavoriteToggleTooltip = (favorited?: FavoriteToSave) => {\n  let tooltip: string = '';\n  const dateFromNow = favorited?.lastUpdated ? (moment(favorited?.lastUpdated).fromNow()) : ('');\n\n  if (favorited?.isCurrentFavorite) {\n    tooltip = 'Remove from favorites';\n  } else {\n    tooltip = 'Add to favorites';\n  }\n\n  if (favorited?.lastUpdated) {\n    tooltip = tooltip + '. ' + (favorited.isCurrentFavorite ? 'Favorited ' : 'Unfavorited ') + dateFromNow;\n  }\n\n  return tooltip;\n};\n\nexport const getSortedFilmsWithFavorited = (allFilms: ResultProperty<StarwarsFilm>[] | undefined, favorited: Dictionary<FavoriteToSave>): ResultProperty<StarwarsFilm>[] => {\n  const result = produce((allFilms ?? []), (draft: ResultProperty<StarwarsFilm>[]) => {\n    draft.sort((prev: ResultProperty<StarwarsFilm>, next: ResultProperty<StarwarsFilm>) => {\n      return prev.properties.episode_id > next.properties.episode_id ? 1 : -1;\n    });\n    draft.forEach((res: ResultProperty<StarwarsFilm>) => {\n      res.properties.favorite = favorited[res.properties.episode_id];\n    });\n  });\n\n  return result;\n};","import { Box, Tooltip, Typography } from '@mui/material';\nimport Moment from 'react-moment';\nimport moment from 'moment';\n\nexport interface DateDisplayProp {\n  date: string | number;\n  fromNow?: boolean;\n  format?: string;\n}\n\nconst DateDisplay = ({ date=0, fromNow=true, format=\"MM/DD/YY HH:mm\" }: DateDisplayProp) => {\n\n  return (\n    <Tooltip title={ date ? moment(date).format(format) : 'No date found' }>\n      <Typography component=\"span\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        {date ? (<Moment date={ date } fromNow={ fromNow } format={ fromNow ? undefined: format } interval={ 60000 } />) : (<>N/A</>)}\n      </Typography>\n    </Tooltip>\n  );\n};\n\nexport default DateDisplay;","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { lastValueFrom, map, switchMap } from \"rxjs\";\nimport { ajax, AjaxResponse } from \"rxjs/ajax\";\nimport { BASE_FIREBASE_URL } from \"src/shared/api/endpoints\";\nimport { HttpParams, HttpParamsWithSearch } from \"src/shared/models/http.model\";\nimport { FavoriteMoviesObjList, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport urlcat from \"urlcat\";\nimport { fromFetch } from 'rxjs/fetch';\nimport { ToggleFavoriteArg } from \"./favorites.state\";\nimport { FirebasePostPayload } from \"src/shared/models/firebase.model\";\n\n/** ASYNC THUNKS */\n\n/**\n * Thunk - Fetch favorite films with params\n * Behavior: Merge\n */\nexport const fetchFavoritesThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Switch] Get all favorites with params',\n  async (thunkParams: HttpParamsWithSearch | undefined, thunkAPI) => {\n\n    let restUrl = urlcat(BASE_FIREBASE_URL, '/swdb/:user/favorites.json', { ...thunkParams?.httpParams });\n    \n    const obs$ = fromFetch(restUrl, {\n      signal: thunkAPI.signal,\n    }).pipe(\n      switchMap((res: Response) => {\n        if (res.ok) {\n          return res.json() as Promise<FavoriteMoviesObjList>;\n        }\n        throw new Error('API Error: ' + res.status);\n      })\n    );\n\n    const favs = await lastValueFrom(obs$);\n    return favs;\n  },\n);\n\n/**\n * Thunk - Toggle favorite status\n * Behavior: exhaust\n */\nexport const toggleFavoriteExhaustThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Exhaust] Toggle favorite',\n  async (thunkParams: ToggleFavoriteArg, thunkAPI) => {\n    const fav = {\n      ...thunkParams.fav,\n      lastUpdated: new Date().getTime(),\n      isCurrentFavorite: thunkParams.favStatus,\n    };\n    const obs$ = ajax.put<FavoriteToSave>(thunkParams.url, fav).pipe(\n      map((res: AjaxResponse<FavoriteToSave>) => {\n        return res.response;\n      })\n    );\n    return lastValueFrom(obs$);\n  },\n  {\n    condition: (args: HttpParams, thunkAPI) => {\n      const isLoading = true; // check if it is loading\n      return !isLoading;\n    },\n  }\n);\n\n/**\n * Thunk - Toggle favorite status\n * Chain - GET favorites\n * Behavior: Merge\n */\nexport const toggleFavoriteThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Merge] Toggle favorite',\n  async (thunkParams: ToggleFavoriteArg, thunkAPI) => {\n    const fav = {\n      ...thunkParams.fav,\n      lastUpdated: new Date().getTime(),\n      isCurrentFavorite: thunkParams.favStatus,\n    };\n    const obs$ = ajax.put<FavoriteToSave>(thunkParams.url, fav).pipe(\n      map((res: AjaxResponse<FavoriteToSave>) => {\n        return res.response;\n      })\n    );\n\n    const toggleFavoriteResult = await lastValueFrom(obs$);\n    thunkAPI.dispatch(fetchFavoritesThunk({httpParams: {user: 'yqu'}}));\n    return toggleFavoriteResult;\n  },\n  {\n    condition: (args: HttpParams, thunkAPI) => {\n      return true;\n    },\n  }\n);\n\n/**\n * Thunk - Add a new favorite film\n * Behavior: exhaust\n */\nexport const addNewFavoriteExhaustThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Exhaust] Add new favorite',\n  async (thunkParams: ToggleFavoriteArg, thunkAPI) => {\n    const fav = {\n      ...thunkParams.fav,\n      lastUpdated: new Date().getTime(),\n      isCurrentFavorite: thunkParams.favStatus,\n    };\n    const obs$ = ajax.post<FirebasePostPayload>(thunkParams.url, fav).pipe(\n      map((res: AjaxResponse<FirebasePostPayload>) => {\n        return res.response;\n      })\n    );\n    return lastValueFrom(obs$);\n  },\n  {\n    condition: (args: HttpParams, thunkAPI) => {\n      const isLoading = true; // check if it is loading\n      return !isLoading;\n    },\n  }\n);\n\n\nexport const removeFalseyValueFromObject = (obj?: HttpParams): HttpParams | undefined  => {\n  if (obj) {\n    const copy = {...obj};\n    const keysOfParams = Object.keys(copy);\n    keysOfParams.forEach((key) => {\n      if (!copy[key]) {\n        delete copy[key];\n      }\n    });\n    return copy;\n  }\n  return obj;\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Link } from \"react-router-dom\";\nimport FavIcon from '@mui/icons-material/Favorite';\nimport HourglassBottomIcon from '@mui/icons-material/HourglassBottom';\nimport IconButton from '@mui/material/IconButton';\nimport { useEffect, useState } from 'react';\nimport { Box, Stack } from \"@mui/material\";\nimport { getFilmFavoriteToggleTooltip } from \"src/core/utils/films.utils\";\nimport DateDisplay from \"src/shared/components/date/DateDisplay\";\nimport { StarwarsFilm, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { BASE_FIREBASE_URL } from \"src/shared/api/endpoints\";\nimport { axiosPost, axiosPut } from 'src/shared/rest/axios';\nimport urlcat from \"urlcat\";\nimport { AxiosResponse } from \"axios\";\nimport { useAppDispatch } from 'src/store/appHook';\nimport { addNewFavoriteExhaustThunk, fetchFavoritesThunk, toggleFavoriteExhaustThunk } from 'src/core/store/favorites/favorites.thunks';\nimport { FulfilledAction } from 'src/shared/models/redux.model';\nimport { ToggleFavoriteArg } from 'src/core/store/favorites/favorites.state';\n\nexport interface StarwarsFilmCardProps {\n  film: StarwarsFilm;\n  favoriteData?: FavoriteToSave;\n  uid: string;\n  userId: string;\n  allFavoritesLoading?: boolean;\n  favToggleLoading?: boolean;\n}\n\nexport default function MovieCard({ film, favoriteData, uid, userId, allFavoritesLoading, favToggleLoading }: StarwarsFilmCardProps) {\n  const dispatch = useAppDispatch();\n\n  const favoriteToggleHandler = () => {\n    const { url: filmUrl } = film;\n    const filmId = (filmUrl.split(\"/\"))[filmUrl.split(\"/\").length - 1];\n    const restUrl: string = urlcat(\n      BASE_FIREBASE_URL, \n      `swdb/:user/favorites${film.favorite?.fireId ? ('/'+film.favorite?.fireId) :''}.json`, \n      { user: userId }\n    );\n\n    const favorite: FavoriteToSave = {\n      filmUrl,\n      filmId,\n      lastUpdated: new Date().getTime(),\n      episodeId: film.episode_id,\n      isCurrentFavorite: true,\n    };\n\n    let promise;\n    if (film.favorite) {\n      favorite.isCurrentFavorite = !film.favorite.isCurrentFavorite;\n      favorite.fireId = film.favorite.fireId;\n      promise = dispatch(toggleFavoriteExhaustThunk({\n        fav: favorite,\n        url: restUrl,\n        favStatus: !film.favorite.isCurrentFavorite\n      }));\n    } else {\n      promise = dispatch(addNewFavoriteExhaustThunk({\n        fav: favorite,\n        url: restUrl,\n        favStatus: true\n      }));\n    }\n    promise.then((_) => dispatch(fetchFavoritesThunk({httpParams: {user: 'yqu'}})));\n  };\n\n  return (\n    <Card sx={ {display:'flex',\n      flexDirection:'column', \n      justifyContent:'space-between'} } \n      elevation={ 2 }\n    >\n      <div>\n        <CardMedia\n          component=\"img\"\n          alt=\"poster\"\n          height=\"440\"\n          image={ `${process.env.PUBLIC_URL}/assets/poster-img/${film.episode_id}.png` }\n          sx={ {backgroundColor: '#000', objectFit: 'contain'} }\n        />\n        <CardContent>\n          <Stack direction={ {lg: 'column', xl: 'row'} } justifyContent={ {xl:'space-between', lg:'flex-start'} }\n            marginBottom={ {lg:'10px', xl: '0px'} }>\n            <Typography gutterBottom variant=\"h5\" component={ Link } to={ `./${uid}` } sx={ {\n              fontWeight:'500'} }>\n              { film.title }\n            </Typography>\n            <Typography variant=\"h5\" color='text.secondary' sx={ {fontWeight: '300'} }>\n              EP { film.episode_id }\n            </Typography>\n          </Stack>\n          \n          <Stack spacing={ 1 }>\n            <Stack direction=\"row\" spacing={ 0.5 }>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                Released:\n              </Typography>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                <DateDisplay date={ film.release_date } format=\"MMM Do YYYY\" />\n              </Typography>\n            </Stack>\n            \n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Directed by: { film.director }\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Produced by: { film.producer }\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.primary\">\n              { film.opening_crawl }\n            </Typography>\n          </Stack>\n          \n        </CardContent>\n      </div>\n      \n      <CardActions sx={ {display: 'flex', justifyContent: 'space-between'} }>\n        <div>\n          <Button size=\"small\" component={ Link } to={ `./${uid}` }>\n            See More\n          </Button>\n        </div>\n        <div>\n          <IconButton \n            aria-label=\"favorite\" \n            onClick={ favoriteToggleHandler } \n            title={ getFilmFavoriteToggleTooltip(favoriteData) }\n            disabled={ !!(allFavoritesLoading) } >\n            { (allFavoritesLoading) ? <HourglassBottomIcon /> : <FavIcon color={ favoriteData?.isCurrentFavorite ? 'error' : 'disabled' } />}\n          </IconButton>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};","export enum DataBlockDisplayMode {\n  TABLE = \"table\",\n  CARD = \"card\"\n}","import React, { useContext } from \"react\";\nimport { Box, Button, IconButton, Stack, Tooltip, Typography } from \"@mui/material\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { useCallback, useMemo, useState, useEffect } from \"react\";\nimport { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport MovieCard from \"./MovieCard\";\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport { starwarsFilmsApi, useFetchFilmsQuery } from \"src/core/store/sw-films/swapi-films.api\";\nimport LoadingLogo from \"src/shared/loading/full-logo/LoadingLogo\";\nimport SearchAutoComplete from \"src/core/shared/search/SearchAutoComplete\";\nimport LayoutWithGutter from \"src/shared/components/layouts/LayoutWithGutter\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { RefreshOutlined } from \"@mui/icons-material\";\nimport DurationDisplay from \"src/shared/components/date/DurationDisplay\";\nimport DateToNow from \"src/shared/components/date/DateToNow\";\nimport DateDisplay2 from \"src/shared/components/date/DateDisplay2\";\nimport { Tooltip as Tooltip2 } from 'react-tooltip';\nimport { starwarsFavoritesApi, useFetchFavoritesQuery } from \"src/core/store/favorites/favorites.api\";\n\nconst userId = 'yqu';\nconst ENTITY_NAME = \"films\";\n\n\nconst Movies = () => {\n  const dispatch = useAppDispatch();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const currentDisplayModeUrl = searchParams.get(\"moviePageDisplayMode\");\n  const { isMobile } = useScreenSize();\n  const navigate = useNavigate();\n  \n  const [filmPageDisplayMode, setFilmPageDisplayMode] = useState<string | null>(currentDisplayModeUrl);\n  const { data: favorites, isLoading: isFavLoading, isFetching: isFavFetching } = useFetchFavoritesQuery();\n  const { data, dataWithFavs, isLoading, isFetching, fulfilledTimeStamp, startedTimeStamp, refetch, isError, error } = useFetchFilmsQuery(undefined, {\n    selectFromResult: (data) => {\n      return {\n        ...data,\n        dataWithFavs: data.data?.map((film) => {\n          const fav = favorites?.find((fav) => {\n            return fav.episodeId === film.properties.episode_id;\n          });\n          return {\n            ...film,\n            favorite: fav\n          };\n        }).sort((x, y) => {\n          return x.properties.episode_id > y.properties.episode_id ? 1 : -1;\n        })\n      };\n    }\n  });\n  \n  const fetchTimeDuration = (fulfilledTimeStamp ?? 0) - (startedTimeStamp ?? 0);\n  \n\n  const filmPageDisplayToggleHandler = () => {\n    const nextDisplayMode = {\n      moviePageDisplayMode: getNextDisplayState(filmPageDisplayMode)\n    };\n    setSearchParams(nextDisplayMode);\n  };\n\n  const onResultSelectHandler = (selection: ResultProperty<any> | null) => {\n    navigate(`./${selection?.uid}`);\n  };\n  \n  const handleRefreshFilms = () => {\n    dispatch(starwarsFilmsApi.util.invalidateTags([{type: \"Films\"}]));\n  };\n\n  const handleRefreshFavorites = () => {\n    dispatch(starwarsFavoritesApi.util.invalidateTags([{type: 'Favorites'}]));\n  };\n\n  if (isLoading) return (\n    <Stack direction=\"column\" width=\"100%\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n      <LoadingLogo message={ ENTITY_NAME } />\n    </Stack>\n  );\n\n  if (isError) {\n    return <ErrorPage reason={ (error as any).status } debug={ (error as any).error } />;\n  }\n\n  if (!dataWithFavs) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n        position: \"sticky\",\n        sx: {top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 }>\n          <Grid xs={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n              <SearchAutoComplete entity={ ENTITY_NAME } onResultSelect={ onResultSelectHandler } />\n            </Stack>\n          </Grid>\n          <Grid xs={ 8 } xsOffset=\"auto\" display=\"flex\">\n            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\" width=\"100%\" spacing={ 2 } data-tooltip-id=\"fetch-information\">\n              { isFetching && <CircularProgress size={ 20 } /> }\n              { !isFetching && <Typography fontSize={ 11 } component=\"div\">\n                Last fetched <DateDisplay2 dateInMilli={ fulfilledTimeStamp ?? 0 } />, took: <DurationDisplay durationInMilli={ fetchTimeDuration } />\n              </Typography> }\n              <Button variant=\"outlined\" startIcon={ <RefreshOutlined /> } onClick={ handleRefreshFavorites }>\n                Refresh Favorites\n              </Button>\n              <Button variant=\"outlined\" startIcon={ <RefreshOutlined /> } onClick={ handleRefreshFilms }>\n                Refresh Films\n              </Button>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n      <Box mt={ 2 } mx={ isMobile ? 2 : 0 }>\n        <LayoutWithGutter size={ 'med' }>\n          { dataWithFavs?.map((film) => {\n            return (\n              <Grid key={ film.properties.episode_id } xs={ 12 } sm={ 8 } smOffset={ 2 } mb={ 3 }>\n                <MovieCard \n                  userId={ userId }\n                  film={ film.properties }\n                  favoriteData = { film.favorite }\n                  uid={ film.uid }\n                  allFavoritesLoading={ isFavLoading }\n                  favToggleLoading={ isFavFetching } />\n              </Grid>\n            );\n          }) }\n        </LayoutWithGutter>\n      </Box>\n      <Tooltip2 id=\"fetch-information\" place=\"bottom\" offset={ 30 }>\n        <Stack direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <Box>\n            Last fetched: <DateDisplay2 dateInMilli={ fulfilledTimeStamp } /> ( <DateToNow dateInMilli={ fulfilledTimeStamp } /> ago ).\n          </Box>\n        </Stack>\n      </Tooltip2>\n    </Stack>\n  );\n};\n\nexport default Movies;\n\nconst getNextDisplayState = (current: any) => {\n  if (!current) {\n    return DataBlockDisplayMode.CARD;\n  }\n  return current === DataBlockDisplayMode.CARD ? DataBlockDisplayMode.TABLE : DataBlockDisplayMode.CARD;\n};\n","import { Autocomplete, AutocompleteRenderInputParams, InputAdornment, TextField, Stack, Box } from \"@mui/material\";\nimport { skipToken } from \"@reduxjs/toolkit/query/react\";\nimport { useEffect, useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport { useSearchContentQuery } from \"src/core/store/sw-entities-config/swapi\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { useDebounce } from \"src/shared/hooks/useDebounce\";\nimport { ResultProperty, StarwarsSearchable } from \"src/shared/models/starwars.model\";\n\nexport interface SearchAutoCompleteProps {\n  entity: string;\n  onResultSelect: (selection: ResultProperty<StarwarsSearchable> | null) => void;\n}\n\nfunction SearchAutoComplete({ entity, onResultSelect }: SearchAutoCompleteProps) {\n\n  // dropdown options\n  const [options, setOptions] = useState<readonly ResultProperty<StarwarsSearchable>[]>([]);\n  // dropdown selection\n  const [value, setValue] = useState<ResultProperty<StarwarsSearchable> | null>(null);\n  // user text input\n  const [inputValue, setInputValue] = useState<string | null>(null);\n  const debouncedInputValue = useDebounce<string | null>(inputValue, 600);\n\n  const { data, isFetching, error, isError, refetch } = useSearchContentQuery(debouncedInputValue ? {\n    entity,\n    name: debouncedInputValue\n  } : skipToken);\n  \n  useEffect(() => {\n    setOptions(data ?? []);\n  }, [data]);\n\n  useUpdateEffect(() => {\n  }, [debouncedInputValue]);\n\n  /**\n   * Drop down selection change\n   * @param selected selected from dropdown\n   */\n  const onChangeHandler = (selected: ResultProperty<StarwarsSearchable> | null) => {\n    setOptions(selected ? [selected] : options);\n    setValue(selected);\n    onResultSelect(selected);\n  };\n\n  /**\n   * Input text change\n   * @param event \n   * @param value user's input text\n   */\n  const onInputChangeHandler = (event: any, value: string) => {\n    setInputValue(value);\n  };\n\n  const onRenderOption = (props: any, option: any) => {\n  };\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n      <Autocomplete\n        disablePortal\n        id=\"search-entity-autocomplete\"\n        options={ options }\n        fullWidth\n        autoHighlight\n        blurOnSelect\n        filterOptions={ (x) => x }\n        value={ value }\n        getOptionLabel={ (option) => {\n          return option.properties.name ?? option.properties.title;\n        } }\n        noOptionsText = { `Search for ${entity}` }\n        loading= { isFetching }\n        renderInput={ (params: AutocompleteRenderInputParams) => <AutoCompleteTextField params={ params } entity={ entity } /> }\n        onChange={ (event: any, newValue: ResultProperty<StarwarsSearchable> | null) => {\n          onChangeHandler(newValue);\n        } }\n        onInputChange={ (event, newInputValue) => onInputChangeHandler(event, newInputValue) }\n        isOptionEqualToValue = { (option: ResultProperty<StarwarsSearchable>, value: ResultProperty<StarwarsSearchable>) => { return option.uid === value.uid; } }\n      />\n      <Box ml={ 2 }>\n        { isFetching && <ProgressCircle size={ 20 } /> }\n      </Box>\n    </Stack>\n  );\n}\n\nexport default SearchAutoComplete;\n\nfunction AutoCompleteTextField({params, entity}: {params: AutocompleteRenderInputParams, entity: string}) {\n  return (\n    <TextField { ...params } label={ `Filter ${entity}` } variant=\"standard\" />\n  );\n}","import { format } from 'date-fns';\n\n\nexport interface DateDisplay2Props {\n  dateInMilli: number | undefined;\n}\n\nfunction DateDisplay2({ dateInMilli }: DateDisplay2Props) {\n  return (\n    <>\n      { (dateInMilli !== undefined) && format(dateInMilli, 'MM/dd/yyyy p') }\n    </>\n  );\n};\n\nexport default DateDisplay2;","import { formatDistanceToNow } from 'date-fns';\n\nexport interface DateDisplay2Props {\n  dateInMilli: number | undefined;\n}\n\nfunction DateToNow({ dateInMilli }: DateDisplay2Props) {\n  return (\n    <>\n      { (dateInMilli !== undefined) && formatDistanceToNow(dateInMilli, { includeSeconds: true }) }\n    </>\n  );\n};\n\nexport default DateToNow;","import { formatDistance } from 'date-fns';\n\n\nexport interface DurationDisplayProps {\n  durationInMilli: number;\n}\n\nfunction DurationDisplay({ durationInMilli }: DurationDisplayProps) {\n  return (\n    <>\n      { (durationInMilli > 1000) ? (formatDistance(0, durationInMilli, { includeSeconds : true })) : (durationInMilli + ' ms') }\n    </>\n  );\n};\n\nexport default DurationDisplay;","import Grid from '@mui/material/Unstable_Grid2';\nimport { ReactNode } from 'react';\n\nexport interface LayoutGutterProps {\n  children: ReactNode;\n  size?: \"full\" | \"med\" | \"skinny\"\n}\n\nfunction LayoutWithGutter({ size = \"med\", children }: LayoutGutterProps) {\n\n  return (\n    // <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } sm={ sizes.width } smOffset={ sizes.offset }>\n    //   { children }\n    // </Grid>\n    <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } \n      sm={ size==='full' ? 12 : (size === 'med' ? 7 : (4)) } \n      smOffset={ size==='full' ? 0 : (size === 'med' ? 2.5 : (4)) }>\n      { children }\n    </Grid>\n  );\n}\n\nexport default LayoutWithGutter;","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Theme } from '@emotion/react';\nimport { SxProps } from '@mui/material';\n\nexport default function ProgressCircle({ size=40, color='grey.500', styleProps }: {size?: number, color?: string, styleProps?: SxProps<Theme>}) {\n  return (\n    <Stack sx={ { color: color, ...styleProps } } spacing={ 1 } direction=\"row\">\n      <CircularProgress color=\"inherit\" size={ size } />\n    </Stack>\n  );\n}","import { AppBar, Stack, Button, Tooltip, IconButton, AppBarTypeMap } from \"@mui/material\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport Toolbar from '@mui/material/Toolbar';\nimport { GREY } from \"src/theme/palette\";\n\ninterface ToolbarProps {\n  toolbarProps: any;\n  children: any;\n}\n\nexport default function AppToolbar({ toolbarProps, children }: ToolbarProps) {\n  \n  return (\n    <AppBar elevation={ 0 } { ...toolbarProps }>\n      <Toolbar \n        variant=\"regular\" \n        sx={ {bgcolor: (theme) => theme.palette.mode === 'light' ? GREY[100] : null, \n          color: (theme) => theme.palette.mode === 'light' ? '#000' : null,\n          pr: 0\n        } }>\n        { children }\n      </Toolbar>\n    </AppBar>\n  );\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * A media query string\n * which matches screen widths less than the screen size given by the breakpoint key (down)\n * @returns \n */\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.between('md', 'lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.between('lg', 'xl'));\n\n  const isAboveXlSize = useMediaQuery(theme.breakpoints.up('xl'));\n\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize,\n    isAboveXl: isAboveXlSize\n  };\n\n};\n\nexport default useScreenSize;","// extracted by mini-css-extract-plugin\nexport default {\"parentClass\":\"LoadingLogo_parentClass__NFHXT\",\"loadingLogo\":\"LoadingLogo_loadingLogo__BqUtz\",\"loadingParent\":\"LoadingLogo_loadingParent__VASnq\",\"loading-container\":\"LoadingLogo_loading-container__cjLsJ\",\"whole-page\":\"LoadingLogo_whole-page__DkCG7\",\"ldsFacebook\":\"LoadingLogo_ldsFacebook__pRdY2\",\"lds-facebook\":\"LoadingLogo_lds-facebook__JLntj\"};","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useReducer, useState, useContext, useMemo, Suspense } from 'react';\nimport classes from './LoadingLogo.module.scss';\nimport logo from '../../../static/img/death-star.png';\n\nexport interface LoadingLogoProps {\n  message: string;\n  children?: any;\n}\n\nexport default function LoadingLogo(props: LoadingLogoProps) {\n\n\n  return (\n    <div className={ `${classes.parentClass} w-100` }>\n      <div>\n        <div className={ classes.loadingLogo }>\n          <img src={ logo }\n            className={ `${classes.logoImg} d-inline-block` } alt=\"logo\" />\n        </div>\n    \n      </div>\n      <div className={ classes.loadingParent }>\n        <div className={ classes.ldsFacebook }><div></div><div></div><div></div></div>\n      </div>\n      <div className={ classes.secfont }>\n        Loading {props.message} ...\n      </div>\n    </div>\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["ErrorPage","reason","debug","marginY","width","direction","spacing","justifyContent","alignItems","variant","sx","textTransform","fontWeight","component","style","display","textAlign","JSON","stringify","getFilmFavoriteToggleTooltip","favorited","tooltip","dateFromNow","lastUpdated","moment","fromNow","isCurrentFavorite","date","format","Tooltip","title","Typography","undefined","interval","fetchFavoritesThunk","createAsyncThunk","thunkParams","thunkAPI","restUrl","urlcat","BASE_FIREBASE_URL","httpParams","obs$","fromFetch","signal","pipe","switchMap","res","ok","json","Error","status","lastValueFrom","favs","toggleFavoriteExhaustThunk","fav","Date","getTime","favStatus","ajax","url","map","response","condition","args","addNewFavoriteExhaustThunk","toggleFavoriteResult","dispatch","user","MovieCard","film","favoriteData","uid","userId","allFavoritesLoading","favToggleLoading","useAppDispatch","Card","flexDirection","elevation","CardMedia","alt","height","image","process","episode_id","backgroundColor","objectFit","CardContent","Stack","lg","xl","marginBottom","gutterBottom","Link","to","color","release_date","director","producer","opening_crawl","CardActions","Button","size","IconButton","onClick","promise","filmUrl","filmId","split","length","favorite","fireId","episodeId","then","_","disabled","HourglassBottom","DataBlockDisplayMode","ENTITY_NAME","useSearchParams","searchParams","currentDisplayModeUrl","get","isMobile","useScreenSize","navigate","useNavigate","useState","useFetchFavoritesQuery","favorites","data","isFavLoading","isLoading","isFavFetching","isFetching","useFetchFilmsQuery","selectFromResult","dataWithFavs","find","properties","sort","x","y","fulfilledTimeStamp","startedTimeStamp","isError","refetch","error","fetchTimeDuration","LoadingLogo","message","toolbarProps","position","top","container","xs","SearchAutoComplete","entity","onResultSelect","selection","xsOffset","CircularProgress","fontSize","DateDisplay2","dateInMilli","DurationDisplay","durationInMilli","startIcon","RefreshOutlined","starwarsFavoritesApi","type","starwarsFilmsApi","Box","mt","mx","LayoutWithGutter","sm","smOffset","mb","id","place","offset","DateToNow","AutoCompleteTextField","params","label","options","setOptions","value","setValue","inputValue","setInputValue","debouncedInputValue","useDebounce","useSearchContentQuery","name","skipToken","useEffect","useUpdateEffect","disablePortal","fullWidth","autoHighlight","blurOnSelect","filterOptions","getOptionLabel","option","noOptionsText","loading","renderInput","onChange","event","newValue","selected","onInputChange","newInputValue","onInputChangeHandler","isOptionEqualToValue","ml","formatDistanceToNow","includeSeconds","formatDistance","children","ProgressCircle","styleProps","AppToolbar","bgcolor","theme","palette","mode","GREY","pr","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useTheme","useMediaQuery","breakpoints","down","isMed","between","isLg","isXl","isAboveXl","up","props","className","classes","src","logo","useDispatch","useAppSelector","useSelector"],"sourceRoot":""}