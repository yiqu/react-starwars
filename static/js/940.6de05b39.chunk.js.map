{"version":3,"file":"static/js/940.6de05b39.chunk.js","mappings":"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","sources":["404/ErrorPage.tsx","shared/components/loading/LoadingSkeleton.tsx","core/shared/display/SearchAndPaginationBar.tsx","core/characters/all/CharactersAll.tsx","core/shared/search/SearchAutoComplete.tsx","core/store/sw-entities-config/swapi.selectors.ts","shared/components/layouts/LayoutWithGutter.tsx","shared/components/progress/CircleProgress.tsx","shared/components/toolbar/Toolbar.tsx","shared/hooks/useDebounce.ts","shared/hooks/useIsMobile.ts","webpack://starwars/./src/shared/loading/full-logo/LoadingLogo.module.scss?618b","shared/loading/full-logo/LoadingLogo.tsx","shared/utils/general.utils.ts","store/appHook.ts"],"sourcesContent":["import { Box, Stack, Typography } from \"@mui/material\";\n\nexport interface ErrorPageProp {\n  reason?: string;\n  debug?: any;\n}\n\nexport default function ErrorPage({ reason, debug }: ErrorPageProp) {\n\n  return (\n    <Box marginY={ 5 } width=\"100%\">\n      <Stack direction=\"column\" spacing={ 5 } justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"h5\" sx={ {textTransform:'uppercase'} }>\n          An error has occurred!\n        </Typography>\n\n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            REASON\n          </Typography>\n          <Typography variant=\"body2\">\n            { reason }\n          </Typography>\n        </Stack>\n        \n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            DEBUG\n          </Typography>\n          <Typography variant=\"body2\" component=\"div\">\n            <pre>\n              <code style={ {display: 'flex', textAlign: 'center'} }>\n                { JSON.stringify(debug) }\n              </code>\n            </pre>\n          </Typography>\n        </Stack>\n      </Stack>\n    </Box>\n  );\n};","import { Skeleton } from '@mui/material';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { flexCenter } from '../../utils/css.utils';\nexport interface LoadingSkeletonProps {\n  count?: number;\n  sxProps?: any;\n}\n\nexport default function LoadingBarSkeleton({ count = 1, sxProps = {} }: LoadingSkeletonProps) {\n\n  return (\n    <>\n      {\n        Array.from(Array(count).keys()).map((res) => {\n          return (\n            <Grid xs={ 12 } key={ res } sx={ {...sxProps, ...flexCenter} }>\n              <Skeleton variant='text' width=\"100%\" />\n            </Grid>\n          );\n        })\n      }\n    </>\n  );\n}","import { Box, Stack, Typography } from '@mui/material';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport { ReactNode } from 'react';\nimport useScreenSize from 'src/shared/hooks/useIsMobile';\n\nexport interface SearchAndPaginationBarDisplayProps {\n  children?: ReactNode;\n}\n\nfunction SearchAndPaginationBarDisplay({ children }: SearchAndPaginationBarDisplayProps) {\n\n  const { isMobile } = useScreenSize();\n  \n  return (\n    <AppToolbar toolbarProps={ {\n      position: \"sticky\",\n      sx: {top: isMobile ? '56px':'64px'}\n    } }>\n      <Grid container xs={ 12 }>\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n          { children }\n        </Stack>\n      </Grid>\n    </AppToolbar>\n  );\n}\n\nexport default SearchAndPaginationBarDisplay;","import { Link, LoaderFunctionArgs, useLoaderData, useNavigate, useRouteLoaderData } from \"react-router-dom\";\nimport { delay, firstValueFrom, map } from \"rxjs\";\nimport { ajax, AjaxResponse } from 'rxjs/ajax';\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\nimport { PAGE_COUNT, PAGE_LIMIT } from \"src/shared/utils/constants\";\nimport urlcat from \"urlcat\";\nimport { HttpResponse, ResultProperty, StarwarsContent, StarwarsSearchable } from 'src/shared/models/starwars.model';\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { Stack, Tooltip, IconButton, Typography, Box, Button } from \"@mui/material\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport { useCallback, useEffect } from \"react\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport LoadingLogo from \"src/shared/loading/full-logo/LoadingLogo\";\nimport { selectFetchPageUrl, selectNextPageUrl, selectPage, selectPagination, selectTotalPages, selectTotalRecords } from \"src/core/store/sw-entities-config/swapi.selectors\";\nimport { useFetchCharactersInfiniteQuery, useFetchCharactersQuery } from \"src/core/store/sw-entities-config/swapi\";\nimport SearchAutoComplete from \"src/core/shared/search/SearchAutoComplete\";\nimport { scrollToElementById } from \"src/shared/utils/general.utils\";\nimport { dispatchPaging } from \"src/core/store/sw-entities-config/swapi.reducer\";\nimport { skipToken } from \"@reduxjs/toolkit/dist/query/react\";\nimport LayoutWithGutter from \"src/shared/components/layouts/LayoutWithGutter\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport LoadingSkeleton from \"src/shared/components/loading/LoadingSkeleton\";\nimport { flexCenter } from \"src/shared/utils/css.utils\";\nimport SearchAndPaginationBarDisplay from \"src/core/shared/display/SearchAndPaginationBar\";\n\n\nconst ENTITY_NAME = \"people\";\n\nconst CharactersAll = () => {\n  const { isMobile } = useScreenSize();\n  const dispatch = useAppDispatch();\n  const fetchUrl: string | undefined = useAppSelector(selectFetchPageUrl(ENTITY_NAME));\n  const nextPage: string | null | undefined = useAppSelector(selectNextPageUrl(ENTITY_NAME));\n  const totalRecords: number = useAppSelector(selectTotalRecords(ENTITY_NAME));\n  const { data, isFetching, isLoading, error, isSuccess, isError, refetch } = useFetchCharactersInfiniteQuery(fetchUrl ?? skipToken);\n  \n  const navigate = useNavigate();\n\n\n  useEffect(() => {\n    scrollToElementById('top-pagination', 300, \"end\");\n  }, [isSuccess]);\n\n  const onPageHandler = () => {\n    dispatch(dispatchPaging({entityId: ENTITY_NAME, pagination: {page: -1, fetchUrl: nextPage}}));\n  };\n\n  const onResultSelectHandler = (selection: ResultProperty<StarwarsSearchable> | null) => {\n    navigate(`./${selection?.uid}`);\n  };\n\n  if (isLoading) return (\n    <Stack direction=\"column\" width=\"100%\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n      <LoadingLogo message={ ENTITY_NAME } />\n    </Stack>\n  );\n\n  if (isError) {\n    return <ErrorPage reason={ (error as any).status } debug={ (error as any).error } />;\n  }\n\n  if (!data) {\n    return <></>;\n  }\n  \n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <SearchAndPaginationBarDisplay>\n        <Box flexBasis=\"35%\">\n          <SearchAutoComplete entity={ ENTITY_NAME } onResultSelect={ onResultSelectHandler } />\n        </Box>\n        <Box flexBasis=\"15%\" sx={ {display: 'flex'} } justifyContent=\"end\" alignItems=\"center\">\n          <Typography>\n            1 - { data.results.length } of { totalRecords }\n          </Typography>\n        </Box>\n      </SearchAndPaginationBarDisplay>\n      <Box mt={ 2 } mx={ isMobile ? 2 : 0 }>\n        <LayoutWithGutter size=\"skinny\">\n          <InfiniteScroll\n            dataLength={ data.results.length }\n            next={ onPageHandler }\n            hasMore={ !!nextPage }\n            loader={ <LoadingSkeleton count={ 3 } sxProps={ {height: '4rem'} }/> }\n            endMessage={ <></> }\n            className=\"scroller-parent\">\n            {\n              data.results.map((display: StarwarsContent) => {\n                return (\n                  <Stack key={ display.uid } direction=\"column\">\n                    {\n                      <Box sx={ { ...flexCenter, width: '100%' } }>\n                        <Button fullWidth component={ Link } to={ `./${display.uid}` } state={ {someData: 'some-cool-data' } } sx={ {height: '3rem'} }> { display.name } </Button>\n                      </Box>\n                    }\n                  </Stack>\n                );\n              })\n            }\n          </InfiniteScroll>\n        </LayoutWithGutter>\n      </Box>\n    </Stack>\n  );\n};\n\nexport default CharactersAll;\n\nexport function loader({ params }: LoaderFunctionArgs): Promise<StarwarsContent[]> {\n\n  const restUrl: string = urlcat(BASE_SW_API, `people`, { limit: PAGE_LIMIT, page: PAGE_COUNT });\n  \n  const people$ = ajax<HttpResponse<StarwarsContent>>(restUrl).pipe(\n    delay(0),\n    map((res) => {\n      return res.response.results;\n    })\n  );\n\n  return firstValueFrom(people$);\n};","import { Autocomplete, AutocompleteRenderInputParams, InputAdornment, TextField, Stack, Box } from \"@mui/material\";\nimport { skipToken } from \"@reduxjs/toolkit/query/react\";\nimport { useEffect, useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport { useSearchContentQuery } from \"src/core/store/sw-entities-config/swapi\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { useDebounce } from \"src/shared/hooks/useDebounce\";\nimport { ResultProperty, StarwarsSearchable } from \"src/shared/models/starwars.model\";\n\nexport interface SearchAutoCompleteProps {\n  entity: string;\n  onResultSelect: (selection: ResultProperty<StarwarsSearchable> | null) => void;\n}\n\nfunction SearchAutoComplete({ entity, onResultSelect }: SearchAutoCompleteProps) {\n\n  // dropdown options\n  const [options, setOptions] = useState<readonly ResultProperty<StarwarsSearchable>[]>([]);\n  // dropdown selection\n  const [value, setValue] = useState<ResultProperty<StarwarsSearchable> | null>(null);\n  // user text input\n  const [inputValue, setInputValue] = useState<string | null>(null);\n  const debouncedInputValue = useDebounce<string | null>(inputValue, 600);\n\n  const { data, isFetching, error, isError, refetch } = useSearchContentQuery(debouncedInputValue ? {\n    entity,\n    name: debouncedInputValue\n  } : skipToken);\n  \n  useEffect(() => {\n    setOptions(data ?? []);\n  }, [data]);\n\n  useUpdateEffect(() => {\n  }, [debouncedInputValue]);\n\n  /**\n   * Drop down selection change\n   * @param selected selected from dropdown\n   */\n  const onChangeHandler = (selected: ResultProperty<StarwarsSearchable> | null) => {\n    setOptions(selected ? [selected] : options);\n    setValue(selected);\n    onResultSelect(selected);\n  };\n\n  /**\n   * Input text change\n   * @param event \n   * @param value user's input text\n   */\n  const onInputChangeHandler = (event: any, value: string) => {\n    setInputValue(value);\n  };\n\n  const onRenderOption = (props: any, option: any) => {\n  };\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n      <Autocomplete\n        disablePortal\n        id=\"search-entity-autocomplete\"\n        options={ options }\n        fullWidth\n        autoHighlight\n        blurOnSelect\n        filterOptions={ (x) => x }\n        value={ value }\n        getOptionLabel={ (option) => {\n          return option.properties.name ?? option.properties.title;\n        } }\n        noOptionsText = { `Search for ${entity}` }\n        loading= { isFetching }\n        renderInput={ (params: AutocompleteRenderInputParams) => <AutoCompleteTextField params={ params } entity={ entity } /> }\n        onChange={ (event: any, newValue: ResultProperty<StarwarsSearchable> | null) => {\n          onChangeHandler(newValue);\n        } }\n        onInputChange={ (event, newInputValue) => onInputChangeHandler(event, newInputValue) }\n        isOptionEqualToValue = { (option: ResultProperty<StarwarsSearchable>, value: ResultProperty<StarwarsSearchable>) => { return option.uid === value.uid; } }\n      />\n      <Box ml={ 2 }>\n        { isFetching && <ProgressCircle size={ 20 } /> }\n      </Box>\n    </Stack>\n  );\n}\n\nexport default SearchAutoComplete;\n\nfunction AutoCompleteTextField({params, entity}: {params: AutocompleteRenderInputParams, entity: string}) {\n  return (\n    <TextField { ...params } label={ `Filter ${entity}` } variant=\"standard\" />\n  );\n}","import { createSelector } from \"@reduxjs/toolkit\";\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\nimport { Pagination } from \"src/shared/models/http.model\";\nimport { RootState } from \"src/store/appStore\";\n\nconst swapiConfigSlice = (state: RootState) => {\n  return state[\"sw-entities-config\"];\n};\n\nexport const selectPagination = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): Pagination | undefined => {\n    return slice.pagination[entityId]?.pagination;\n  }\n);\n\nexport const selectPage = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.page ?? 1;\n  }\n);\n\nexport const selectTotalPages = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.total_pages ?? 0;\n  }\n);\n\nexport const selectTotalRecords = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): number => {\n    return slice.pagination[entityId]?.pagination?.total_records ?? 0;\n  }\n);\n\nexport const selectNextPageUrl = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): string | null | undefined=> {\n    return slice.pagination[entityId]?.pagination.next;\n  }\n);\n\nexport const selectFetchPageUrl = (entityId: string) => createSelector(\n  swapiConfigSlice,\n  (slice): string | undefined=> {\n    return slice.pagination[entityId]?.pagination.fetchUrl ?? `${BASE_SW_API}${entityId}?page=1&limit=30`;\n  }\n);","import Grid from '@mui/material/Unstable_Grid2';\nimport { ReactNode } from 'react';\n\nexport interface LayoutGutterProps {\n  children: ReactNode;\n  size?: \"full\" | \"med\" | \"skinny\"\n}\n\nfunction LayoutWithGutter({ size = \"med\", children }: LayoutGutterProps) {\n\n  return (\n    // <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } sm={ sizes.width } smOffset={ sizes.offset }>\n    //   { children }\n    // </Grid>\n    <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } \n      sm={ size==='full' ? 12 : (size === 'med' ? 7 : (4)) } \n      smOffset={ size==='full' ? 0 : (size === 'med' ? 2.5 : (4)) }>\n      { children }\n    </Grid>\n  );\n}\n\nexport default LayoutWithGutter;","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Theme } from '@emotion/react';\nimport { SxProps } from '@mui/material';\n\nexport default function ProgressCircle({ size=40, color='grey.500', styleProps }: {size?: number, color?: string, styleProps?: SxProps<Theme>}) {\n  return (\n    <Stack sx={ { color: color, ...styleProps } } spacing={ 1 } direction=\"row\">\n      <CircularProgress color=\"inherit\" size={ size } />\n    </Stack>\n  );\n}","import { AppBar, Stack, Button, Tooltip, IconButton, AppBarTypeMap } from \"@mui/material\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport Toolbar from '@mui/material/Toolbar';\nimport { GREY } from \"src/theme/palette\";\n\ninterface ToolbarProps {\n  toolbarProps: any;\n  children: any;\n}\n\nexport default function AppToolbar({ toolbarProps, children }: ToolbarProps) {\n  \n  return (\n    <AppBar elevation={ 0 } { ...toolbarProps }>\n      <Toolbar \n        variant=\"regular\" \n        sx={ {bgcolor: (theme) => theme.palette.mode === 'light' ? GREY[50] : null, \n          color: (theme) => theme.palette.mode === 'light' ? '#000' : null,\n          pr: 0\n        } }>\n        { children }\n      </Toolbar>\n    </AppBar>\n  );\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * A media query string\n * which matches screen widths less than the screen size given by the breakpoint key (down)\n * @returns \n */\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.between('md', 'lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.between('lg', 'xl'));\n\n  const isAboveXlSize = useMediaQuery(theme.breakpoints.up('xl'));\n\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize,\n    isAboveXl: isAboveXlSize\n  };\n\n};\n\nexport default useScreenSize;","// extracted by mini-css-extract-plugin\nexport default {\"parentClass\":\"LoadingLogo_parentClass__NFHXT\",\"loadingLogo\":\"LoadingLogo_loadingLogo__BqUtz\",\"loadingParent\":\"LoadingLogo_loadingParent__VASnq\",\"loading-container\":\"LoadingLogo_loading-container__cjLsJ\",\"whole-page\":\"LoadingLogo_whole-page__DkCG7\",\"ldsFacebook\":\"LoadingLogo_ldsFacebook__pRdY2\",\"lds-facebook\":\"LoadingLogo_lds-facebook__JLntj\"};","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useReducer, useState, useContext, useMemo, Suspense } from 'react';\nimport classes from './LoadingLogo.module.scss';\nimport logo from '../../../static/img/death-star.png';\n\nexport interface LoadingLogoProps {\n  message: string;\n  children?: any;\n}\n\nexport default function LoadingLogo(props: LoadingLogoProps) {\n\n\n  return (\n    <div className={ `${classes.parentClass} w-100` }>\n      <div>\n        <div className={ classes.loadingLogo }>\n          <img src={ logo }\n            className={ `${classes.logoImg} d-inline-block` } alt=\"logo\" />\n        </div>\n    \n      </div>\n      <div className={ classes.loadingParent }>\n        <div className={ classes.ldsFacebook }><div></div><div></div><div></div></div>\n      </div>\n      <div className={ classes.secfont }>\n        Loading {props.message} ...\n      </div>\n    </div>\n  );\n};","\nexport function scrollToElementById(id: string, timeout?: number, position?: ScrollLogicalPosition): void {\n  let top = document.getElementById(id);\n  if (top) {\n    setTimeout(() => {\n      top?.scrollIntoView({block: position as any ?? \"end\"});\n      top = null;\n    }, timeout ?? 0);\n  }\n}\n\nexport function scrollToTop() {\n  window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\n};\n\n\nexport function scrollToBottom() {\n  window.scrollTo({\n    top: document.documentElement.offsetHeight,\n    left: 0,\n    behavior: \"smooth\",\n  });\n};\n\nexport function convertCommaDecimalNumberToNumber(num: string): number {\n  if (num) {\n    const stripped = num.trim();\n    return parseFloat(stripped.replace(/,/g, ''));\n  }\n  return NaN;\n}\n\nexport function insertIntoArrayAtIndex<T>(arr: T[], index: number, item: T): T[] {\n  const arrCopy: T[] = JSON.parse(JSON.stringify(arr));\n  arrCopy.splice(index, 0, item);\n  return arrCopy;\n}\n\nexport function capitalizeFirstLetter(str: string): string | undefined {\n  if (str) {\n    return (str.charAt(0).toUpperCase()) + str.slice(1);\n  }\n  return undefined;\n}\n\nexport function objectsEqual(o1: any, o2: any): boolean {\n  return typeof o1 === 'object' && Object.keys(o1).length > 0\n  ? Object.keys(o1).length === Object.keys(o2).length\n      && Object.keys(o1).every(p => objectsEqual(o1[p], o2[p]))\n  : o1 === o2;\n}\n\nexport function arraysEqual(a1: any[], a2: any[]): boolean {\n  if (a1 && a2) {\n    return a1.length === a2.length && a1.every((o, idx) => objectsEqual(o, a2[idx]));\n  }\n  return false;\n}\n\nexport function removeEmptyFromObject(obj: any): any {\n  if (!obj) {\n    return {};\n  }\n  const result = JSON.parse(JSON.stringify(obj));\n  Object.keys(result).forEach((key) => {\n    if (result[key] === null || result[key] === undefined) {\n      delete result[key];\n    }\n  });\n  return result;\n}\n\nexport function isObjectEmpty(obj: any): boolean {\n  if (obj) {\n    const keys = Object.keys(obj);\n    return keys.length < 1;\n  }\n  return false;\n}\n\n// Remove objects in an array if the object has the same value by key provided\nexport function deduplicateObjectArrayByKey<T>(arr: T[], key: string): T[] {\n  if (arr && arr.length > 0) {\n    const uniqueByValues: any[] = arr.map((res: T) => res[key as keyof T]);\n    const filtered = arr.filter((res: T, index: number) => {\n      return !uniqueByValues.includes(res[key as keyof T], index + 1);\n    });\n    return filtered;\n  }\n  return [];\n}\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["ErrorPage","reason","debug","marginY","width","direction","spacing","justifyContent","alignItems","variant","sx","textTransform","fontWeight","component","style","display","textAlign","JSON","stringify","LoadingBarSkeleton","count","sxProps","Array","from","keys","map","res","xs","flexCenter","Skeleton","children","isMobile","useScreenSize","toolbarProps","position","top","container","Stack","ENTITY_NAME","dispatch","useAppDispatch","fetchUrl","useAppSelector","selectFetchPageUrl","nextPage","selectNextPageUrl","totalRecords","selectTotalRecords","useFetchCharactersInfiniteQuery","skipToken","data","isLoading","isFetching","error","isSuccess","isError","navigate","refetch","useNavigate","useEffect","scrollToElementById","height","LoadingLogo","message","status","SearchAndPaginationBar","Box","flexBasis","SearchAutoComplete","entity","onResultSelect","selection","uid","Typography","results","length","mt","mx","LayoutWithGutter","size","dataLength","next","dispatchPaging","entityId","pagination","page","hasMore","loader","endMessage","className","Button","fullWidth","Link","to","state","someData","name","params","restUrl","urlcat","BASE_SW_API","limit","PAGE_LIMIT","PAGE_COUNT","people$","ajax","pipe","delay","response","firstValueFrom","AutoCompleteTextField","label","useState","options","setOptions","value","setValue","inputValue","setInputValue","debouncedInputValue","useDebounce","useSearchContentQuery","useUpdateEffect","disablePortal","id","autoHighlight","blurOnSelect","filterOptions","x","getOptionLabel","option","properties","title","noOptionsText","loading","renderInput","onChange","event","newValue","selected","onInputChange","newInputValue","onInputChangeHandler","isOptionEqualToValue","ml","swapiConfigSlice","selectPage","createSelector","slice","selectTotalPages","total_pages","total_records","xsOffset","sm","smOffset","ProgressCircle","color","styleProps","AppToolbar","elevation","bgcolor","theme","palette","mode","GREY","pr","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useTheme","useMediaQuery","breakpoints","down","isMed","between","isLg","isXl","isAboveXl","up","props","classes","src","logo","alt","timeout","document","getElementById","scrollIntoView","block","useDispatch","useSelector"],"sourceRoot":""}