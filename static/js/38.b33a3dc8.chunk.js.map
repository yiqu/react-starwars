{"version":3,"file":"static/js/38.b33a3dc8.chunk.js","mappings":"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","sources":["shared/rest/starwars-api.ts","core/fetchers/movies.ts","shared/rest/axios-rest.ts","core/fetchers/favorites.ts","core/hooks/useFetchFavorites.ts","core/hooks/useFetchMovies.ts","shared/form/m-input/FormInput.tsx","core/movies/movies/filter/FilterInput.tsx","shared/hooks/useIsMobile.ts","core/utils/films.utils.tsx","core/movies/movies/MovieCard.tsx","core/movies/movies/Movies.tsx","shared/components/skeleton/LoadingSkeleton.tsx","shared/utils/sleep.js"],"sourcesContent":["import axios from 'axios';\nimport { HttpParams } from '../models/http.model';\n\nexport const SW_BASE_API = 'https://swapi.tech/api/';\n\nconst axiosStarwarsInstance = axios.create({\n  baseURL: SW_BASE_API,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosStarwarsInstance = () => {\n  return axiosStarwarsInstance;\n};\n\nexport const axiosStarwarsGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosStarwarsInstance.get<T>(url, {\n    params: params\n  });\n};\n\n\nexport default axiosStarwarsInstance;","import { AxiosResponse } from 'axios';\nimport { HttpParams } from 'src/shared/models/http.model';\nimport { axiosStarwarsGet } from 'src/shared/rest/starwars-api';\nimport { sleep } from \"../../shared/utils/sleep\";\n\n\nexport const axiosFetcher = async <T>(url: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n  return await axiosStarwarsGet<T>(url, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n        // return {TEST:\"TEST\"};\n      } \n    });\n};\n","import axios from 'axios';\nimport { HttpParams } from '../models/http.model';\n\nconst BASE_URL = 'https://kq-1-1a499.firebaseio.com/';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n  //params: {A:\"A\",B:\"B\"}\n});\n\nexport const getAxiosInstance = () => {\n  return axiosInstance;\n};\n\nexport const axiosGet = <T>(url: string, params: HttpParams | null = null) => {\n  return axiosInstance.get<T>(url + '.json', {\n    params: params\n  });\n};\n\nexport const axiosPost = <T>(url: string, data?: T) => {\n  return axiosInstance.post<T>(url + '.json', data);\n};\n\nexport const axiosPut = <T>(url: string, data?: T) => {\n  return axiosInstance.put<T>(url + '.json', data);\n};\n\nexport const axiosDelete = <T>(url: string, data?: T) => {\n  return axiosInstance.delete<T>(url + '.json');\n};\n\nexport default axiosInstance;","import { AxiosResponse } from 'axios';\nimport { HttpParams } from 'src/shared/models/http.model';\nimport { FavoriteToSave } from 'src/shared/models/starwars.model';\nimport { axiosGet, axiosPost, axiosPut } from 'src/shared/rest/axios-rest';\nimport { sleep } from \"../../shared/utils/sleep\";\n\nconst baseUrl: string = 'swdb/';\n\nexport const axiosFetcher = async <T>(userId: string, params?: HttpParams, slow = 0) => {\n  if (slow) {\n    await sleep(slow);\n  }\n\n  const userUrl = `${baseUrl}${userId}/favorites`;\n\n  return await axiosGet<T>(userUrl, params)\n    .then((res: AxiosResponse<T, any>) => {\n      return res.data;\n    })\n    .catch((error) => {\n      if (error.response.status !== 409) {\n        throw error;\n      } \n    });\n};\n\nexport const saveFavorite = (userId: string, film: FavoriteToSave): Promise<AxiosResponse<FavoriteToSave, any>> => {\n  const favUrl = `${baseUrl}${userId}/favorites`;\n  return axiosPost<FavoriteToSave>(favUrl, film);\n};\n\nexport const updateFavorite = (userId: string, favorite: FavoriteToSave): Promise<AxiosResponse<FavoriteToSave, any>> => {\n  const favUrl = `${baseUrl}${userId}/favorites/${favorite.fireId}`;\n  return axiosPut(favUrl, favorite);\n};","import { axiosFetcher } from '../fetchers/favorites';\nimport useSWR from \"swr\";\nimport { FetchFavoritesHookProp } from 'src/shared/models/core-props.model';\nimport { FavoriteMoviesObjList } from 'src/shared/models/starwars.model';\n\n\nconst useFetchFavorites = (props: FetchFavoritesHookProp) => {\n\n  const { data, isValidating, error, mutate } = useSWR(\n    () => {\n      if (props.params.fetchTime) {\n        return [props.userId, props.params];\n      }\n      return null;\n    }, \n    axiosFetcher<FavoriteMoviesObjList>, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  const transformedData: FavoriteMoviesObjList = {};\n\n  if (data) {\n    const keys = Object.keys(data ?? {});\n    keys.forEach((key) => {\n      transformedData[data[key].episodeId] = {\n        fireId: key,\n        ...data[key],\n      };\n    });\n  }\n\n  return {\n    data: transformedData,\n    loading: isValidating || (!error && !data),\n    error,\n    mutate\n  };\n};\n\nexport default useFetchFavorites;","import { FetchMovieHookProp } from \"src/shared/models/core-props.model\";\nimport useSWR from \"swr\";\nimport { axiosFetcher } from \"../fetchers/movies\";\n\nconst useFetchMovies = <T>(props: FetchMovieHookProp) => {\n  const { data, isValidating, error, mutate } = useSWR(\n    () => {\n      // if (props.params?.fetchTime) {\n      //   return [props.url, props.params];\n      // }\n      // return null;\n      return [props.url, props.params];\n    },  axiosFetcher<T>, {\n    revalidateIfStale: false,\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false\n  });\n\n  return {\n    data,\n    loading: isValidating || (!error && !data),\n    error,\n    mutate\n  };\n};\n\nexport default useFetchMovies;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInputProps } from 'src/shared/models/form.model';\n\nconst FormInput = ({ label, name, valueChange, ...props}: FormikInputProps) => {\n\n  const { values, submitForm } = useFormikContext<any>();\n\n  useEffect(() => {\n    valueChange(values.movieName);\n  }, [values.movieName, valueChange]);\n\n  return (\n    <>\n      { props.showLabel && <label htmlFor={ name }>{ label} </label> }\n      <Field as={ TextField } label={ label } name={ name } id={ name }\n        { ...props } sx={ {width: '100%'} } />\n    </>\n  );\n};\n\nexport default FormInput;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useCallback } from 'react';\nimport { Formik, Field, Form, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\nimport FormInput from 'src/shared/form/m-input/FormInput';\nimport { TextFieldProps } from '@mui/material';\n\nconst FilterInput = () => {\n\n  const initValue = {\n    movieName: ''\n  };\n  const filterChangeHandler = useCallback((payload: any) => {\n    console.log('filter:', payload);\n  }, []);\n\n  const movieNameFilter: TextFieldProps = {\n    name: 'movieName',\n    label: 'Filter by movie name',\n    placeholder: 'Enter a movie name...',\n    id: 'movieName',\n    variant: 'standard',\n  };\n\n  const submitHandler = (payload: any) => {\n    console.log(payload);\n  };\n\n  return (\n    <Formik\n      initialValues={ initValue }\n      onSubmit={ submitHandler }\n    >\n      <Form autoComplete=\"off\">\n        <FormInput { ...movieNameFilter } valueChange={ filterChangeHandler } />\n      </Form>\n      \n    </Formik>\n  );\n};\n\nexport default FilterInput;","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.down('md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.down('xl'));\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize\n  };\n\n};\n\nexport default useScreenSize;","import { FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport moment from 'moment';\n\nexport const getFilmFavoriteToggleTooltip = (favorited?: FavoriteToSave) => {\n  let tooltip: string = '';\n  const dateFromNow = favorited?.lastUpdated ? (moment(favorited?.lastUpdated).fromNow()) : ('');\n\n  if (favorited?.isCurrentFavorite) {\n    tooltip = 'Remove from favorites';\n  } else {\n    tooltip = 'Add to favorites';\n  }\n\n  if (favorited?.lastUpdated) {\n    tooltip = tooltip + '. ' + (favorited.isCurrentFavorite ? 'Favorited ' : 'Unfavorited ') + dateFromNow;\n  }\n\n  return tooltip;\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { FCC } from \"src/shared/models/fc-children.model\";\nimport { StarwarsFilmCardProps } from \"src/shared/models/starwars.model\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Link } from \"react-router-dom\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport FavIcon from '@mui/icons-material/Favorite';\nimport IconButton from '@mui/material/IconButton';\nimport { useEffect } from 'react';\nimport { Stack } from \"@mui/material\";\nimport { getFilmFavoriteToggleTooltip } from \"src/core/utils/films.utils\";\n\n\nconst MovieCard: FCC<StarwarsFilmCardProps> = (props: StarwarsFilmCardProps) => {\n\n  const favoriteToggleHandler = () => {\n    props.onFavoriteToggle(props.film, props.favorited);\n  };\n\n  const { isXl } = useScreenSize();\n\n  return (\n    <Card sx={ {border:\"2px solid #726f53\", height:(isXl ? '100%': '100%'), display:'flex',\n      flexDirection:'column', justifyContent:'space-between'} } \n      elevation={ 4 }>\n      <div>\n        <CardMedia\n          component=\"img\"\n          alt=\"poster\"\n          height=\"440\"\n          image={ `${process.env.PUBLIC_URL}/assets/poster-img/${props.film.episode_id}.png` }\n          sx={ {backgroundColor: '#000', objectFit: 'contain'} }\n        />\n        <CardContent>\n          <Stack direction={ {lg: 'column', xl: 'row'} } justifyContent={ {xl:'space-between', lg:'flex-start'} }\n            marginBottom={ {lg:'10px', xl: '0px'} }>\n            <Typography gutterBottom variant=\"h5\" component={ Link } to={ `./${props.uid}` } sx={ {fontFamily:'Poppins',\n              fontWeight:'500'} }>\n              { props.film.title }\n            </Typography>\n            <Typography variant=\"h5\" color='text.secondary' sx={ {fontWeight: '300'} }>\n              EP { props.film.episode_id }\n            </Typography>\n          </Stack>\n          \n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Released: { props.film.release_date }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Directed by: { props.film.director }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Produced by: { props.film.producer }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.primary\" sx={ {mt:'10px'} }>\n            { props.film.opening_crawl }\n          </Typography>\n        </CardContent>\n      </div>\n      \n      <CardActions sx={ {display: 'flex', justifyContent: 'space-between'} }>\n        <div>\n          <Button size=\"small\" component={ Link } to={ `./${props.uid}` }>\n            Learn More\n          </Button>\n        </div>\n        <div>\n          <IconButton aria-label=\"favorite\" onClick={ favoriteToggleHandler } \n            title={ getFilmFavoriteToggleTooltip(props.favorited) }>\n            <FavIcon color={ props.film.userFavorited ? 'error' : 'disabled' } />\n          </IconButton>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default MovieCard;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Button } from \"@mui/material\";\nimport Grid from \"@mui/system/Unstable_Grid\";\nimport { useCallback, useMemo, useState, useEffect } from \"react\";\nimport { saveFavorite, updateFavorite } from \"src/core/fetchers/favorites\";\nimport useFetchFavorites from \"src/core/hooks/useFetchFavorites\";\nimport useFetchMovies from \"src/core/hooks/useFetchMovies\";\nimport LoadingSkeleton from \"src/shared/components/skeleton/LoadingSkeleton\";\nimport { FavoriteToSave, HttpResponse, HttpResponse2, HttpResponse2List, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { axiosPost } from \"src/shared/rest/axios-rest\";\nimport FilterInput from \"./filter/FilterInput\";\nimport MovieCard from \"./MovieCard\";\n\nconst userId = 'yqu';\n\nconst Movies = () => {\n  const arrOfItems = Array.from(Array(3).keys());\n\n  const [saveFavLoading, setSaveFavLoading] = useState<boolean>(false);\n  const [fetchFavoriteTime, setFetchFavoriteTime] = useState<number>(0);\n  const [fetchMoviesTime, setFetchMoviesTime] = useState<number>(0);\n\n  const {data: favMovies, error: favError, loading: favLoading, mutate: favMutate} = \n    useFetchFavorites({userId: userId, params: {fetchTime: fetchFavoriteTime}});\n\n  const {data, error, loading, mutate} = \n    useFetchMovies<HttpResponse2List<StarwarsFilm>>({ url: 'films', params: {fetchTime: fetchMoviesTime} });\n\n  const sorted: ResultProperty<StarwarsFilm>[] | undefined = useMemo(() => {\n    const sortedArr = data?.result ?? [];\n    if (sortedArr) {\n      sortedArr.sort((prev, next) => {\n        return prev.properties.episode_id > next.properties.episode_id ? 1 : -1;\n      });\n    }\n    sortedArr.forEach((res: ResultProperty<StarwarsFilm>) => {\n      res.properties.userFavorited = favMovies[res.properties.episode_id]?.isCurrentFavorite;\n    });\n\n    return sortedArr;\n  }, [data, favMovies]);\n\n  useEffect(() => {\n    //setFetchMoviesTime(new Date().getTime());\n    setFetchFavoriteTime(new Date().getTime());\n  }, []);\n\n  const onFavoriteToggleHandler = (film: StarwarsFilm, currentFavoriteStatus?: FavoriteToSave) => {\n    const { url: filmUrl } = film;\n    const filmId = (filmUrl.split(\"/\"))[filmUrl.split(\"/\").length - 1];\n\n    const favorite: FavoriteToSave = {\n      filmUrl,\n      filmId,\n      lastUpdated: new Date().getTime(),\n      episodeId: film.episode_id,\n      isCurrentFavorite: true,\n    };\n\n    setSaveFavLoading(true);\n    // update current favorited item in DB to false status\n    if (currentFavoriteStatus) {\n      favorite.isCurrentFavorite = !currentFavoriteStatus.isCurrentFavorite;\n      favorite.fireId = currentFavoriteStatus.fireId;\n      updateFavorite(userId, favorite).then((res) => {\n      }).catch((err) => {\n\n      }).finally(() => {\n        setSaveFavLoading(false);\n        setFetchFavoriteTime(new Date().getTime());\n      });\n\n    } else {\n      // create new favorited item to save\n      saveFavorite(userId, favorite).then((res) => {\n      }).catch((err) => {\n        // toast error\n      }).finally(() => {\n        // show toast save done\n        setSaveFavLoading(false);\n        setFetchFavoriteTime(new Date().getTime());\n      });\n    }\n  };\n\n  return (\n    <Grid container spacing={ 2 } mx={ 2 } my={ 2 } xs={ 12 } flexDirection=\"column\">\n      {/* All Movies\n      <Button onClick={ refresh }>Refresh</Button> */}\n      { error && (<div>Error occured:</div>)}\n      { loading ? (<Grid container xs={ 12 }>{ arrOfItems.map((item) => <Grid key={ item } xs={ 4 }> <LoadingSkeleton /> </Grid>) }</Grid>) : \n        (\n          <>\n            <Grid xs={ 4 }>\n              <FilterInput />\n            </Grid>\n            <Grid xs={ 12 } container>\n              {sorted?.map((res) => {\n                return (\n                  <Grid key={ res.properties.episode_id } xs={ 12 } sm={ 6 } md={ 4 } lg={ 4 } xl={ 4 }>\n                    <MovieCard film={ res.properties } onFavoriteToggle={ onFavoriteToggleHandler } \n                      favorited={ favMovies[res.properties.episode_id] } uid={ res.uid } >\n                    </MovieCard>\n                  </Grid>\n                );\n              })}\n            </Grid>\n            \n          </>\n          \n        )\n      }\n\n    </Grid>\n  );\n};\n\nexport default Movies;","import * as React from 'react';\nimport Skeleton from '@mui/material/Skeleton';\nimport Stack from '@mui/material/Stack';\n\nconst LoadingSkeleton = () => {\n\n  return (\n    <Stack spacing={ 1 }>\n      {/* For variant=\"text\", adjust the height via font-size */}\n      <Skeleton variant=\"text\" sx={ { fontSize: '1rem' } } />\n\n      {/* For other variants, adjust the size with `width` and `height` */}\n      <Skeleton variant=\"circular\" width={ 40 } height={ 40 } />\n      <Skeleton variant=\"rectangular\" width={ '100%' } height={ 60 } />\n      <Skeleton variant=\"rounded\" width={ '100%' } height={ 60 } />\n    </Stack>\n  );\n};\n\nexport default LoadingSkeleton;","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n"],"names":["axiosStarwarsInstance","axios","baseURL","timeout","headers","responseType","axiosStarwarsGet","url","params","get","axiosFetcher","slow","sleep","then","res","data","catch","error","response","status","axiosInstance","axiosGet","baseUrl","userId","userUrl","saveFavorite","film","favUrl","post","updateFavorite","favorite","fireId","put","props","useSWR","fetchTime","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","isValidating","mutate","transformedData","Object","keys","forEach","key","episodeId","loading","label","name","valueChange","useFormikContext","values","submitForm","useEffect","movieName","showLabel","htmlFor","as","TextField","id","sx","width","filterChangeHandler","useCallback","payload","console","log","initialValues","onSubmit","autoComplete","placeholder","variant","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","isMed","isLg","isXl","getFilmFavoriteToggleTooltip","favorited","tooltip","dateFromNow","lastUpdated","moment","fromNow","isCurrentFavorite","useScreenSize","Card","border","height","display","flexDirection","justifyContent","elevation","CardMedia","component","alt","image","process","episode_id","backgroundColor","objectFit","CardContent","Stack","direction","lg","xl","marginBottom","Typography","gutterBottom","Link","to","uid","fontFamily","fontWeight","title","color","release_date","director","producer","mt","opening_crawl","CardActions","Button","size","IconButton","onClick","onFavoriteToggle","userFavorited","arrOfItems","Array","from","useState","setSaveFavLoading","fetchFavoriteTime","setFetchFavoriteTime","fetchMoviesTime","useFetchFavorites","favMovies","useFetchMovies","sorted","useMemo","sortedArr","result","sort","prev","next","properties","Date","getTime","onFavoriteToggleHandler","currentFavoriteStatus","filmUrl","filmId","split","length","err","finally","Grid","container","spacing","mx","my","xs","map","item","LoadingSkeleton","sm","md","fontSize","time","Promise","resolve","reject","setTimeout"],"sourceRoot":""}