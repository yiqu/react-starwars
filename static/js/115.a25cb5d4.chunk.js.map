{"version":3,"file":"static/js/115.a25cb5d4.chunk.js","mappings":"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","sources":["shared/form/m-autocomplete/FormAutocomplete.tsx","shared/models/form.model.ts","shared/form/m-select/FormSelect.tsx","create-new/FormFields.tsx","create-new/new-dialog/NewFilmForm.tsx","create-new/new-dialog/NewFilmDialog.tsx","create-new/core/CreateNewFilm.tsx","shared/form/m-input/FormInput.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormAutocompleteProps, FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\nimport Checkbox from '@mui/material/Checkbox';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\n\nconst FormAutocomplete = ({ label, name, valueChange, ...props}: FormAutocompleteProps) => {\n\n  const formik = useFormikContext();\n\n  const onValueChangeHandler = (event: any, value: any) => {\n    formik.setFieldValue(name, value);\n  };\n\n  return (\n    <>\n      <FormControl fullWidth>\n        {props.showLabel && <InputLabel htmlFor={ name }>{ label }</InputLabel>}\n\n        <Field as={ Autocomplete } label={ label } name={ name } id={ name }\n        { ...props.props } onChange={ onValueChangeHandler }/>\n\n        <FormHelperText id={ `${name}-helper-text` }>{ props.helperText }</FormHelperText>\n\n      </FormControl>\n    </>\n  );\n};\n\nexport default FormAutocomplete;","import { TextFieldProps, SelectProps } from '@mui/material';\n\nexport const NONE_SELECTED_VALUE = 'NONE_SELECTED';\nexport interface FormInputProps {\n  name: string;\n  label: string;\n  showLabel?: boolean;\n  helperText?: string;\n  valueChange?: (payload: any) => void;\n}\n\nexport interface FormInput2Props extends FormInputProps {\n  props?: TextFieldProps;\n}\n\nexport interface FormAutocompleteProps extends FormInputProps {\n  options : any[];\n  props?: any;\n}\n\nexport interface FormSelectProps extends FormInputProps {\n  options?: any[];\n  useDefaultNoneSelected?: boolean;\n  props?: SelectProps;\n}\n\nexport type FormikInputProps = TextFieldProps & FormInputProps;\n\nexport type FormikSelectProps = SelectProps & FormSelectProps;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormikSelectProps, FormInputProps, FormSelectProps, NONE_SELECTED_VALUE } from 'src/shared/models/form.model';\nimport { FormHelperText, MenuItem, Select } from '@mui/material';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\n\nconst FormikSelect = ({ label, name, ...props}: FormSelectProps) => {\n\n  return (\n    <>\n      <FormControl fullWidth>\n\n        <InputLabel id={ name }>{ label }</InputLabel>\n\n        <Field as={ Select } label={ label } name={ name } id={ name }\n          { ...props.props } >\n          {\n            props.useDefaultNoneSelected && (\n            <MenuItem value={ NONE_SELECTED_VALUE } key={ '' } disabled>\n              <em>Select { props.useDefaultNoneSelected }</em>\n            </MenuItem>\n            ) \n          }\n          {\n            props.options?.map((opt) => {\n              const display = opt.display ?? opt;\n              const value = opt.value ?? opt;\n              return (\n                <MenuItem value={ value } key={ opt.value }>{ display }</MenuItem>\n              );\n            })\n          }\n        </Field>\n        { props.helperText && <FormHelperText>{ props.helperText }</FormHelperText>}\n      </FormControl>\n      \n    </>\n  );\n};\n\nexport default FormikSelect;","import { FormikProps } from \"formik\";\nimport FormAutocomplete from \"src/shared/form/m-autocomplete/FormAutocomplete\";\nimport FormInput from \"src/shared/form/m-input/FormInput\";\nimport FormikSelect from \"src/shared/form/m-select/FormSelect\";\n\nexport const getFormFields = (controlObject: any, formik: FormikProps<NewFilmData>) => {\n\n  switch (controlObject.name) {\n    case 'starships': {\n      return (\n        <>\n          <FormikSelect name={ controlObject.name } label={ controlObject.label }\n            options={ controlObject.options } { ...controlObject }\n            >\n          </FormikSelect>\n        </>\n      );\n    }\n    case 'title': {\n      return (\n        <>\n          <FormInput name={ controlObject.name } label={ controlObject.label }\n            { ...controlObject }\n            >\n          </FormInput>\n        </>\n      );\n    }\n    case 'director': {\n      return (\n        <>\n          <FormInput name={ controlObject.name } label={ controlObject.label }\n            { ...controlObject }\n            >\n          </FormInput>\n        </>\n      );\n    }\n    case 'characters': {\n      return (\n        <>\n          <FormAutocomplete name={ controlObject.name } label={ controlObject.label }\n            { ...controlObject } formik={ formik }\n            >\n          </FormAutocomplete>\n        </>\n      );\n    }\n    default: {\n      return (\n        <></>\n      );\n    }\n  }\n};\n\n\nexport interface NewFilmData {\n  title: string;\n  director: string;\n  characters: string[];\n  starships: string;\n  opening_crawl: string;\n  planets: string[];\n  species: string[];\n  vehicles: string[];\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport { DialogProps } from 'src/shared/models/dialog.model';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Box, Button, Checkbox, Divider, IconButton, Stack, TextField, Typography } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport React, { useEffect, useState } from 'react';\n import { Form, Formik, useFormikContext } from 'formik';\nimport { getFormFields } from '../FormFields';\nimport { StarwarsPeople } from 'src/shared/models/starwars.model';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\n\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst NewFilmForm = (props: any) => {\n\n  const formikContext = useFormikContext();\n\n  useEffect(() => {\n    console.log(formikContext.values);\n  }, [formikContext.values]);\n\n  const [formFields, setFormFields] = useState<any[]>([]);\n\n  useEffect(() => {\n    setFormFields(defaultFormFields);\n  }, []);\n\n  return (\n    <Form>\n      { formFields.map((field) => {\n        return (\n          <Grid key={ field.name } xs={ 6 }>\n            { getFormFields(field, props.formik) }\n          </Grid>\n        );\n      }) }\n    </Form>\n  );\n};\n\nexport default NewFilmForm;\n\nexport const defaultFormFields = [\n  {\n    name: 'title',\n    label: 'Title',\n    helperText: 'Your film title',\n  },\n  {\n    name: 'director',\n    label: 'Director',\n    helperText: 'Yourself! Or someone else..',\n  },\n  {\n    name: 'characters',\n    label: 'Characters',\n    helperText: 'Core people in your film',\n    props: {\n      autoHighlight: true,\n      options: [\n        {\n          \"uid\": \"1\",\n          \"name\": \"Luke Skywalker\",\n          \"url\": \"https://www.swapi.tech/api/people/1\"\n        },\n        {\n          \"uid\": \"2\",\n          \"name\": \"C-3PO\",\n          \"url\": \"https://www.swapi.tech/api/people/2\"\n        },\n        {\n          \"uid\": \"3\",\n          \"name\": \"R2-D2\",\n          \"url\": \"https://www.swapi.tech/api/people/3\"\n        },\n        {\n          \"uid\": \"4\",\n          \"name\": \"Darth Vader\",\n          \"url\": \"https://www.swapi.tech/api/people/4\"\n        }\n      ],\n      multiple: true,\n      disableCloseOnSelect: true,\n      getOptionLabel: (option: StarwarsPeople) => option.name,\n      renderOption: (props: any, option: StarwarsPeople, { selected }: {selected: boolean}) => { return (\n        <li { ...props }>\n          <Checkbox\n            icon={ icon }\n            checkedIcon={ checkedIcon }\n            style={ { marginRight: 8 } }\n            checked={ selected }\n          />\n          {option.name}\n        </li>\n      );},\n      renderInput: (params: any) => (\n        <TextField { ...params } label=\"Characters\" placeholder=\"Characters\" />\n      ),\n    }\n  },\n  {\n    name: 'openingCrawl',\n    label: 'Opening Crawl Text',\n  },\n  {\n    name: 'planets',\n    label: 'Planets',\n  },\n  {\n    name: 'species',\n    label: 'Species',\n  },\n  {\n    name: 'vehicles',\n    label: 'Vehicles',\n  },\n  {\n    name: 'starships',\n    label: 'starships',\n    options: [\n      {\n        display: 'ONE',\n        value: '1'\n      }\n    ],\n    useDefaultNoneSelected: 'your starships',\n    props: {\n      variant: \"outlined\",\n      size: 'small'\n    }\n  }\n];","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport { DialogProps } from 'src/shared/models/dialog.model';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Box, Button, Divider, IconButton, Stack, Typography } from '@mui/material';\nimport Grid from '@mui/system/Unstable_Grid';\nimport SaveIcon from '@mui/icons-material/Save';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport React, { useEffect, useState } from 'react';\n import { Form, Formik, useFormikContext } from 'formik';\nimport { getFormFields, NewFilmData } from '../FormFields';\nimport NewFilmForm from './NewFilmForm';\nimport { NONE_SELECTED_VALUE } from 'src/shared/models/form.model';\n\n\n\nconst NewFilmDialog = (props: DialogProps) => {\n\n  const initValues: NewFilmData = {\n    title: '',\n    director: '',\n    characters: [],\n    starships: NONE_SELECTED_VALUE,\n    opening_crawl: '',\n    planets: [],\n    species: [],\n    vehicles: []\n  };\n\n  const handleClose = (event: any, reason?: string) => {\n    if (reason !== 'backdropClick') {\n      props.onClose(null);\n    }\n  };\n\n  const formSubmitHandler = (payload: any) => {\n  };\n\n  return (\n    <Dialog onClose={ handleClose } open={ props.open } disableEscapeKeyDown maxWidth={ false }\n      PaperProps={ {sx:{minWidth:'calc(100% - 50rem)'}} }>\n    \n      <DialogTitle bgcolor=\"primary.main\" color=\"white\">\n        <Stack direction={ 'row' } justifyContent=\"space-between\" alignItems=\"center\">\n          <div>\n            { props.isEditMode ? 'Editing' : 'Create New Movie' }\n          </div>\n          <div>\n            <IconButton sx={ {color:'white'} } onClick={ handleClose }>\n              <CloseIcon />\n            </IconButton>\n          </div>\n        </Stack>\n      </DialogTitle>\n\n      <Divider />\n\n      <DialogContent >\n        <Grid container spacing={ 2 }>\n          <Formik initialValues={ initValues }\n              onSubmit={ formSubmitHandler }\n            >\n            {(formik) => {\n              return <div style={ {width: '100%'} }>\n                <NewFilmForm formik={ formik } />\n              </div>;\n            }}\n          </Formik>\n        </Grid>\n      </DialogContent>\n\n      <Divider />\n\n      <DialogActions>\n        <Button variant=\"text\" startIcon={ <RestartAltIcon /> }>\n          Reset\n        </Button>\n        <Button variant=\"text\" startIcon={ <SaveIcon /> }>\n          Save\n        </Button>\n      </DialogActions>\n\n    </Dialog>\n  );\n};\n\nexport default NewFilmDialog;\n\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { createSearchParams, Outlet, useNavigate, useSearchParams } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { Button, Typography } from \"@mui/material\";\nimport AddAPhotoOutlinedIcon from '@mui/icons-material/AddAPhotoOutlined';\nimport NewFilmDialog from \"../new-dialog/NewFilmDialog\";\n\nconst CreateNewFilm = () => {\n\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  const handleClickOpen = () => {\n    setShowDialog(true);\n  };\n  const handleClose = () => {\n    setShowDialog(false);\n  };\n\n  return (\n    <>\n      <Grid container >\n        <Grid container mx={ 2 } my={ 2 } xs={ 12 } spacing={ 2 }>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"h6\" >\n              Create your own Starwars movie!\n            </Typography>\n          </Grid>\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Typography variant=\"body2\">\n              Try adding your own movie with starships, vehicles, species, and planets.\n            </Typography>\n          </Grid>\n\n          <Grid xs={ 12 } sx={ {display: 'flex', flexDirection:'column', justifyContent: 'center', alignItems:'center'} }>\n            <Button variant=\"contained\" startIcon={ <AddAPhotoOutlinedIcon /> } onClick={ handleClickOpen }>\n              Add New Movie\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <NewFilmDialog onClose={ handleClose } open={ showDialog }></NewFilmDialog>      \n    </>\n    \n  );\n};\n\nexport default CreateNewFilm;;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { Field, Form, Formik, FormikProps, useFormikContext } from 'formik';\nimport { FormikInputProps, FormInput2Props, FormInputProps } from 'src/shared/models/form.model';\nimport { FormControl, FormHelperText, InputLabel } from '@mui/material';\n\nconst FormInput = ({ label, name, valueChange, ...props}: FormInput2Props) => {\n\n  return (\n    <>\n      <FormControl fullWidth>\n        {props.showLabel && <InputLabel htmlFor={ name }>{ label }</InputLabel>}\n\n        <Field as={ TextField } label={ label } name={ name } id={ name }\n        { ...props.props } />\n\n        <FormHelperText id={ `${name}-helper-text` }>{ props.helperText }</FormHelperText>\n\n      </FormControl>\n    </>\n  );\n};\n\nexport default FormInput;"],"names":["label","name","props","valueChange","formik","useFormikContext","FormControl","fullWidth","showLabel","InputLabel","htmlFor","as","Autocomplete","id","onChange","event","value","setFieldValue","FormHelperText","helperText","NONE_SELECTED_VALUE","Select","useDefaultNoneSelected","MenuItem","disabled","options","map","opt","display","getFormFields","controlObject","FormInput","icon","CheckBoxOutlineBlank","fontSize","checkedIcon","CheckBox","formikContext","useEffect","console","log","values","useState","formFields","setFormFields","defaultFormFields","field","Grid","xs","autoHighlight","multiple","disableCloseOnSelect","getOptionLabel","option","renderOption","selected","Checkbox","style","marginRight","checked","renderInput","params","TextField","placeholder","variant","size","initValues","title","director","characters","starships","opening_crawl","planets","species","vehicles","handleClose","reason","onClose","Dialog","open","disableEscapeKeyDown","maxWidth","PaperProps","sx","minWidth","DialogTitle","bgcolor","color","Stack","direction","justifyContent","alignItems","isEditMode","IconButton","onClick","Close","Divider","DialogContent","container","spacing","initialValues","onSubmit","payload","width","DialogActions","Button","startIcon","RestartAlt","Save","showDialog","setShowDialog","mx","my","flexDirection","Typography","AddAPhotoOutlined"],"sourceRoot":""}