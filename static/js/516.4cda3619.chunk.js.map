{"version":3,"file":"static/js/516.4cda3619.chunk.js","mappings":"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","sources":["shared/models/axios.model.ts","core/hooks/useFetchMovies.ts","core/store/all-films/films.actions.ts","core/movies/AllMoviesLayout.tsx","core/store/all-films/films.selectors.ts","shared/utils/sleep.js","shared/fetcber/axios.ts","store/appHook.ts"],"sourcesContent":["export enum AXIOS_ERROR_CODE {\n  ERR_CANCELED = \"ERR_CANCELED\"\n}","import { FetchMovieHookProp } from \"src/shared/models/core-props.model\";\nimport useSWR from \"swr\";\nimport { useRef, useState } from \"react\";\nimport { useDeepCompareEffect } from \"react-use\";\nimport urlcat from \"urlcat\";\nimport { httpGetCancellable } from \"src/shared/fetcber/axios\";\nimport { HttpResponse2List, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\n\n\nconst useFetchMovies = ({ params={refetch: 0} }: FetchMovieHookProp) => {\n  \n  const [url, setUrl] = useState<string>();\n  const abortControllerRef = useRef<AbortController>(new AbortController());\n\n  useDeepCompareEffect(() => {\n    const restUrl = urlcat(BASE_SW_API, '/films', { ...params });\n    abortControllerRef.current.abort();\n    abortControllerRef.current = new AbortController();\n    setUrl(restUrl);\n  }, [params]);\n\n  const { data, isValidating, error, isLoading } = useSWR(\n    () => url ? url : null, \n    (url) => httpGetCancellable<HttpResponse2List<StarwarsFilm>>(url, abortControllerRef.current),\n    {\n      revalidateOnFocus: false,\n      revalidateIfStale: true,\n      keepPreviousData: true,\n      shouldRetryOnError: true\n    }\n  );\n\n  return {\n    allFilms: data?.result,\n    allFilmsLoading: isLoading,\n    allFilmsValidating: isValidating,\n    allFilmsError: error,\n  };\n};\n\nexport default useFetchMovies;","import { createAction } from '@reduxjs/toolkit';\nimport { map } from 'rxjs';\nimport { ajax, AjaxResponse } from 'rxjs/ajax';\nimport { HttpParams } from 'src/shared/models/http.model';\nimport { HttpResponse2List, ResultProperty, StarwarsFilm } from 'src/shared/models/starwars.model';\nimport { allFilmsSlice } from './films.reducer';\n\nexport const { fetchFailure, fetchPayloadSuccess, setValidating, setLoading, setUrl, setParams2 } = allFilmsSlice.actions;\n\nexport const setApiParams = createAction(\n  'setApiParams',\n  function prepare(params: HttpParams) {\n    return {\n      payload: {\n        params\n      }\n    };\n  }\n);\n\n\nexport const fetchAllFilmsThunk = (params: any) => {\n  return (dispatch: any, getState: any) => {\n\n    ajax<HttpResponse2List<ResultProperty<StarwarsFilm>>>('https://www.swapi.tech/api/films')\n      .pipe(\n        map((res: AjaxResponse<HttpResponse2List<ResultProperty<StarwarsFilm>>>) => {\n          return res.response;\n        })\n      )\n      .subscribe({\n        next: (res) => {\n\n        },\n        error: (err) => {\n          \n        },\n      });\n  };\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport {  Outlet } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport useFetchMovies from \"src/core/hooks/useFetchMovies\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport * as fromAllFilmsSelectors from '../store/all-films/films.selectors';\nimport * as fromAllFilmsActions from '../store/all-films/films.actions';\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport { AXIOS_ERROR_CODE } from \"src/shared/models/axios.model\";\n\nexport default function AllMovieLayout() {\n\n  const dispatch = useAppDispatch();\n\n  const apiParams: HttpParams | undefined = useAppSelector(fromAllFilmsSelectors.selectApiParams);\n\n  const { allFilms, allFilmsError, allFilmsLoading, allFilmsValidating } = useFetchMovies({ params: undefined });\n  \n  useEffect(() => {\n    dispatch(fromAllFilmsActions.fetchPayloadSuccess(allFilms ?? []));\n  }, [allFilms, dispatch]);\n\n  useEffect(() => {\n    dispatch(fromAllFilmsActions.setLoading(allFilmsLoading));\n  }, [allFilmsLoading, dispatch]);\n\n  useEffect(() => {\n    dispatch(fromAllFilmsActions.setValidating(allFilmsValidating));\n  }, [allFilmsValidating, dispatch]);\n\n  useEffect(() => {\n    if (allFilmsError && allFilmsError.code !== AXIOS_ERROR_CODE.ERR_CANCELED) {\n      dispatch(fromAllFilmsActions.fetchFailure(allFilmsError));\n    }\n  }, [allFilmsError, dispatch]);\n\n  useEffect(() => {\n    dispatch(fromAllFilmsActions.setParams2({fetchTime: new Date().getTime()}));\n  }, [dispatch]);\n\n  return (\n    <Outlet />\n  );\n};","import { RootState } from \"src/store/appStore\";\nimport * as fromFilmsReducer from './films.reducer';\n\nconst allFilmsSlice = (state: RootState) => {\n  return state.allFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  fromFilmsReducer.adapter.getSelectors((state: RootState) => state.allFilms);\n\nexport const selectIsLoading = (state: RootState) => {\n  return allFilmsSlice(state).isLoading;\n};\n\nexport const selectIsValidating = (state: RootState) => {\n  return allFilmsSlice(state).isValidating;\n};\n\nexport const selectApiUrl = (state: RootState) => {\n  return allFilmsSlice(state).apiUrl;\n};\n\nexport const selectApiParams = (state: RootState) => {\n  return allFilmsSlice(state).apiParams;\n};\n\nexport const selectError = (state: RootState) => {\n  return allFilmsSlice(state).errMsg;\n};","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n","import axios, { AxiosResponse } from 'axios';\nimport { sleep } from \"../utils/sleep\";\n\nexport const httpGet = async <T>(url: string, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json'\n    });\n\n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error) {\n    console.error(\"App fetcher GET error:\", error);\n    throw error;\n  }\n};\n\n\nexport const httpGetCancellable = async <T>(url: string, abortController: AbortController, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json',\n      signal: abortController.signal\n    });\n    \n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error: any) {\n    if (error.code !== \"ERR_CANCELED\") {\n      console.error(\"App fetcher GET error:\", error);\n    }\n    throw error;\n  }\n};","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["AXIOS_ERROR_CODE","params","refetch","useState","url","setUrl","abortControllerRef","useRef","AbortController","useDeepCompareEffect","restUrl","urlcat","BASE_SW_API","current","abort","useSWR","httpGetCancellable","revalidateOnFocus","revalidateIfStale","keepPreviousData","shouldRetryOnError","data","isValidating","error","isLoading","allFilms","result","allFilmsLoading","allFilmsValidating","allFilmsError","allFilmsSlice","fetchFailure","fetchPayloadSuccess","setValidating","setLoading","setParams2","createAction","payload","AllMovieLayout","dispatch","useAppDispatch","useAppSelector","fromAllFilmsSelectors","useFetchMovies","undefined","useEffect","fromAllFilmsActions","code","ERR_CANCELED","fetchTime","Date","getTime","state","fromFilmsReducer","selectAll","selectIsLoading","selectById","selectEntities","selectIds","selectTotal","selectIsValidating","selectApiParams","apiParams","selectError","errMsg","sleep","time","Promise","resolve","reject","setTimeout","httpGet","slow","axios","headers","responseType","res","status","console","abortController","signal","useDispatch","useSelector"],"sourceRoot":""}