{"version":3,"file":"static/js/261.ff692ef0.chunk.js","mappings":"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","sources":["shared/models/axios.model.ts","core/hooks/useFetchMovies.ts","core/movies/AllMoviesLayout.tsx","core/store/all-films/films.actions.ts","core/store/all-films/films.selectors.ts","core/store/favorites/favorites.selectors.ts","core/utils/films.utils.tsx","shared/utils/sleep.js","shared/fetcber/axios.ts","store/appHook.ts"],"sourcesContent":["export enum AXIOS_ERROR_CODE {\n  ERR_CANCELED = \"ERR_CANCELED\"\n}","import { FetchMovieHookProp } from \"src/shared/models/core-props.model\";\nimport useSWR from \"swr\";\nimport { useRef, useState } from \"react\";\nimport { useDeepCompareEffect } from \"react-use\";\nimport urlcat from \"urlcat\";\nimport { httpGetCancellable } from \"src/shared/fetcber/axios\";\nimport { HttpResponse2List, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\n\n\nconst useFetchMovies = ({ params={refetch: 0} }: FetchMovieHookProp) => {\n  \n  const [url, setUrl] = useState<string>();\n  const abortControllerRef = useRef<AbortController>(new AbortController());\n\n  useDeepCompareEffect(() => {\n    const restUrl = urlcat(BASE_SW_API, '/films', { ...params });\n    abortControllerRef.current.abort();\n    abortControllerRef.current = new AbortController();\n    setUrl(restUrl);\n  }, [params]);\n\n  const { data, isValidating, error, isLoading } = useSWR(\n    () => url ? url : null, \n    (url) => httpGetCancellable<HttpResponse2List<StarwarsFilm>>(url, abortControllerRef.current),\n    {\n      revalidateOnFocus: false,\n      revalidateIfStale: true,\n      keepPreviousData: true,\n      shouldRetryOnError: true\n    }\n  );\n  \n  return {\n    allFilms: data?.result,\n    allFilmsLoading: isLoading,\n    allFilmsValidating: isValidating,\n    allFilmsError: error,\n  };\n};\n\nexport default useFetchMovies;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport {  Outlet } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport useFetchMovies from \"src/core/hooks/useFetchMovies\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport * as fromAllFilmsSelectors from '../store/all-films/films.selectors';\nimport * as fromAllFilmsActions from '../store/all-films/films.actions';\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport { AXIOS_ERROR_CODE } from \"src/shared/models/axios.model\";\n\nexport default function AllMovieLayout() {\n  const dispatch = useAppDispatch();\n  const apiParams = useAppSelector(fromAllFilmsSelectors.getFetchParams);\n  const { allFilms, allFilmsError, allFilmsLoading, allFilmsValidating } = useFetchMovies({ params: apiParams });\n  \n  useEffect(() => {\n    dispatch(fromAllFilmsActions.fetchPayloadSuccess(allFilms ?? []));\n  }, [allFilms, dispatch]);\n\n  useEffect(() => {\n    dispatch(fromAllFilmsActions.setLoading(allFilmsLoading));\n  }, [allFilmsLoading, dispatch]);\n\n  useEffect(() => {\n    dispatch(fromAllFilmsActions.setValidating(allFilmsValidating));\n  }, [allFilmsValidating, dispatch]);\n\n  useEffect(() => {\n    if (allFilmsError && allFilmsError.code !== AXIOS_ERROR_CODE.ERR_CANCELED) {\n      dispatch(fromAllFilmsActions.fetchFailure(allFilmsError));\n    }\n  }, [allFilmsError, dispatch]);\n\n\n  return (\n    <Outlet />\n  );\n};","import { allFilmsSlice } from './films.reducer';\n\nexport const { fetchFailure, fetchPayloadSuccess, setValidating, setLoading, setUrl, setParams2 } = allFilmsSlice.actions;\n\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { FavoriteMoviesObjList, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { RootState } from \"src/store/appStore\";\nimport * as fromFilmsReducer from './films.reducer';\nimport { getSortedFilmsWithFavorited } from \"src/core/utils/films.utils\";\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport produce from \"immer\";\nimport { selectAllByEpId } from \"../favorites/favorites.selectors\";\n\nconst allFilmsSlice = (state: RootState) => {\n  return state.allFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  fromFilmsReducer.adapter.getSelectors((state: RootState) => state.allFilms);\n\nexport const selectIsLoading = (state: RootState) => {\n  return allFilmsSlice(state).isLoading;\n};\n\nexport const selectIsValidating = (state: RootState) => {\n  return allFilmsSlice(state).isValidating;\n};\n\nexport const selectApiUrl = (state: RootState) => {\n  return allFilmsSlice(state).apiUrl;\n};\n\nexport const selectApiParams = (state: RootState) => {\n  return allFilmsSlice(state).apiParams;\n};\n\nexport const selectError = (state: RootState) => {\n  return allFilmsSlice(state).errMsg;\n};\n\n\nexport const getAllFilmsWithFavorites = createSelector(\n  selectAll,\n  selectAllByEpId,\n  (allFilms: ResultProperty<StarwarsFilm>[], favFilmsMap: FavoriteMoviesObjList): ResultProperty<StarwarsFilm>[] => {\n    const result = getSortedFilmsWithFavorited(allFilms, favFilmsMap);\n    return result;\n  }\n);\n\nexport const getFetchParams = createSelector(\n  selectApiParams,\n  (params: HttpParams | undefined) => {\n    let p = {\n      ...params\n    };\n    const keys = Object.keys(p);\n    keys.forEach((key) => {\n      const value = `${p[key]}`.trim();\n      if (value === '') {\n        delete p[key];\n      }\n    });\n    return p;\n  }\n);","import { createSelector, createAction } from \"@reduxjs/toolkit\";\nimport { FavoriteMoviesObjList, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { RootState } from \"src/store/appStore\";\nimport produce from 'immer';\nimport { adapter } from \"./favorites.reducer\";\n\nconst favoriteFilmsSlice = (state: RootState) => {\n  return state.favoriteFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  adapter.getSelectors((state: RootState) => state.favoriteFilms);\n\nexport const selectIsLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).loading;\n};\n\nexport const selectIsFirstTimeLoading = (state: RootState) => {\n  return favoriteFilmsSlice(state).firstTimeLoading;\n};\n\nexport const selectError = (state: RootState) => {\n  return favoriteFilmsSlice(state).error;\n};\n\nexport const selectErrorMsg = (state: RootState) => {\n  return favoriteFilmsSlice(state).errMsg;\n};\n\nexport const selectAllByEpId = createSelector(\n  selectAll,\n  (state: FavoriteToSave[]): FavoriteMoviesObjList => {\n    const allFavs = state;\n    const transformedData: FavoriteMoviesObjList = {};\n    allFavs.forEach((fav: FavoriteToSave) => {\n      transformedData[fav.episodeId] = {\n        ...fav\n      };\n    });\n    return transformedData;\n  }\n);\n\nexport const selectFavorited = createSelector(\n  selectAll,\n  (allFavs: FavoriteToSave[]) => {\n    const result: FavoriteToSave[] = produce(allFavs, (draft) => {\n      return draft.filter((fav) => {\n        return !!fav.isCurrentFavorite;\n      });\n    });\n    return result;\n  }\n);","import { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport moment from 'moment';\nimport produce from 'immer';\nimport { Dictionary } from \"@reduxjs/toolkit\";\n\n\nexport const getFilmFavoriteToggleTooltip = (favorited?: FavoriteToSave) => {\n  let tooltip: string = '';\n  const dateFromNow = favorited?.lastUpdated ? (moment(favorited?.lastUpdated).fromNow()) : ('');\n\n  if (favorited?.isCurrentFavorite) {\n    tooltip = 'Remove from favorites';\n  } else {\n    tooltip = 'Add to favorites';\n  }\n\n  if (favorited?.lastUpdated) {\n    tooltip = tooltip + '. ' + (favorited.isCurrentFavorite ? 'Favorited ' : 'Unfavorited ') + dateFromNow;\n  }\n\n  return tooltip;\n};\n\nexport const getSortedFilmsWithFavorited = (allFilms: ResultProperty<StarwarsFilm>[] | undefined, favorited: Dictionary<FavoriteToSave>): ResultProperty<StarwarsFilm>[] => {\n  const result = produce((allFilms ?? []), (draft: ResultProperty<StarwarsFilm>[]) => {\n    draft.sort((prev: ResultProperty<StarwarsFilm>, next: ResultProperty<StarwarsFilm>) => {\n      return prev.properties.episode_id > next.properties.episode_id ? 1 : -1;\n    });\n    draft.forEach((res: ResultProperty<StarwarsFilm>) => {\n      res.properties.favorite = favorited[res.properties.episode_id];\n    });\n  });\n\n  return result;\n};","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n","import axios, { AxiosResponse } from 'axios';\nimport { sleep } from \"../utils/sleep\";\n\nexport const httpGet = async <T>(url: string, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json'\n    });\n\n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error) {\n    console.error(\"App fetcher GET error:\", error);\n    throw error;\n  }\n};\n\n\nexport const httpGetCancellable = async <T>(url: string, abortController: AbortController, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json',\n      signal: abortController.signal\n    });\n    \n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error: any) {\n    if (error.code !== \"ERR_CANCELED\") {\n      console.error(\"App fetcher GET error:\", error);\n    }\n    throw error;\n  }\n};","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["AXIOS_ERROR_CODE","params","refetch","useState","url","setUrl","abortControllerRef","useRef","AbortController","useDeepCompareEffect","restUrl","urlcat","BASE_SW_API","current","abort","useSWR","httpGetCancellable","revalidateOnFocus","revalidateIfStale","keepPreviousData","shouldRetryOnError","data","isValidating","error","isLoading","allFilms","result","allFilmsLoading","allFilmsValidating","allFilmsError","AllMovieLayout","dispatch","useAppDispatch","apiParams","useAppSelector","fromAllFilmsSelectors","useFetchMovies","useEffect","fromAllFilmsActions","code","ERR_CANCELED","allFilmsSlice","fetchFailure","fetchPayloadSuccess","setValidating","setLoading","setParams2","state","fromFilmsReducer","selectAll","selectIsLoading","selectById","selectEntities","selectIds","selectTotal","selectIsValidating","selectError","errMsg","getAllFilmsWithFavorites","createSelector","selectAllByEpId","favFilmsMap","getSortedFilmsWithFavorited","getFetchParams","p","Object","keys","forEach","key","trim","favoriteFilmsSlice","favoriteFilms","adapter","loading","selectIsFirstTimeLoading","firstTimeLoading","transformedData","fav","episodeId","selectFavorited","allFavs","produce","draft","filter","isCurrentFavorite","getFilmFavoriteToggleTooltip","favorited","tooltip","dateFromNow","lastUpdated","moment","fromNow","sort","prev","next","properties","episode_id","res","favorite","sleep","time","Promise","resolve","reject","setTimeout","httpGet","slow","axios","headers","responseType","status","console","abortController","signal","useDispatch","useSelector"],"sourceRoot":""}