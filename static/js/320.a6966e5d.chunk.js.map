{"version":3,"file":"static/js/320.a6966e5d.chunk.js","mappings":"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","sources":["core/hooks/useFetchMovies.ts","core/store/all-films/films.actions.ts","core/movies/AllMoviesLayout.tsx","core/store/all-films/films.selectors.ts","shared/utils/sleep.js","shared/fetcber/axios.ts","store/appHook.ts"],"sourcesContent":["import { FetchMovieHookProp } from \"src/shared/models/core-props.model\";\nimport useSWR from \"swr\";\nimport { useRef, useState } from \"react\";\nimport { useDeepCompareEffect } from \"react-use\";\nimport urlcat from \"urlcat\";\nimport { httpGetCancellable } from \"src/shared/fetcber/axios\";\nimport { HttpResponse2List, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\n\n\nconst useFetchMovies = ({ params={refetch: 0} }: FetchMovieHookProp) => {\n  \n  const [url, setUrl] = useState<string>();\n  const abortControllerRef = useRef<AbortController>(new AbortController());\n\n  useDeepCompareEffect(() => {\n    const restUrl = urlcat(BASE_SW_API, '/films', { ...params });\n    abortControllerRef.current.abort();\n    abortControllerRef.current = new AbortController();\n    setUrl(restUrl);\n  }, [params]);\n\n  const { data, isValidating, error, isLoading } = useSWR(\n    () => url ? url : null, \n    (url) => httpGetCancellable<HttpResponse2List<StarwarsFilm>>(url, abortControllerRef.current),\n    {\n      revalidateOnFocus: false,\n      revalidateIfStale: true,\n      keepPreviousData: true,\n      shouldRetryOnError: true\n    }\n  );\n\n  return {\n    allFilms: data?.result,\n    allFilmsLoading: isLoading,\n    allFilmsValidating: isValidating,\n    allFilmsError: error,\n  };\n};\n\nexport default useFetchMovies;","import { map } from 'rxjs';\nimport { ajax, AjaxResponse } from 'rxjs/ajax';\nimport { HttpResponse2List, ResultProperty, StarwarsFilm } from 'src/shared/models/starwars.model';\nimport { allFilmsSlice } from './films.reducer';\n\nexport const { fetchFailure, fetchPayloadSuccess, setApiLoading, setFirstTimeLoading, setUrl } = allFilmsSlice.actions;\n\nexport const fetchAllFilmsThunk = (params: any) => {\n  return (dispatch: any, getState: any) => {\n\n    ajax<HttpResponse2List<ResultProperty<StarwarsFilm>>>('https://www.swapi.tech/api/films')\n      .pipe(\n        map((res: AjaxResponse<HttpResponse2List<ResultProperty<StarwarsFilm>>>) => {\n          return res.response;\n        })\n      )\n      .subscribe({\n        next: (res) => {\n\n        },\n        error: (err) => {\n          \n        },\n      });\n  };\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport {  Outlet } from \"react-router-dom\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport useFetchMovies from \"src/core/hooks/useFetchMovies\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport * as fromAllFilmsSelectors from '../store/all-films/films.selectors';\nimport * as fromAllFilmsActions from '../store/all-films/films.actions';\nimport { HttpParams } from \"src/shared/models/http.model\";\n\nexport default function AllMovieLayout() {\n\n  const dispatch = useAppDispatch();\n  const apiParams: HttpParams | undefined = useAppSelector(fromAllFilmsSelectors.selectApiParams);\n\n  const { allFilms, allFilmsError, allFilmsLoading, allFilmsValidating } = useFetchMovies({ params: apiParams });\n  \n  useEffect(() => {\n    dispatch(fromAllFilmsActions.fetchPayloadSuccess(allFilms ?? []));\n  }, [allFilms, dispatch]);\n\n  useEffect(() => {\n    dispatch(fromAllFilmsActions.setFirstTimeLoading(allFilmsLoading));\n  }, [allFilmsLoading, dispatch]);\n\n  useEffect(() => {\n    dispatch(fromAllFilmsActions.setApiLoading(allFilmsValidating));\n  }, [allFilmsValidating, dispatch]);\n\n  return (\n    <Outlet />\n  );\n};","import { RootState } from \"src/store/appStore\";\nimport * as fromFilmsReducer from './films.reducer';\n\nconst allFilmsSlice = (state: RootState) => {\n  return state.allFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  fromFilmsReducer.adapter.getSelectors((state: RootState) => state.allFilms);\n\nexport const selectLoading = (state: RootState) => {\n  return allFilmsSlice(state).apiLoading;\n};\n\nexport const selectFirstTimeLoading = (state: RootState) => {\n  return allFilmsSlice(state).firstTimeLoading;\n};\n\nexport const selectApiUrl = (state: RootState) => {\n  return allFilmsSlice(state).apiUrl;\n};\n\nexport const selectApiParams = (state: RootState) => {\n  return allFilmsSlice(state).apiParams;\n};","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n","import axios, { AxiosResponse } from 'axios';\nimport { sleep } from \"../utils/sleep\";\n\nexport const httpGet = async <T>(url: string, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json'\n    });\n\n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error) {\n    console.error(\"App fetcher GET error:\", error);\n    throw error;\n  }\n};\n\n\nexport const httpGetCancellable = async <T>(url: string, abortController: AbortController, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json',\n      signal: abortController.signal\n    });\n    \n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error: any) {\n    if (error.code !== \"ERR_CANCELED\") {\n      console.error(\"App fetcher GET error:\", error);\n    }\n    throw error;\n  }\n};","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["params","refetch","useState","url","setUrl","abortControllerRef","useRef","AbortController","useDeepCompareEffect","restUrl","urlcat","BASE_SW_API","current","abort","useSWR","httpGetCancellable","revalidateOnFocus","revalidateIfStale","keepPreviousData","shouldRetryOnError","data","isValidating","error","isLoading","allFilms","result","allFilmsLoading","allFilmsValidating","allFilmsError","allFilmsSlice","fetchPayloadSuccess","fetchFailure","setApiLoading","setFirstTimeLoading","AllMovieLayout","dispatch","useAppDispatch","apiParams","useAppSelector","fromAllFilmsSelectors","useFetchMovies","useEffect","fromAllFilmsActions","state","fromFilmsReducer","selectAll","selectApiParams","selectById","selectEntities","selectIds","selectTotal","sleep","time","Promise","resolve","reject","setTimeout","httpGet","slow","axios","headers","responseType","res","status","console","abortController","signal","code","useDispatch","useSelector"],"sourceRoot":""}