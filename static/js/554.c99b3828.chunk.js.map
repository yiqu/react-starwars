{"version":3,"file":"static/js/554.c99b3828.chunk.js","mappings":"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","sources":["404/ErrorPage.tsx","core/utils/films.utils.tsx","core/store/favorites/favorites.thunks.ts","core/movies/movies/MovieCard.tsx","core/movies/movies/Movies.tsx","core/shared/search/SearchAutoComplete.tsx","shared/components/date/DateDisplay.tsx","shared/components/date/DateDisplay2.tsx","shared/components/date/DateToNow.tsx","shared/components/date/DurationDisplay.tsx","shared/components/layouts/LayoutWithGutter.tsx","shared/components/progress/CircleProgress.tsx","shared/components/toolbar/Toolbar.tsx","shared/hooks/useDebounce.ts","shared/hooks/useIsMobile.ts","webpack://starwars/./src/shared/loading/full-logo/LoadingLogo.module.scss?618b","shared/loading/full-logo/LoadingLogo.tsx","shared/models/general.model.ts","store/appHook.ts","../node_modules/@mui/icons-material/Favorite.js","../node_modules/@mui/icons-material/HourglassBottom.js","../node_modules/date-fns/esm/formatDistanceToNow/index.js","../node_modules/react-use/esm/useUpdateEffect.js","../node_modules/react-use/esm/useFirstMountState.js","../node_modules/rxjs/src/internal/observable/dom/fetch.ts","../node_modules/rxjs/src/internal/operators/switchMap.ts"],"sourcesContent":["import { Box, Stack, Typography } from \"@mui/material\";\n\nexport interface ErrorPageProp {\n  reason?: string;\n  debug?: any;\n}\n\nexport default function ErrorPage({ reason, debug }: ErrorPageProp) {\n\n  return (\n    <Box marginY={ 5 } width=\"100%\">\n      <Stack direction=\"column\" spacing={ 5 } justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"h5\" sx={ {textTransform:'uppercase'} }>\n          An error has occurred!\n        </Typography>\n\n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            REASON\n          </Typography>\n          <Typography variant=\"body2\">\n            { reason }\n          </Typography>\n        </Stack>\n        \n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            DEBUG\n          </Typography>\n          <Typography variant=\"body2\" component=\"div\">\n            <pre>\n              <code style={ {display: 'flex', textAlign: 'center'} }>\n                { JSON.stringify(debug) }\n              </code>\n            </pre>\n          </Typography>\n        </Stack>\n      </Stack>\n    </Box>\n  );\n};","import { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport moment from 'moment';\nimport produce from 'immer';\nimport { Dictionary } from \"@reduxjs/toolkit\";\n\n\nexport const getFilmFavoriteToggleTooltip = (favorited?: FavoriteToSave) => {\n  let tooltip: string = '';\n  const dateFromNow = favorited?.lastUpdated ? (moment(favorited?.lastUpdated).fromNow()) : ('');\n\n  if (favorited?.isCurrentFavorite) {\n    tooltip = 'Remove from favorites';\n  } else {\n    tooltip = 'Add to favorites';\n  }\n\n  if (favorited?.lastUpdated) {\n    tooltip = tooltip + '. ' + (favorited.isCurrentFavorite ? 'Favorited ' : 'Unfavorited ') + dateFromNow;\n  }\n\n  return tooltip;\n};\n\nexport const getSortedFilmsWithFavorited = (allFilms: ResultProperty<StarwarsFilm>[] | undefined, favorited: Dictionary<FavoriteToSave>): ResultProperty<StarwarsFilm>[] => {\n  const result = produce((allFilms ?? []), (draft: ResultProperty<StarwarsFilm>[]) => {\n    draft.sort((prev: ResultProperty<StarwarsFilm>, next: ResultProperty<StarwarsFilm>) => {\n      return prev.properties.episode_id > next.properties.episode_id ? 1 : -1;\n    });\n    draft.forEach((res: ResultProperty<StarwarsFilm>) => {\n      res.properties.favorite = favorited[res.properties.episode_id];\n    });\n  });\n\n  return result;\n};","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { lastValueFrom, map, switchMap } from \"rxjs\";\nimport { ajax, AjaxResponse } from \"rxjs/ajax\";\nimport { BASE_FIREBASE_URL } from \"src/shared/api/endpoints\";\nimport { HttpParams, HttpParamsWithSearch } from \"src/shared/models/http.model\";\nimport { FavoriteMoviesObjList, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport urlcat from \"urlcat\";\nimport { fromFetch } from 'rxjs/fetch';\nimport { ToggleFavoriteArg } from \"./favorites.state\";\nimport { FirebasePostPayload } from \"src/shared/models/firebase.model\";\n\n/** ASYNC THUNKS */\n\n/**\n * Thunk - Fetch favorite films with params\n * Behavior: Merge\n */\nexport const fetchFavoritesThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Switch] Get all favorites with params',\n  async (thunkParams: HttpParamsWithSearch | undefined, thunkAPI) => {\n\n    let restUrl = urlcat(BASE_FIREBASE_URL, '/swdb/:user/favorites.json', { ...thunkParams?.httpParams });\n    \n    const obs$ = fromFetch(restUrl, {\n      signal: thunkAPI.signal,\n    }).pipe(\n      switchMap((res: Response) => {\n        if (res.ok) {\n          return res.json() as Promise<FavoriteMoviesObjList>;\n        }\n        throw new Error('API Error: ' + res.status);\n      })\n    );\n\n    const favs = await lastValueFrom(obs$);\n    return favs;\n  },\n);\n\n/**\n * Thunk - Toggle favorite status\n * Behavior: exhaust\n */\nexport const toggleFavoriteExhaustThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Exhaust] Toggle favorite',\n  async (thunkParams: ToggleFavoriteArg, thunkAPI) => {\n    const fav = {\n      ...thunkParams.fav,\n      lastUpdated: new Date().getTime(),\n      isCurrentFavorite: thunkParams.favStatus,\n    };\n    const obs$ = ajax.put<FavoriteToSave>(thunkParams.url, fav).pipe(\n      map((res: AjaxResponse<FavoriteToSave>) => {\n        return res.response;\n      })\n    );\n    return lastValueFrom(obs$);\n  },\n  {\n    condition: (args: HttpParams, thunkAPI) => {\n      const isLoading = true; // check if it is loading\n      return !isLoading;\n    },\n  }\n);\n\n/**\n * Thunk - Toggle favorite status\n * Chain - GET favorites\n * Behavior: Merge\n */\nexport const toggleFavoriteThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Merge] Toggle favorite',\n  async (thunkParams: ToggleFavoriteArg, thunkAPI) => {\n    const fav = {\n      ...thunkParams.fav,\n      lastUpdated: new Date().getTime(),\n      isCurrentFavorite: thunkParams.favStatus,\n    };\n    const obs$ = ajax.put<FavoriteToSave>(thunkParams.url, fav).pipe(\n      map((res: AjaxResponse<FavoriteToSave>) => {\n        return res.response;\n      })\n    );\n\n    const toggleFavoriteResult = await lastValueFrom(obs$);\n    thunkAPI.dispatch(fetchFavoritesThunk({httpParams: {user: 'yqu'}}));\n    return toggleFavoriteResult;\n  },\n  {\n    condition: (args: HttpParams, thunkAPI) => {\n      return true;\n    },\n  }\n);\n\n/**\n * Thunk - Add a new favorite film\n * Behavior: exhaust\n */\nexport const addNewFavoriteExhaustThunk = createAsyncThunk(\n  '[FAVORITE FILMS / API / Exhaust] Add new favorite',\n  async (thunkParams: ToggleFavoriteArg, thunkAPI) => {\n    const fav = {\n      ...thunkParams.fav,\n      lastUpdated: new Date().getTime(),\n      isCurrentFavorite: thunkParams.favStatus,\n    };\n    const obs$ = ajax.post<FirebasePostPayload>(thunkParams.url, fav).pipe(\n      map((res: AjaxResponse<FirebasePostPayload>) => {\n        return res.response;\n      })\n    );\n    return lastValueFrom(obs$);\n  },\n  {\n    condition: (args: HttpParams, thunkAPI) => {\n      const isLoading = true; // check if it is loading\n      return !isLoading;\n    },\n  }\n);\n\n\nexport const removeFalseyValueFromObject = (obj?: HttpParams): HttpParams | undefined  => {\n  if (obj) {\n    const copy = {...obj};\n    const keysOfParams = Object.keys(copy);\n    keysOfParams.forEach((key) => {\n      if (!copy[key]) {\n        delete copy[key];\n      }\n    });\n    return copy;\n  }\n  return obj;\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Link } from \"react-router-dom\";\nimport FavIcon from '@mui/icons-material/Favorite';\nimport HourglassBottomIcon from '@mui/icons-material/HourglassBottom';\nimport IconButton from '@mui/material/IconButton';\nimport { useEffect, useState } from 'react';\nimport { Box, Stack } from \"@mui/material\";\nimport { getFilmFavoriteToggleTooltip } from \"src/core/utils/films.utils\";\nimport DateDisplay from \"src/shared/components/date/DateDisplay\";\nimport { StarwarsFilm, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { BASE_FIREBASE_URL } from \"src/shared/api/endpoints\";\nimport { axiosPost, axiosPut } from 'src/shared/rest/axios';\nimport urlcat from \"urlcat\";\nimport { AxiosResponse } from \"axios\";\nimport { useAppDispatch } from 'src/store/appHook';\nimport { addNewFavoriteExhaustThunk, fetchFavoritesThunk, toggleFavoriteExhaustThunk } from 'src/core/store/favorites/favorites.thunks';\nimport { FulfilledAction } from 'src/shared/models/redux.model';\nimport { ToggleFavoriteArg } from 'src/core/store/favorites/favorites.state';\n\nexport interface StarwarsFilmCardProps {\n  film: StarwarsFilm;\n  favoriteData?: FavoriteToSave;\n  uid: string;\n  userId: string;\n  allFavoritesLoading?: boolean;\n  favToggleLoading?: boolean;\n}\n\nexport default function MovieCard({ film, favoriteData, uid, userId, allFavoritesLoading, favToggleLoading }: StarwarsFilmCardProps) {\n  const dispatch = useAppDispatch();\n\n  const favoriteToggleHandler = () => {\n    const { url: filmUrl } = film;\n    const filmId = (filmUrl.split(\"/\"))[filmUrl.split(\"/\").length - 1];\n    const restUrl: string = urlcat(\n      BASE_FIREBASE_URL, \n      `swdb/:user/favorites${film.favorite?.fireId ? ('/'+film.favorite?.fireId) :''}.json`, \n      { user: userId }\n    );\n\n    const favorite: FavoriteToSave = {\n      filmUrl,\n      filmId,\n      lastUpdated: new Date().getTime(),\n      episodeId: film.episode_id,\n      isCurrentFavorite: true,\n    };\n\n    let promise;\n    if (film.favorite) {\n      favorite.isCurrentFavorite = !film.favorite.isCurrentFavorite;\n      favorite.fireId = film.favorite.fireId;\n      promise = dispatch(toggleFavoriteExhaustThunk({\n        fav: favorite,\n        url: restUrl,\n        favStatus: !film.favorite.isCurrentFavorite\n      }));\n    } else {\n      promise = dispatch(addNewFavoriteExhaustThunk({\n        fav: favorite,\n        url: restUrl,\n        favStatus: true\n      }));\n    }\n    promise.then((_) => dispatch(fetchFavoritesThunk({httpParams: {user: 'yqu'}})));\n  };\n\n  return (\n    <Card sx={ {display:'flex',\n      flexDirection:'column', \n      justifyContent:'space-between'} } \n      elevation={ 2 }\n    >\n      <div>\n        <CardMedia\n          component=\"img\"\n          alt=\"poster\"\n          height=\"440\"\n          image={ `${process.env.PUBLIC_URL}/assets/poster-img/${film.episode_id}.png` }\n          sx={ {backgroundColor: '#000', objectFit: 'contain'} }\n        />\n        <CardContent>\n          <Stack direction={ {lg: 'column', xl: 'row'} } justifyContent={ {xl:'space-between', lg:'flex-start'} }\n            marginBottom={ {lg:'10px', xl: '0px'} }>\n            <Typography gutterBottom variant=\"h5\" component={ Link } to={ `./${uid}` } sx={ {\n              fontWeight:'500'} }>\n              { film.title }\n            </Typography>\n            <Typography variant=\"h5\" color='text.secondary' sx={ {fontWeight: '300'} }>\n              EP { film.episode_id }\n            </Typography>\n          </Stack>\n          \n          <Stack spacing={ 1 }>\n            <Stack direction=\"row\" spacing={ 0.5 }>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                Released:\n              </Typography>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                <DateDisplay date={ film.release_date } format=\"MMM Do YYYY\" />\n              </Typography>\n            </Stack>\n            \n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Directed by: { film.director }\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              Produced by: { film.producer }\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.primary\">\n              { film.opening_crawl }\n            </Typography>\n          </Stack>\n          \n        </CardContent>\n      </div>\n      \n      <CardActions sx={ {display: 'flex', justifyContent: 'space-between'} }>\n        <div>\n          <Button size=\"small\" component={ Link } to={ `./${uid}` }>\n            See More\n          </Button>\n        </div>\n        <div>\n          <IconButton \n            aria-label=\"favorite\" \n            onClick={ favoriteToggleHandler } \n            title={ getFilmFavoriteToggleTooltip(favoriteData) }\n            disabled={ !!(allFavoritesLoading) } >\n            { (allFavoritesLoading) ? <HourglassBottomIcon /> : <FavIcon color={ favoriteData?.isCurrentFavorite ? 'error' : 'disabled' } />}\n          </IconButton>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};","import React, { useContext } from \"react\";\nimport { Box, Button, IconButton, Stack, Tooltip, Typography } from \"@mui/material\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { useCallback, useMemo, useState, useEffect } from \"react\";\nimport { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport MovieCard from \"./MovieCard\";\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport { starwarsFilmsApi, useFetchFilmsQuery } from \"src/core/store/swapi-films/swapi-films\";\nimport LoadingLogo from \"src/shared/loading/full-logo/LoadingLogo\";\nimport SearchAutoComplete from \"src/core/shared/search/SearchAutoComplete\";\nimport LayoutWithGutter from \"src/shared/components/layouts/LayoutWithGutter\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { RefreshOutlined } from \"@mui/icons-material\";\nimport DurationDisplay from \"src/shared/components/date/DurationDisplay\";\nimport DateToNow from \"src/shared/components/date/DateToNow\";\nimport DateDisplay2 from \"src/shared/components/date/DateDisplay2\";\nimport { Tooltip as Tooltip2 } from 'react-tooltip';\nimport { starwarsFavoritesApi, useFetchFavoritesQuery } from \"src/core/store/favorites/favorites.api\";\n\nconst userId = 'yqu';\nconst ENTITY_NAME = \"films\";\n\n\nconst Movies = () => {\n  const dispatch = useAppDispatch();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const currentDisplayModeUrl = searchParams.get(\"moviePageDisplayMode\");\n  const { isMobile } = useScreenSize();\n  const navigate = useNavigate();\n  \n  const [filmPageDisplayMode, setFilmPageDisplayMode] = useState<string | null>(currentDisplayModeUrl);\n  const { data: favorites, isLoading: isFavLoading, isFetching: isFavFetching } = useFetchFavoritesQuery();\n  const { data, dataWithFavs, isLoading, isFetching, fulfilledTimeStamp, startedTimeStamp, refetch, isError, error } = useFetchFilmsQuery(undefined, {\n    selectFromResult: (data) => {\n      return {\n        ...data,\n        dataWithFavs: data.data?.map((film) => {\n          const fav = favorites?.find((fav) => {\n            return fav.episodeId === film.properties.episode_id;\n          });\n          return {\n            ...film,\n            favorite: fav\n          };\n        }).sort((x, y) => {\n          return x.properties.episode_id > y.properties.episode_id ? 1 : -1;\n        })\n      };\n    }\n  });\n  \n  const fetchTimeDuration = (fulfilledTimeStamp ?? 0) - (startedTimeStamp ?? 0);\n  \n\n  const filmPageDisplayToggleHandler = () => {\n    const nextDisplayMode = {\n      moviePageDisplayMode: getNextDisplayState(filmPageDisplayMode)\n    };\n    setSearchParams(nextDisplayMode);\n  };\n\n  const onResultSelectHandler = (selection: ResultProperty<any> | null) => {\n    navigate(`./${selection?.uid}`);\n  };\n\n  const handleRefreshFilms = () => {\n    dispatch(starwarsFilmsApi.util.invalidateTags([{type: \"Films\"}]));\n  };\n\n  const handleRefreshFavorites = () => {\n    dispatch(starwarsFavoritesApi.util.invalidateTags([{type: 'Favorites'}]));\n  };\n\n  if (isLoading) return (\n    <Stack direction=\"column\" width=\"100%\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n      <LoadingLogo message={ ENTITY_NAME } />\n    </Stack>\n  );\n\n  if (isError) {\n    return <ErrorPage reason={ (error as any).status } debug={ (error as any).error } />;\n  }\n\n  if (!dataWithFavs) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n        position: \"sticky\",\n        sx: {top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 }>\n          <Grid xs={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n              <SearchAutoComplete entity={ ENTITY_NAME } onResultSelect={ onResultSelectHandler } />\n            </Stack>\n          </Grid>\n          <Grid xs={ 8 } xsOffset=\"auto\" display=\"flex\">\n            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\" width=\"100%\" spacing={ 2 } data-tooltip-id=\"fetch-information\">\n              { isFetching && <CircularProgress size={ 20 } /> }\n              { !isFetching && <Typography fontSize={ 11 } component=\"div\">\n                Last fetched <DateDisplay2 dateInMilli={ fulfilledTimeStamp ?? 0 } />, took: <DurationDisplay durationInMilli={ fetchTimeDuration } />\n              </Typography> }\n              <Button variant=\"outlined\" startIcon={ <RefreshOutlined /> } onClick={ handleRefreshFavorites }>\n                Refresh Favorites\n              </Button>\n              <Button variant=\"outlined\" startIcon={ <RefreshOutlined /> } onClick={ handleRefreshFilms }>\n                Refresh Films\n              </Button>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n      <Box mt={ 2 } mx={ isMobile ? 2 : 0 }>\n        <LayoutWithGutter size={ 'med' }>\n          { dataWithFavs?.map((film) => {\n            return (\n              <Grid key={ film.properties.episode_id } xs={ 12 } sm={ 8 } smOffset={ 2 } mb={ 3 }>\n                <MovieCard \n                  userId={ userId }\n                  film={ film.properties }\n                  favoriteData = { film.favorite }\n                  uid={ film.uid }\n                  allFavoritesLoading={ isFavLoading }\n                  favToggleLoading={ isFavFetching } />\n              </Grid>\n            );\n          }) }\n        </LayoutWithGutter>\n      </Box>\n      <Tooltip2 id=\"fetch-information\" place=\"bottom\" offset={ 30 }>\n        <Stack direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <Box>\n            Last fetched: <DateDisplay2 dateInMilli={ fulfilledTimeStamp } /> ( <DateToNow dateInMilli={ fulfilledTimeStamp } /> ago ).\n          </Box>\n        </Stack>\n      </Tooltip2>\n    </Stack>\n  );\n};\n\nexport default Movies;\n\nconst getNextDisplayState = (current: any) => {\n  if (!current) {\n    return DataBlockDisplayMode.CARD;\n  }\n  return current === DataBlockDisplayMode.CARD ? DataBlockDisplayMode.TABLE : DataBlockDisplayMode.CARD;\n};\n","import { Autocomplete, AutocompleteRenderInputParams, InputAdornment, TextField, Stack, Box } from \"@mui/material\";\nimport { skipToken } from \"@reduxjs/toolkit/query/react\";\nimport { useEffect, useState } from \"react\";\nimport { useUpdateEffect } from \"react-use\";\nimport { useSearchContentQuery } from \"src/core/store/swapi/swapi\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { useDebounce } from \"src/shared/hooks/useDebounce\";\nimport { ResultProperty, StarwarsSearchable } from \"src/shared/models/starwars.model\";\n\nexport interface SearchAutoCompleteProps {\n  entity: string;\n  onResultSelect: (selection: ResultProperty<StarwarsSearchable> | null) => void;\n}\n\nfunction SearchAutoComplete({ entity, onResultSelect }: SearchAutoCompleteProps) {\n\n  // dropdown options\n  const [options, setOptions] = useState<readonly ResultProperty<StarwarsSearchable>[]>([]);\n  // dropdown selection\n  const [value, setValue] = useState<ResultProperty<StarwarsSearchable> | null>(null);\n  // user text input\n  const [inputValue, setInputValue] = useState<string | null>(null);\n  const debouncedInputValue = useDebounce<string | null>(inputValue, 600);\n\n  const { data, isFetching, error, isError, refetch } = useSearchContentQuery(debouncedInputValue ? {\n    entity,\n    name: debouncedInputValue\n  } : skipToken);\n  \n  useEffect(() => {\n    setOptions(data ?? []);\n  }, [data]);\n\n  useUpdateEffect(() => {\n  }, [debouncedInputValue]);\n\n  /**\n   * Drop down selection change\n   * @param selected selected from dropdown\n   */\n  const onChangeHandler = (selected: ResultProperty<StarwarsSearchable> | null) => {\n    setOptions(selected ? [selected] : options);\n    setValue(selected);\n    onResultSelect(selected);\n  };\n\n  /**\n   * Input text change\n   * @param event \n   * @param value user's input text\n   */\n  const onInputChangeHandler = (event: any, value: string) => {\n    setInputValue(value);\n  };\n\n  const onRenderOption = (props: any, option: any) => {\n  };\n\n  return (\n    <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n      <Autocomplete\n        disablePortal\n        id=\"search-entity-autocomplete\"\n        options={ options }\n        fullWidth\n        autoHighlight\n        blurOnSelect\n        filterOptions={ (x) => x }\n        value={ value }\n        getOptionLabel={ (option) => {\n          return option.properties.name ?? option.properties.title;\n        } }\n        noOptionsText = { `Search for ${entity}` }\n        loading= { isFetching }\n        renderInput={ (params: AutocompleteRenderInputParams) => <AutoCompleteTextField params={ params } entity={ entity } /> }\n        onChange={ (event: any, newValue: ResultProperty<StarwarsSearchable> | null) => {\n          onChangeHandler(newValue);\n        } }\n        onInputChange={ (event, newInputValue) => onInputChangeHandler(event, newInputValue) }\n        isOptionEqualToValue = { (option: ResultProperty<StarwarsSearchable>, value: ResultProperty<StarwarsSearchable>) => { return option.uid === value.uid; } }\n      />\n      <Box ml={ 2 }>\n        { isFetching && <ProgressCircle size={ 20 } /> }\n      </Box>\n    </Stack>\n  );\n}\n\nexport default SearchAutoComplete;\n\nfunction AutoCompleteTextField({params, entity}: {params: AutocompleteRenderInputParams, entity: string}) {\n  return (\n    <TextField { ...params } label={ `Filter ${entity}` } variant=\"standard\" />\n  );\n}","import { Box, Tooltip, Typography } from '@mui/material';\nimport Moment from 'react-moment';\nimport moment from 'moment';\n\nexport interface DateDisplayProp {\n  date: string | number;\n  fromNow?: boolean;\n  format?: string;\n}\n\nconst DateDisplay = ({ date=0, fromNow=true, format=\"MM/DD/YY HH:mm\" }: DateDisplayProp) => {\n\n  return (\n    <Tooltip title={ date ? moment(date).format(format) : 'No date found' }>\n      <Typography component=\"span\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        {date ? (<Moment date={ date } fromNow={ fromNow } format={ fromNow ? undefined: format } interval={ 60000 } />) : (<>N/A</>)}\n      </Typography>\n    </Tooltip>\n  );\n};\n\nexport default DateDisplay;","import { format } from 'date-fns';\n\n\nexport interface DateDisplay2Props {\n  dateInMilli: number | undefined;\n}\n\nfunction DateDisplay2({ dateInMilli }: DateDisplay2Props) {\n  return (\n    <>\n      { (dateInMilli !== undefined) && format(dateInMilli, 'MM/dd/yyyy p') }\n    </>\n  );\n};\n\nexport default DateDisplay2;","import { formatDistanceToNow } from 'date-fns';\n\nexport interface DateDisplay2Props {\n  dateInMilli: number | undefined;\n}\n\nfunction DateToNow({ dateInMilli }: DateDisplay2Props) {\n  return (\n    <>\n      { (dateInMilli !== undefined) && formatDistanceToNow(dateInMilli, { includeSeconds: true }) }\n    </>\n  );\n};\n\nexport default DateToNow;","import { formatDistance } from 'date-fns';\n\n\nexport interface DurationDisplayProps {\n  durationInMilli: number;\n}\n\nfunction DurationDisplay({ durationInMilli }: DurationDisplayProps) {\n  return (\n    <>\n      { (durationInMilli > 1000) ? (formatDistance(0, durationInMilli, { includeSeconds : true })) : (durationInMilli + ' ms') }\n    </>\n  );\n};\n\nexport default DurationDisplay;","import Grid from '@mui/material/Unstable_Grid2';\nimport { ReactNode } from 'react';\n\nexport interface LayoutGutterProps {\n  children: ReactNode;\n  size?: \"full\" | \"med\" | \"skinny\"\n}\n\nfunction LayoutWithGutter({ size = \"med\", children }: LayoutGutterProps) {\n\n  return (\n    // <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } sm={ sizes.width } smOffset={ sizes.offset }>\n    //   { children }\n    // </Grid>\n    <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } \n      sm={ size==='full' ? 12 : (size === 'med' ? 7 : (4)) } \n      smOffset={ size==='full' ? 0 : (size === 'med' ? 2.5 : (4)) }>\n      { children }\n    </Grid>\n  );\n}\n\nexport default LayoutWithGutter;","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Theme } from '@emotion/react';\nimport { SxProps } from '@mui/material';\n\nexport default function ProgressCircle({ size=40, color='grey.500', styleProps }: {size?: number, color?: string, styleProps?: SxProps<Theme>}) {\n  return (\n    <Stack sx={ { color: color, ...styleProps } } spacing={ 1 } direction=\"row\">\n      <CircularProgress color=\"inherit\" size={ size } />\n    </Stack>\n  );\n}","import { AppBar, Stack, Button, Tooltip, IconButton, AppBarTypeMap } from \"@mui/material\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport Toolbar from '@mui/material/Toolbar';\nimport { GREY } from \"src/theme/palette\";\n\ninterface ToolbarProps {\n  toolbarProps: any;\n  children: any;\n}\n\nexport default function AppToolbar({ toolbarProps, children }: ToolbarProps) {\n  \n  return (\n    <AppBar elevation={ 0 } { ...toolbarProps }>\n      <Toolbar \n        variant=\"regular\" \n        sx={ {bgcolor: (theme) => theme.palette.mode === 'light' ? GREY[100] : null, \n          color: (theme) => theme.palette.mode === 'light' ? '#000' : null,\n          pr: 0\n        } }>\n        { children }\n      </Toolbar>\n    </AppBar>\n  );\n}","import { useState, useEffect } from \"react\";\n\nexport const useDebounce = <T>(value: T, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * A media query string\n * which matches screen widths less than the screen size given by the breakpoint key (down)\n * @returns \n */\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.down('md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.down('lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.down('xl'));\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize\n  };\n\n};\n\nexport default useScreenSize;","// extracted by mini-css-extract-plugin\nexport default {\"parentClass\":\"LoadingLogo_parentClass__NFHXT\",\"loadingLogo\":\"LoadingLogo_loadingLogo__BqUtz\",\"loadingParent\":\"LoadingLogo_loadingParent__VASnq\",\"loading-container\":\"LoadingLogo_loading-container__cjLsJ\",\"whole-page\":\"LoadingLogo_whole-page__DkCG7\",\"ldsFacebook\":\"LoadingLogo_ldsFacebook__pRdY2\",\"lds-facebook\":\"LoadingLogo_lds-facebook__JLntj\"};","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useReducer, useState, useContext, useMemo, Suspense } from 'react';\nimport classes from './LoadingLogo.module.scss';\nimport logo from '../../../static/img/death-star.png';\n\nexport interface LoadingLogoProps {\n  message: string;\n  children?: any;\n}\n\nexport default function LoadingLogo(props: LoadingLogoProps) {\n\n\n  return (\n    <div className={ `${classes.parentClass} w-100` }>\n      <div>\n        <div className={ classes.loadingLogo }>\n          <img src={ logo }\n            className={ `${classes.logoImg} d-inline-block` } alt=\"logo\" />\n        </div>\n    \n      </div>\n      <div className={ classes.loadingParent }>\n        <div className={ classes.ldsFacebook }><div></div><div></div><div></div></div>\n      </div>\n      <div className={ classes.secfont }>\n        Loading {props.message} ...\n      </div>\n    </div>\n  );\n};","export enum DataBlockDisplayMode {\n  TABLE = \"table\",\n  CARD = \"card\"\n}","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n}), 'Favorite');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m18 22-.01-6L14 12l3.99-4.01L18 2H6v6l4 4-4 3.99V22h12zM8 7.5V4h8v3.5l-4 4-4-4z\"\n}), 'HourglassBottom');\n\nexports.default = _default;","import distanceInWords from \"../formatDistance/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport default function formatDistanceToNow(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), options);\n}","import { useEffect } from 'react';\nimport { useFirstMountState } from './useFirstMountState';\nvar useUpdateEffect = function (effect, deps) {\n    var isFirstMount = useFirstMountState();\n    useEffect(function () {\n        if (!isFirstMount) {\n            return effect();\n        }\n    }, deps);\n};\nexport default useUpdateEffect;\n","import { useRef } from 'react';\nexport function useFirstMountState() {\n    var isFirst = useRef(true);\n    if (isFirst.current) {\n        isFirst.current = false;\n        return true;\n    }\n    return isFirst.current;\n}\n","import { createOperatorSubscriber } from '../../operators/OperatorSubscriber';\nimport { Observable } from '../../Observable';\nimport { innerFrom } from '../../observable/innerFrom';\nimport { ObservableInput } from '../../types';\n\nexport function fromFetch<T>(\n  input: string | Request,\n  init: RequestInit & {\n    selector: (response: Response) => ObservableInput<T>;\n  }\n): Observable<T>;\n\nexport function fromFetch(input: string | Request, init?: RequestInit): Observable<Response>;\n\n/**\n * Uses [the Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to\n * make an HTTP request.\n *\n * **WARNING** Parts of the fetch API are still experimental. `AbortController` is\n * required for this implementation to work and use cancellation appropriately.\n *\n * Will automatically set up an internal [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController)\n * in order to finalize the internal `fetch` when the subscription tears down.\n *\n * If a `signal` is provided via the `init` argument, it will behave like it usually does with\n * `fetch`. If the provided `signal` aborts, the error that `fetch` normally rejects with\n * in that scenario will be emitted as an error from the observable.\n *\n * ## Examples\n *\n * Basic use\n *\n * ```ts\n * import { fromFetch } from 'rxjs/fetch';\n * import { switchMap, of, catchError } from 'rxjs';\n *\n * const data$ = fromFetch('https://api.github.com/users?per_page=5').pipe(\n *   switchMap(response => {\n *     if (response.ok) {\n *       // OK return data\n *       return response.json();\n *     } else {\n *       // Server is returning a status requiring the client to try something else.\n *       return of({ error: true, message: `Error ${ response.status }` });\n *     }\n *   }),\n *   catchError(err => {\n *     // Network or other error, handle appropriately\n *     console.error(err);\n *     return of({ error: true, message: err.message })\n *   })\n * );\n *\n * data$.subscribe({\n *   next: result => console.log(result),\n *   complete: () => console.log('done')\n * });\n * ```\n *\n * ### Use with Chunked Transfer Encoding\n *\n * With HTTP responses that use [chunked transfer encoding](https://tools.ietf.org/html/rfc7230#section-3.3.1),\n * the promise returned by `fetch` will resolve as soon as the response's headers are\n * received.\n *\n * That means the `fromFetch` observable will emit a `Response` - and will\n * then complete - before the body is received. When one of the methods on the\n * `Response` - like `text()` or `json()` - is called, the returned promise will not\n * resolve until the entire body has been received. Unsubscribing from any observable\n * that uses the promise as an observable input will not abort the request.\n *\n * To facilitate aborting the retrieval of responses that use chunked transfer encoding,\n * a `selector` can be specified via the `init` parameter:\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { fromFetch } from 'rxjs/fetch';\n *\n * const data$ = fromFetch('https://api.github.com/users?per_page=5', {\n *   selector: response => response.json()\n * });\n *\n * data$.subscribe({\n *   next: result => console.log(result),\n *   complete: () => console.log('done')\n * });\n * ```\n *\n * @param input The resource you would like to fetch. Can be a url or a request object.\n * @param initWithSelector A configuration object for the fetch.\n * [See MDN for more details](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n * @returns An Observable, that when subscribed to, performs an HTTP request using the native `fetch`\n * function. The {@link Subscription} is tied to an `AbortController` for the fetch.\n */\nexport function fromFetch<T>(\n  input: string | Request,\n  initWithSelector: RequestInit & {\n    selector?: (response: Response) => ObservableInput<T>;\n  } = {}\n): Observable<Response | T> {\n  const { selector, ...init } = initWithSelector;\n  return new Observable<Response | T>((subscriber) => {\n    // Our controller for aborting this fetch.\n    // Any externally provided AbortSignal will have to call\n    // abort on this controller when signaled, because the\n    // signal from this controller is what is being passed to `fetch`.\n    const controller = new AbortController();\n    const { signal } = controller;\n    // This flag exists to make sure we don't `abort()` the fetch upon tearing down\n    // this observable after emitting a Response. Aborting in such circumstances\n    // would also abort subsequent methods - like `json()` - that could be called\n    // on the Response. Consider: `fromFetch().pipe(take(1), mergeMap(res => res.json()))`\n    let abortable = true;\n\n    // If the user provided an init configuration object,\n    // let's process it and chain our abort signals, if necessary.\n    // If a signal is provided, just have it finalized. It's a cancellation token, basically.\n    const { signal: outerSignal } = init;\n    if (outerSignal) {\n      if (outerSignal.aborted) {\n        controller.abort();\n      } else {\n        // We got an AbortSignal from the arguments passed into `fromFetch`.\n        // We need to wire up our AbortController to abort when this signal aborts.\n        const outerSignalHandler = () => {\n          if (!signal.aborted) {\n            controller.abort();\n          }\n        };\n        outerSignal.addEventListener('abort', outerSignalHandler);\n        subscriber.add(() => outerSignal.removeEventListener('abort', outerSignalHandler));\n      }\n    }\n\n    // The initialization object passed to `fetch` as the second\n    // argument. This ferries in important information, including our\n    // AbortSignal. Create a new init, so we don't accidentally mutate the\n    // passed init, or reassign it. This is because the init passed in\n    // is shared between each subscription to the result.\n    const perSubscriberInit: RequestInit = { ...init, signal };\n\n    const handleError = (err: any) => {\n      abortable = false;\n      subscriber.error(err);\n    };\n\n    fetch(input, perSubscriberInit)\n      .then((response) => {\n        if (selector) {\n          // If we have a selector function, use it to project our response.\n          // Note that any error that comes from our selector will be\n          // sent to the promise `catch` below and handled.\n          innerFrom(selector(response)).subscribe(\n            createOperatorSubscriber(\n              subscriber,\n              // Values are passed through to the subscriber\n              undefined,\n              // The projected response is complete.\n              () => {\n                abortable = false;\n                subscriber.complete();\n              },\n              handleError\n            )\n          );\n        } else {\n          abortable = false;\n          subscriber.next(response);\n          subscriber.complete();\n        }\n      })\n      .catch(handleError);\n\n    return () => {\n      if (abortable) {\n        controller.abort();\n      }\n    };\n  });\n}\n","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n *\n * Generate new Observable according to source Observable values\n *\n * ```ts\n * import { of, switchMap } from 'rxjs';\n *\n * const switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // 3\n * // 9\n * // 27\n * ```\n *\n * Restart an interval Observable on every click event\n *\n * ```ts\n * import { fromEvent, switchMap, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = createOperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subscriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n"],"names":["ErrorPage","reason","debug","marginY","width","direction","spacing","justifyContent","alignItems","variant","sx","textTransform","fontWeight","component","style","display","textAlign","JSON","stringify","getFilmFavoriteToggleTooltip","favorited","tooltip","dateFromNow","lastUpdated","moment","fromNow","isCurrentFavorite","fetchFavoritesThunk","createAsyncThunk","thunkParams","thunkAPI","restUrl","urlcat","BASE_FIREBASE_URL","httpParams","obs$","fromFetch","signal","pipe","switchMap","res","ok","json","Error","status","lastValueFrom","favs","toggleFavoriteExhaustThunk","fav","Date","getTime","favStatus","ajax","url","map","response","condition","args","addNewFavoriteExhaustThunk","toggleFavoriteResult","dispatch","user","MovieCard","film","favoriteData","uid","userId","allFavoritesLoading","favToggleLoading","useAppDispatch","Card","flexDirection","elevation","CardMedia","alt","height","image","process","episode_id","backgroundColor","objectFit","CardContent","Stack","lg","xl","marginBottom","Typography","gutterBottom","Link","to","title","color","DateDisplay","date","release_date","format","director","producer","opening_crawl","CardActions","Button","size","IconButton","onClick","promise","filmUrl","filmId","split","length","favorite","fireId","episodeId","then","_","disabled","HourglassBottom","ENTITY_NAME","useSearchParams","searchParams","currentDisplayModeUrl","get","isMobile","useScreenSize","navigate","useNavigate","useState","useFetchFavoritesQuery","favorites","data","isFavLoading","isLoading","isFavFetching","isFetching","useFetchFilmsQuery","undefined","selectFromResult","dataWithFavs","find","properties","sort","x","y","fulfilledTimeStamp","startedTimeStamp","isError","refetch","error","fetchTimeDuration","LoadingLogo","message","toolbarProps","position","top","container","xs","SearchAutoComplete","entity","onResultSelect","selection","xsOffset","CircularProgress","fontSize","DateDisplay2","dateInMilli","DurationDisplay","durationInMilli","startIcon","RefreshOutlined","starwarsFavoritesApi","type","starwarsFilmsApi","Box","mt","mx","LayoutWithGutter","sm","smOffset","mb","id","place","offset","DateToNow","AutoCompleteTextField","params","label","options","setOptions","value","setValue","inputValue","setInputValue","debouncedInputValue","useDebounce","useSearchContentQuery","name","skipToken","useEffect","useUpdateEffect","disablePortal","fullWidth","autoHighlight","blurOnSelect","filterOptions","getOptionLabel","option","noOptionsText","loading","renderInput","onChange","event","newValue","selected","onInputChange","newInputValue","onInputChangeHandler","isOptionEqualToValue","ml","interval","formatDistanceToNow","includeSeconds","formatDistance","children","ProgressCircle","styleProps","AppToolbar","bgcolor","theme","palette","mode","GREY","pr","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useTheme","useMediaQuery","breakpoints","down","isMed","isLg","isXl","props","className","classes","src","logo","DataBlockDisplayMode","useDispatch","useAppSelector","useSelector","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","dirtyDate","requiredArgs","arguments","distanceInWords","now","effect","deps","isFirstMount","isFirst","useRef","current","useFirstMountState","input","initWithSelector","selector","init","Observable","subscriber","controller","AbortController","abortable","outerSignal","aborted","abort","outerSignalHandler_1","addEventListener","add","removeEventListener","perSubscriberInit","handleError","err","fetch","innerFrom","subscribe","createOperatorSubscriber","complete","next","catch","project","resultSelector","operate","source","innerSubscriber","index","isComplete","checkComplete","unsubscribe","innerIndex","outerIndex","innerValue"],"sourceRoot":""}