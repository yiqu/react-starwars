{"version":3,"file":"static/js/978.a2db1071.chunk.js","mappings":"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","sources":["core/hooks/useFetchMovies.ts","core/hooks/useFetchFavorites.ts","core/utils/films.utils.tsx","core/movies/movies/MovieCard.tsx","webpack://starwars/./src/shared/loading-backdrop/LoadingBackdrop.module.scss?ef27","shared/loading-backdrop/LoadingBackdrop.tsx","shared/models/axios.model.ts","core/movies/movies/Movies.tsx","core/store/all-films/films.selectors.ts","shared/components/date/DateDisplay.tsx","shared/utils/sleep.js","shared/fetcber/axios.ts","shared/models/general.model.ts","shared/rest/axios.ts","store/appHook.ts","../node_modules/@mui/icons-material/Favorite.js","../node_modules/@mui/icons-material/HourglassBottom.js"],"sourcesContent":["import { FetchMovieHookProp } from \"src/shared/models/core-props.model\";\nimport useSWR from \"swr\";\nimport { useRef, useState } from \"react\";\nimport { useDeepCompareEffect } from \"react-use\";\nimport urlcat from \"urlcat\";\nimport { httpGetCancellable } from \"src/shared/fetcber/axios\";\nimport { HttpResponse2List, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport { BASE_SW_API } from \"src/shared/api/endpoints\";\n\n\nconst useFetchMovies = ({ params={refetch: 0} }: FetchMovieHookProp) => {\n  \n  const [url, setUrl] = useState<string>();\n  const abortControllerRef = useRef<AbortController>(new AbortController());\n\n  useDeepCompareEffect(() => {\n    const restUrl = urlcat(BASE_SW_API, '/films', { ...params });\n    abortControllerRef.current.abort();\n    abortControllerRef.current = new AbortController();\n    setUrl(restUrl);\n  }, [params]);\n\n  const { data, isValidating, error, isLoading } = useSWR(\n    () => url ? url : null, \n    (url) => httpGetCancellable<HttpResponse2List<StarwarsFilm>>(url, abortControllerRef.current),\n    {\n      revalidateOnFocus: false,\n      revalidateIfStale: true,\n      keepPreviousData: true,\n      shouldRetryOnError: true\n    }\n  );\n\n  return {\n    allFilms: data?.result,\n    allFilmsLoading: isLoading,\n    allFilmsValidating: isValidating,\n    allFilmsError: error,\n  };\n};\n\nexport default useFetchMovies;","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport useSWR from \"swr\";\nimport { FetchFavoritesHookProp } from 'src/shared/models/core-props.model';\nimport { FavoriteMoviesObjList, FavoriteToSave } from 'src/shared/models/starwars.model';\nimport React, { useEffect, useState } from \"react\";\nimport { useDeepCompareEffect } from \"react-use\";\nimport urlcat from \"urlcat\";\nimport { httpGet } from \"src/shared/fetcber/axios\";\nimport { FirebaseData } from \"src/shared/models/firebase.model\";\nimport { BASE_FIREBASE_URL } from \"src/shared/api/endpoints\";\n\nconst useFetchFavorites = ({ userId, params={} }: FetchFavoritesHookProp) => {\n\n  const [url, setUrl] = useState<string>();\n  const [transformed, setTransformed] = useState<FavoriteMoviesObjList>({});\n\n  useDeepCompareEffect(() => {\n    const restUrl = urlcat(BASE_FIREBASE_URL, '/swdb/:user/favorites.json', { user: 'yqu', ...params });\n    setUrl(restUrl);\n  }, [userId, params]);\n\n  const { data, isValidating, error, isLoading } = useSWR(\n    () => url ? url : null, \n    (url) => httpGet<FirebaseData<FavoriteToSave>>(url),\n    {\n      revalidateIfStale: true,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false\n    }\n  );\n\n  useEffect(() => {\n    const transformedData: FavoriteMoviesObjList = {};\n    if (data) {\n      const keys = Object.keys(data ?? {});\n      keys.forEach((key) => {\n        transformedData[data[key].episodeId] = {\n          fireId: key,\n          ...data[key],\n        };\n      });\n      setTransformed(transformedData);\n    }\n  }, [data]);\n  \n  return {\n    data: transformed,\n    loading: isLoading,\n    error,\n  };\n};\n\nexport default useFetchFavorites;","import { FavoriteMoviesObjList, FavoriteToSave, ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport moment from 'moment';\nimport produce from 'immer';\n\n\nexport const getFilmFavoriteToggleTooltip = (favorited?: FavoriteToSave) => {\n  let tooltip: string = '';\n  const dateFromNow = favorited?.lastUpdated ? (moment(favorited?.lastUpdated).fromNow()) : ('');\n\n  if (favorited?.isCurrentFavorite) {\n    tooltip = 'Remove from favorites';\n  } else {\n    tooltip = 'Add to favorites';\n  }\n\n  if (favorited?.lastUpdated) {\n    tooltip = tooltip + '. ' + (favorited.isCurrentFavorite ? 'Favorited ' : 'Unfavorited ') + dateFromNow;\n  }\n\n  return tooltip;\n};\n\nexport const getSortedFilmsWithFavorited = (allFilms: ResultProperty<StarwarsFilm>[] | undefined, favorited: FavoriteMoviesObjList): ResultProperty<StarwarsFilm>[] => {\n  const result = produce((allFilms ?? []), (draft: ResultProperty<StarwarsFilm>[]) => {\n    draft.sort((prev: ResultProperty<StarwarsFilm>, next: ResultProperty<StarwarsFilm>) => {\n      return prev.properties.episode_id > next.properties.episode_id ? 1 : -1;\n    });\n    draft.forEach((res: ResultProperty<StarwarsFilm>) => {\n      res.properties.favorite = favorited[res.properties.episode_id];\n    });\n  });\n\n  return result;\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Link } from \"react-router-dom\";\nimport FavIcon from '@mui/icons-material/Favorite';\nimport HourglassBottomIcon from '@mui/icons-material/HourglassBottom';\nimport IconButton from '@mui/material/IconButton';\nimport { useEffect, useState } from 'react';\nimport { Box, Stack } from \"@mui/material\";\nimport { getFilmFavoriteToggleTooltip } from \"src/core/utils/films.utils\";\nimport DateDisplay from \"src/shared/components/date/DateDisplay\";\nimport { StarwarsFilm, FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { BASE_FIREBASE_URL } from \"src/shared/api/endpoints\";\nimport { axiosPost, axiosPut } from 'src/shared/rest/axios';\nimport urlcat from \"urlcat\";\nimport { AxiosResponse } from \"axios\";\n\nexport interface StarwarsFilmCardProps {\n  film: StarwarsFilm;\n  uid: string;\n  userId: string;\n  allFavoritesLoading?: boolean;\n  reloadMovies: () => void\n}\n\nexport default function MovieCard({ film, uid, userId, allFavoritesLoading, reloadMovies }: StarwarsFilmCardProps) {\n\n  const [saveFavLoading, setSaveFavLoading] = useState<boolean>(false);\n  const [localSaveFavLoading, setLocalSaveFavLoading ] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!allFavoritesLoading) {\n      setLocalSaveFavLoading(false);\n    }\n  }, [allFavoritesLoading]);\n  \n  const favoriteToggleHandler = () => {\n    const { url: filmUrl } = film;\n    const filmId = (filmUrl.split(\"/\"))[filmUrl.split(\"/\").length - 1];\n    const restUrl: string = urlcat(\n      BASE_FIREBASE_URL, \n      `swdb/:user/favorites${film.favorite?.fireId ? ('/'+film.favorite?.fireId) :''}.json`, \n      { user: userId }\n    );\n\n    const favorite: FavoriteToSave = {\n      filmUrl,\n      filmId,\n      lastUpdated: new Date().getTime(),\n      episodeId: film.episode_id,\n      isCurrentFavorite: true,\n    };\n\n    setSaveFavLoading(true);\n    setLocalSaveFavLoading(true);\n    if (film.favorite) {\n      favorite.isCurrentFavorite = !film.favorite.isCurrentFavorite;\n      favorite.fireId = film.favorite.fireId;\n      axiosPut<AxiosResponse>({ \n        url: restUrl, \n        body: favorite, \n        onSuccess: (res) => {\n          reloadMovies();\n        },\n        onFailure: (err) => {\n        },\n        onFinally: () => {\n          setSaveFavLoading(false);\n        }\n      });\n    } else {\n      axiosPost<AxiosResponse>({ \n        url: restUrl, \n        body: favorite, \n        onSuccess: (res) => {\n          reloadMovies();\n        },\n        onFailure: (err) => {\n        },\n        onFinally: () => {\n          setSaveFavLoading(false);\n        }\n      });\n    }\n  };\n\n  return (\n    <Card sx={ {display:'flex',\n      flexDirection:'column', \n      justifyContent:'space-between'} } \n      elevation={ 2 }\n    >\n      <div>\n        <CardMedia\n          component=\"img\"\n          alt=\"poster\"\n          height=\"440\"\n          image={ `${process.env.PUBLIC_URL}/assets/poster-img/${film.episode_id}.png` }\n          sx={ {backgroundColor: '#000', objectFit: 'contain'} }\n        />\n        <CardContent>\n          <Stack direction={ {lg: 'column', xl: 'row'} } justifyContent={ {xl:'space-between', lg:'flex-start'} }\n            marginBottom={ {lg:'10px', xl: '0px'} }>\n            <Typography gutterBottom variant=\"h5\" component={ Link } to={ `./${uid}` } sx={ {fontFamily:'Poppins',\n              fontWeight:'500'} }>\n              { film.title }\n            </Typography>\n            <Typography variant=\"h5\" color='text.secondary' sx={ {fontWeight: '300'} }>\n              EP { film.episode_id }\n            </Typography>\n          </Stack>\n          \n          <Stack spacing={ 1 }>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Released: <DateDisplay date={ film.release_date } format=\"MMM Do YYYY\" />\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Directed by: { film.director }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Produced by: { film.producer }\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.primary\">\n              { film.opening_crawl }\n            </Typography>\n          </Stack>\n          \n        </CardContent>\n      </div>\n      \n      <CardActions sx={ {display: 'flex', justifyContent: 'space-between'} }>\n        <div>\n          <Button size=\"small\" component={ Link } to={ `./${uid}` }>\n            See More\n          </Button>\n        </div>\n        <div>\n          <IconButton \n            aria-label=\"favorite\" \n            onClick={ favoriteToggleHandler } \n            title={ getFilmFavoriteToggleTooltip(film.favorite) }\n            disabled={ !!(saveFavLoading || localSaveFavLoading) } >\n            { (saveFavLoading || localSaveFavLoading) ? <HourglassBottomIcon /> : <FavIcon color={ film.favorite?.isCurrentFavorite ? 'error' : 'disabled' } />}\n          </IconButton>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"loadingbackdrop\":\"LoadingBackdrop_loadingbackdrop__fzQLF\",\"spinner\":\"LoadingBackdrop_spinner__8-PXS\"};","import { Box } from \"@mui/material\";\nimport { ReactNode } from \"react\";\nimport classes from './LoadingBackdrop.module.scss';\n\nexport interface LoadingBackdropProps {\n  isLoading?: boolean;\n  children?:  ReactNode | undefined;\n}\n\nfunction LoadingBackdrop({ isLoading, children }: LoadingBackdropProps) {\n\n  return (\n    <Box className={ isLoading ? `${classes.loadingbackdrop}` :'' } width=\"100%\">\n      { children }\n    </Box>\n  );\n};\n\nexport default LoadingBackdrop;","export enum AXIOS_ERROR_CODE {\n  ERR_CANCELED = \"ERR_CANCELED\"\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useContext } from \"react\";\nimport { Box, Button, IconButton, Stack, Tooltip, Typography } from \"@mui/material\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { useCallback, useMemo, useState, useEffect } from \"react\";\nimport useFetchFavorites from \"src/core/hooks/useFetchFavorites\";\nimport useFetchMovies from \"src/core/hooks/useFetchMovies\";\nimport ProgressCircle from \"src/shared/components/progress/CircleProgress\";\nimport { HttpParams } from \"src/shared/models/http.model\";\nimport { ResultProperty, StarwarsFilm } from \"src/shared/models/starwars.model\";\nimport FilterInput from \"./filter/FilterInput\";\nimport MovieCard from \"./MovieCard\";\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport { useSearchParams } from \"react-router-dom\";\nimport TableChartIcon from '@mui/icons-material/TableChart';\nimport ViewModuleIcon from '@mui/icons-material/ViewModule';\nimport { useDeepCompareEffect } from \"react-use\";\nimport { getSortedFilmsWithFavorited } from \"src/core/utils/films.utils\";\nimport LoadingBackdrop from \"src/shared/loading-backdrop/LoadingBackdrop\";\nimport SnackbarContext from \"src/shared/context/snackbar/SnackbarContext\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport { AXIOS_ERROR_CODE } from \"src/shared/models/axios.model\";\nimport * as fromAllFilmsSelectors from '../../store/all-films/films.selectors';\nimport { useAppSelector } from \"src/store/appHook\";\n\n\nconst userId = 'yqu';\n\nconst Movies = () => {\n  const { showSnackbar } = useContext(SnackbarContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const currentDisplayModeUrl = searchParams.get(\"moviePageDisplayMode\");\n  const { isMobile } = useScreenSize();\n\n  const [filmPageDisplayMode, setFilmPageDisplayMode] = useState<string | null>(currentDisplayModeUrl);\n\n  const [fetchFavoriteTime, setFetchFavoriteTime] = useState<number>(0);\n  const [fetchMoviesParams, setFetchMoviesParams] = useState<HttpParams>({});\n  const [sortedFilms, setSortedFilms] = useState<ResultProperty<StarwarsFilm>[]>([]);\n\n  const { data: favMovies, error: favError, loading: favLoading } = useFetchFavorites({userId: userId, params: {fetchTime: fetchFavoriteTime}});\n  const { allFilms, allFilmsError, allFilmsLoading, allFilmsValidating } = useFetchMovies({ params: fetchMoviesParams });\n\n  // using redux\n  const films: ResultProperty<StarwarsFilm>[] = useAppSelector(fromAllFilmsSelectors.selectAll);\n\n  /**\n   * Sort the films by ID, and set favorites to true\n   */\n  useDeepCompareEffect(() => {\n    setSortedFilms(getSortedFilmsWithFavorited(allFilms, favMovies));\n  }, [allFilms, favMovies]);\n\n  /**\n   * Error handling\n   */\n  useEffect(() => {\n    if (allFilmsError && allFilmsError.code !== AXIOS_ERROR_CODE.ERR_CANCELED) {\n      showSnackbar(\"error\", allFilmsError);\n    }\n  }, [allFilmsError, showSnackbar]);\n\n  /**\n   * Clean up - close any snackbars\n   */\n  useEffect(() => {\n    return (() => {\n      showSnackbar('info', undefined);\n    });\n  }, [showSnackbar]);\n\n  const onReloadMoviesHandler = () => {\n    setFetchFavoriteTime(new Date().getTime());\n  };\n\n  const onFilterChangeHandler = useCallback((movieName: string) => {\n    if (movieName) {\n      setFetchMoviesParams({\n        title: movieName\n      });\n    } else {\n      setFetchMoviesParams({});\n    }\n  }, []);\n\n  const filmPageDisplayToggleHandler = () => {\n    const nextDisplayMode = {\n      moviePageDisplayMode: getNextDisplayState(filmPageDisplayMode)\n    };\n    setSearchParams(nextDisplayMode);\n  };\n\n  return (\n    <>\n      <AppToolbar toolbarProps={ {\n        position:\"sticky\",\n        sx:{top: isMobile ? '56px':'64px'}\n      } }>\n        <Grid container xs={ 12 } flexDirection={ { xs: 'row', sm: 'row' } } justifyContent=\"space-between\" alignItems=\"center\">\n          <Grid xs={ 10 } sm={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n              <Grid container xs={ 12 }>\n                <Grid xs={ 8 }>\n                  <FilterInput filterChange={ onFilterChangeHandler } />\n                </Grid>\n                <Grid xs={ 2 } sx={ {display:'flex'} } justifyContent=\"center\" alignItems=\"center\">\n                  { allFilmsValidating && <ProgressCircle size={ 20 } /> }\n                </Grid>\n              </Grid>\n            </Stack>\n          </Grid>\n          <Grid xs={ 2 } sm={ 8 }>\n            <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\">\n              <Tooltip title={ `Switch to ${getNextDisplayState(filmPageDisplayMode)}` }>\n                <IconButton onClick={ filmPageDisplayToggleHandler }>\n                  { filmPageDisplayMode === DataBlockDisplayMode.CARD ? (<TableChartIcon />) : (<ViewModuleIcon  />) }\n                </IconButton>\n              </Tooltip>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n\n      {\n        <LoadingBackdrop isLoading={ allFilmsLoading }>\n          {\n            allFilmsError ? <ErrorPage reason={ 'Failed loading all films.' } debug={ allFilmsError } /> :\n            (\n              <Stack direction=\"column\" p={ 2 } width=\"100%\">\n                <Grid container disableEqualOverflow rowSpacing={ 4 }>\n                  { films?.map((film) => {\n                    return (\n                      <Grid key={ film.properties.episode_id } xs={ 12 } sm={ 4 } smOffset={ 4 }>\n                        <MovieCard \n                          userId={ userId }\n                          reloadMovies={ onReloadMoviesHandler }\n                          film={ film.properties } \n                          uid={ film.uid }\n                          allFavoritesLoading={ favLoading }\n                           />\n                      </Grid>\n                    );\n                  }) }\n                </Grid>\n              </Stack>\n            )\n          }\n        </LoadingBackdrop>\n      }\n    </>\n  );\n};\n\nexport default Movies;\n\nconst getNextDisplayState = (current: any) => {\n  if (!current) {\n    return DataBlockDisplayMode.CARD;\n  }\n  return current === DataBlockDisplayMode.CARD ? DataBlockDisplayMode.TABLE : DataBlockDisplayMode.CARD;\n};\n","import { RootState } from \"src/store/appStore\";\nimport * as fromFilmsReducer from './films.reducer';\n\nconst allFilmsSlice = (state: RootState) => {\n  return state.allFilms;\n};\n\nexport const { selectAll, selectById, selectEntities, selectIds, selectTotal } =\n  fromFilmsReducer.adapter.getSelectors((state: RootState) => state.allFilms);\n\nexport const selectLoading = (state: RootState) => {\n  return allFilmsSlice(state).apiLoading;\n};\n\nexport const selectFirstTimeLoading = (state: RootState) => {\n  return allFilmsSlice(state).firstTimeLoading;\n};\n\nexport const selectApiUrl = (state: RootState) => {\n  return allFilmsSlice(state).apiUrl;\n};\n\nexport const selectApiParams = (state: RootState) => {\n  return allFilmsSlice(state).apiParams;\n};","import { Tooltip } from '@mui/material';\nimport Moment from 'react-moment';\nimport moment from 'moment';\n\nexport interface DateDisplayProp {\n  date: string | number;\n  fromNow?: boolean;\n  format?: string;\n}\n\nconst DateDisplay = ({ date=0, fromNow=true, format=\"MM/DD/YY HH:mm\" }: DateDisplayProp) => {\n\n  return (\n    <Tooltip title={ date ? moment(date).format(format) : 'No date found' }>\n      <span>\n        {date ? (<Moment date={ date } fromNow={ fromNow } />) : (<>N/A</>)}\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default DateDisplay;","export function sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n","import axios, { AxiosResponse } from 'axios';\nimport { sleep } from \"../utils/sleep\";\n\nexport const httpGet = async <T>(url: string, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json'\n    });\n\n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error) {\n    console.error(\"App fetcher GET error:\", error);\n    throw error;\n  }\n};\n\n\nexport const httpGetCancellable = async <T>(url: string, abortController: AbortController, slow = 0): Promise<T> => {\n  if (slow) {\n    await sleep(slow);\n  }\n  try {\n    const res: AxiosResponse<T, any> = await axios.get<T>(url, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json',\n      signal: abortController.signal\n    });\n    \n    if (res.status === 200) {\n      return res.data;\n    }\n\n    return Promise.reject(res);\n  } catch (error: any) {\n    if (error.code !== \"ERR_CANCELED\") {\n      console.error(\"App fetcher GET error:\", error);\n    }\n    throw error;\n  }\n};","export enum DataBlockDisplayMode {\n  TABLE = \"table\",\n  CARD = \"card\"\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\n\nexport interface HttpAction<T> {\n  url: string;\n  body?: any;\n  abortController?: AbortController;\n  onSuccess: (data: T) => void;\n  onFailure: (errorData: any) => void;\n  onFinally?: () => void;\n}\n/**\n * Create a Axios instance\n * @param baseUrl \n * @returns \n */\nexport const getAxiosInstance = (baseUrl: string) => {\n  const axiosInstance = axios.create({\n    baseURL: baseUrl,\n    timeout: 5000,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    responseType: 'json'\n  });\n  return axiosInstance;\n};\n\nexport const axiosGet = <T>({ url, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.get(url)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data as T);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error GET: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\n\nexport const axiosPost = <T>({ url, body, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.post(url, body)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error POST: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\nexport const axiosPut = <T>({ url, body, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.put(url, body)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error PUT: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\nexport const axiosDelete = <T>({ url, onSuccess, onFailure, onFinally, abortController }: HttpAction<T>) => {\n  axios.delete(url)\n  .then((res: AxiosResponse) => {\n    onSuccess && onSuccess(res.data);\n  })\n  .catch((err: AxiosError) => {\n    console.log(\"App error DELETE: \", err);\n    onFailure && onFailure(err);\n  })\n  .finally(() => {\n    onFinally && onFinally();\n  });\n};\n\nexport default getAxiosInstance;","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n}), 'Favorite');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m18 22-.01-6L14 12l3.99-4.01L18 2H6v6l4 4-4 3.99V22h12zM8 7.5V4h8v3.5l-4 4-4-4z\"\n}), 'HourglassBottom');\n\nexports.default = _default;"],"names":["params","refetch","useState","url","setUrl","abortControllerRef","useRef","AbortController","useDeepCompareEffect","restUrl","urlcat","BASE_SW_API","current","abort","useSWR","httpGetCancellable","revalidateOnFocus","revalidateIfStale","keepPreviousData","shouldRetryOnError","data","isValidating","error","isLoading","allFilms","result","allFilmsLoading","allFilmsValidating","allFilmsError","userId","transformed","setTransformed","BASE_FIREBASE_URL","user","httpGet","revalidateOnReconnect","useEffect","transformedData","Object","keys","forEach","key","episodeId","fireId","loading","getFilmFavoriteToggleTooltip","favorited","tooltip","dateFromNow","lastUpdated","moment","fromNow","isCurrentFavorite","MovieCard","film","uid","allFavoritesLoading","reloadMovies","saveFavLoading","setSaveFavLoading","localSaveFavLoading","setLocalSaveFavLoading","Card","sx","display","flexDirection","justifyContent","elevation","CardMedia","component","alt","height","image","process","episode_id","backgroundColor","objectFit","CardContent","Stack","direction","lg","xl","marginBottom","Typography","gutterBottom","variant","Link","to","fontFamily","fontWeight","title","color","spacing","DateDisplay","date","release_date","format","director","producer","opening_crawl","CardActions","Button","size","IconButton","onClick","filmUrl","filmId","split","length","favorite","Date","getTime","axiosPut","body","onSuccess","res","onFailure","err","onFinally","axiosPost","disabled","HourglassBottom","AXIOS_ERROR_CODE","children","Box","className","classes","width","showSnackbar","useContext","SnackbarContext","useSearchParams","searchParams","setSearchParams","currentDisplayModeUrl","get","isMobile","useScreenSize","filmPageDisplayMode","fetchFavoriteTime","setFetchFavoriteTime","fetchMoviesParams","setFetchMoviesParams","setSortedFilms","useFetchFavorites","fetchTime","favMovies","favLoading","useFetchMovies","films","useAppSelector","fromAllFilmsSelectors","produce","draft","sort","prev","next","properties","getSortedFilmsWithFavorited","code","ERR_CANCELED","undefined","onReloadMoviesHandler","onFilterChangeHandler","useCallback","movieName","toolbarProps","position","top","container","xs","sm","alignItems","FilterInput","filterChange","Tooltip","getNextDisplayState","nextDisplayMode","moviePageDisplayMode","DataBlockDisplayMode","TableChart","ViewModule","ErrorPage","reason","debug","p","disableEqualOverflow","rowSpacing","map","smOffset","allFilmsSlice","state","fromFilmsReducer","selectAll","selectApiParams","selectById","selectEntities","selectIds","selectTotal","apiParams","sleep","time","Promise","resolve","reject","setTimeout","slow","axios","headers","responseType","status","console","abortController","signal","then","catch","log","finally","useAppDispatch","useDispatch","useSelector","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}