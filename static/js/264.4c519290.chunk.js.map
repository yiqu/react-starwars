{"version":3,"file":"static/js/264.4c519290.chunk.js","mappings":"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","sources":["404/ErrorPage.tsx","core/store/favorites/favorites.selectors.ts","core/favorites/all/FavoriteCard.tsx","core/favorites/all/FavoritesAll.tsx","shared/components/date/DateDisplay2.tsx","shared/components/date/DateToNow.tsx","shared/components/date/DurationDisplay.tsx","shared/components/layouts/LayoutWithGutter.tsx","shared/components/toolbar/Toolbar.tsx","shared/hooks/useIsMobile.ts","webpack://starwars/./src/shared/loading/full-logo/LoadingLogo.module.scss?618b","shared/loading/full-logo/LoadingLogo.tsx","store/appHook.ts"],"sourcesContent":["import { Box, Stack, Typography } from \"@mui/material\";\n\nexport interface ErrorPageProp {\n  reason?: string;\n  debug?: any;\n}\n\nexport default function ErrorPage({ reason, debug }: ErrorPageProp) {\n\n  return (\n    <Box marginY={ 5 } width=\"100%\">\n      <Stack direction=\"column\" spacing={ 5 } justifyContent=\"center\" alignItems=\"center\">\n        <Typography variant=\"h5\" sx={ {textTransform:'uppercase'} }>\n          An error has occurred!\n        </Typography>\n\n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            REASON\n          </Typography>\n          <Typography variant=\"body2\">\n            { reason }\n          </Typography>\n        </Stack>\n        \n        <Stack direction=\"column\" spacing={ 1 } justifyContent=\"center\" alignItems=\"center\">\n          <Typography variant=\"body1\" fontWeight={ 700 }>\n            DEBUG\n          </Typography>\n          <Typography variant=\"body2\" component=\"div\">\n            <pre>\n              <code style={ {display: 'flex', textAlign: 'center'} }>\n                { JSON.stringify(debug) }\n              </code>\n            </pre>\n          </Typography>\n        </Stack>\n      </Stack>\n    </Box>\n  );\n};","import { createSelector, createAction, createDraftSafeSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"src/store/appStore\";\n\nconst favoritesConfigSlice = (state: RootState) => {\n  return state.favoritesConfig;\n};\n\nexport const selectShowCurrentFavoriteList = createSelector(\n  favoritesConfigSlice,\n  (state): boolean=> {\n    return !!state.showCurrentFavsList;\n  }\n);\n\nexport const selectParams = createSelector(\n  favoritesConfigSlice,\n  (state) => {\n    return state.filterParams;\n  }\n);","import { Card, CardContent, Typography, CardActions, Button, IconButton, Stack, Box, CardMedia, Divider, ListItem, ListItemAvatar, Avatar, ListItemText, CircularProgress } from \"@mui/material\";\nimport { FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { Link } from \"react-router-dom\";\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport DateToNow from \"src/shared/components/date/DateToNow\";\n\n\nexport interface FavoriteItemProps {\n  isWorking: boolean;\n  favorite: FavoriteToSave;\n  toggle: (fav: FavoriteToSave) => void;\n}\n\nexport default function FavoriteItem({ favorite, isWorking, toggle }: FavoriteItemProps) {\n\n  return (\n    <ListItem key={ favorite.fireId } secondaryAction={\n      <IconButton edge=\"end\" aria-label=\"delete\" onClick={ () => toggle(favorite) } data-tooltip-id=\"tooltip\" \n        data-tooltip-content=\"Toggle favorite\" >\n        <FavoriteIcon color={ favorite.isCurrentFavorite ? 'error' : 'disabled' } />\n      </IconButton>\n    }>\n      <ListItemAvatar sx={ {mr: 2} }>\n        <Avatar src={ `${process.env.PUBLIC_URL}/assets/poster-img/${favorite.episodeId}.png` }\n        sx={ { width: 80, height: 80 } }>\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={ <Link to={ `./${favorite.fireId}` }>\n          <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\">\n            <Typography variant=\"h5\">\n              {`Ep. ${favorite.episodeId}`} { isWorking ? <CircularProgress size={ 12 } color=\"info\" /> : '' }\n            </Typography>\n          </Stack>\n        </Link> }\n        secondary={ <Typography variant=\"body1\">Updated: <DateToNow dateInMilli={ favorite.lastUpdated } /> ago </Typography> }\n      />\n    </ListItem>\n  );\n};\n","import { useAppDispatch, useAppSelector } from \"src/store/appHook\";\nimport Grid from '@mui/material/Unstable_Grid2';\nimport { Avatar, Box, Button, CircularProgress, Divider, FormControlLabel, FormGroup, IconButton, List, ListItem, ListItemAvatar, ListItemText, Stack, Switch, Tooltip, Typography } from \"@mui/material\";\nimport { favoritesTag, starwarsFavoritesApi, useFetchFavoritesQuery, useUpdateFavoriteMutation } from \"src/core/store/favorites/favorites.api\";\nimport LoadingLogo from \"src/shared/loading/full-logo/LoadingLogo\";\nimport ErrorPage from \"src/404/ErrorPage\";\nimport AppToolbar from \"src/shared/components/toolbar/Toolbar\";\nimport DateDisplay2 from \"src/shared/components/date/DateDisplay2\";\nimport DurationDisplay from \"src/shared/components/date/DurationDisplay\";\nimport { Delete, DeleteOutline, FavoriteOutlined, RefreshOutlined } from \"@mui/icons-material\";\nimport useScreenSize from \"src/shared/hooks/useIsMobile\";\nimport LayoutWithGutter from \"src/shared/components/layouts/LayoutWithGutter\";\nimport React, { useState } from \"react\";\nimport { FavoriteToSave } from \"src/shared/models/starwars.model\";\nimport { cloneDeep } from \"lodash\";\nimport toast from \"react-hot-toast\";\nimport { selectParams, selectShowCurrentFavoriteList } from \"src/core/store/favorites/favorites.selectors\";\nimport FavoriteItem from \"./FavoriteCard\";\nimport { toggleShowCurrentFavList, updateParams } from \"src/core/store/favorites/favorites-config.reducer\";\n\nexport default function FavoritesAll() {\n\n  const { isMobile } = useScreenSize();\n  const dispatch = useAppDispatch();\n  const [updateFavorite, result] = useUpdateFavoriteMutation();\n  const favParams = useAppSelector(selectParams);\n  const { data, onlyFavorites, isLoading, isFetching, isError, error, fulfilledTimeStamp, startedTimeStamp, refetch } = useFetchFavoritesQuery(favParams, {\n    selectFromResult: (data) => {\n      return {\n        ...data,\n        onlyFavorites: data.data?.filter((fav) => {\n          return fav.isCurrentFavorite;\n        })\n      };\n    }\n  });\n  const fetchTimeDuration = (fulfilledTimeStamp ?? 0) - (startedTimeStamp ?? 0);\n  const showCurrentFavList: boolean = useAppSelector(selectShowCurrentFavoriteList);\n\n  const handleToggleFavorite = (fav: FavoriteToSave) => {\n    const toUpdate = cloneDeep(fav);\n    if (toUpdate) {\n      toUpdate.isCurrentFavorite = !toUpdate.isCurrentFavorite;\n      toUpdate.lastUpdated = new Date().getTime();\n      const update$ = updateFavorite(toUpdate);\n      update$.then((res) => toast.success(`${toUpdate.isCurrentFavorite ? 'Added' : 'Removed'} Ep. ${toUpdate.episodeId} as favorites`));\n    }\n  };\n\n  const handleRefreshFavorites = () => {\n    const refresh$ = refetch();\n    toast.promise(refresh$, {\n      loading: 'Getting latest...',\n      success: 'Successfully refreshed all favorites!',\n      error: 'Error refreshing favorites'\n    });\n  };\n\n  const handleRefreshWithParams = () => {\n    dispatch(updateParams({time: `${new Date().getTime()}`}));\n  };\n\n  const handleShowCurrentFavToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(toggleShowCurrentFavList(event.target.checked));\n  };\n\n\n  if (isLoading) return (\n    <Stack direction=\"column\" width=\"100%\" justifyContent=\"center\" alignItems=\"center\" height=\"100vh\">\n      <LoadingLogo message={ 'Favorites' } />\n    </Stack>\n  );\n\n  if (isError) {\n    return <ErrorPage reason={ (error as any).status } debug={ (error as any).error } />;\n  }\n\n  if (!onlyFavorites || !data) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"column\" width=\"100%\">\n      <AppToolbar toolbarProps={ {\n          position: \"sticky\",\n          sx: {top: isMobile ? '56px':'64px'}\n        } }>\n        <Grid container xs={ 12 }>\n          <Grid xs={ 4 }>\n            <Stack direction=\"row\" justifyContent=\"start\" alignItems=\"center\" width=\"100%\">\n            </Stack>\n          </Grid>\n          <Grid xs={ 8 } xsOffset=\"auto\" display=\"flex\">\n            <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\" width=\"100%\" spacing={ 2 } data-tooltip-id=\"general-tooltip\"\n              data-tooltip-content={ `Refresh` }>\n              { isFetching && <CircularProgress size={ 20 } /> }\n              { !isFetching && <Typography fontSize={ 11 } component=\"div\">\n                Last fetched <DateDisplay2 dateInMilli={ fulfilledTimeStamp ?? 0 } />, took: <DurationDisplay durationInMilli={ fetchTimeDuration } />\n              </Typography> }\n              <Divider orientation=\"vertical\" flexItem={ true } variant=\"middle\" />\n              <Stack direction=\"row\" justifyContent=\"end\" alignItems=\"center\">\n                <FormGroup>\n                  <FormControlLabel control={ <Switch checked={ showCurrentFavList } onChange={ handleShowCurrentFavToggle } /> } label=\"Show Current Favorites\" />\n                </FormGroup>\n                <Button variant=\"outlined\" startIcon={ <RefreshOutlined /> } onClick={ handleRefreshFavorites } sx={ {mr: 2} }>\n                  Refresh\n                </Button>\n                <Button variant=\"outlined\" startIcon={ <RefreshOutlined /> } onClick={ handleRefreshWithParams }>\n                  Refresh with random params\n                </Button>\n              </Stack>\n            </Stack>\n          </Grid>\n        </Grid>\n      </AppToolbar>\n      <Box mt={ 2 } mx={ isMobile ? 2 : 0 }>\n        <LayoutWithGutter size={ 'skinny' }>\n          {\n            showCurrentFavList && (\n              <>\n                <Divider sx={ {width: '100%', alignItems: 'flex-start', mb: 4} }>Current Favorites</Divider>\n          \n                <List dense={ false } sx={ {width: '100%'} }>\n                  {\n                    onlyFavorites.map((fav) => {\n                      return (\n                        <React.Fragment key={ fav.fireId }>\n                          <FavoriteItem isWorking={ !!fav.apiWorking } favorite={ fav } toggle={ handleToggleFavorite } />\n                          <Divider variant=\"inset\" component=\"li\" />\n                        </React.Fragment>\n                      );})\n                  }\n                </List>\n              </>\n            )\n          }\n\n          <Divider sx={ {width: '100%', alignItems: 'flex-start', my: 4} }>All</Divider>\n\n          <List dense={ false } sx={ {width: '100%'} }>\n            { data.map((fav) => {\n              return (\n                <React.Fragment key={ fav.fireId }>\n                  <FavoriteItem isWorking={ !!fav.apiWorking } favorite={ fav } toggle={ handleToggleFavorite } />\n                  <Divider variant=\"inset\" component=\"li\" />\n                </React.Fragment>\n              );\n            }) }\n          </List>\n\n        </LayoutWithGutter>\n      </Box>\n    </Stack>\n  );\n};","import { format } from 'date-fns';\n\n\nexport interface DateDisplay2Props {\n  dateInMilli: number | undefined;\n}\n\nfunction DateDisplay2({ dateInMilli }: DateDisplay2Props) {\n  return (\n    <>\n      { (dateInMilli !== undefined) && format(dateInMilli, 'MM/dd/yyyy p') }\n    </>\n  );\n};\n\nexport default DateDisplay2;","import { formatDistanceToNow } from 'date-fns';\n\nexport interface DateDisplay2Props {\n  dateInMilli: number | undefined;\n}\n\nfunction DateToNow({ dateInMilli }: DateDisplay2Props) {\n  return (\n    <>\n      { (dateInMilli !== undefined) && formatDistanceToNow(dateInMilli, { includeSeconds: true }) }\n    </>\n  );\n};\n\nexport default DateToNow;","import { formatDistance } from 'date-fns';\n\n\nexport interface DurationDisplayProps {\n  durationInMilli: number;\n}\n\nfunction DurationDisplay({ durationInMilli }: DurationDisplayProps) {\n  return (\n    <>\n      { (durationInMilli > 1000) ? (formatDistance(0, durationInMilli, { includeSeconds : true })) : (durationInMilli + ' ms') }\n    </>\n  );\n};\n\nexport default DurationDisplay;","import Grid from '@mui/material/Unstable_Grid2';\nimport { ReactNode } from 'react';\n\nexport interface LayoutGutterProps {\n  children: ReactNode;\n  size?: \"full\" | \"med\" | \"skinny\"\n}\n\nfunction LayoutWithGutter({ size = \"med\", children }: LayoutGutterProps) {\n\n  return (\n    // <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } sm={ sizes.width } smOffset={ sizes.offset }>\n    //   { children }\n    // </Grid>\n    <Grid container spacing={ 0 } xs={ 12 } xsOffset={ 0 } \n      sm={ size==='full' ? 12 : (size === 'med' ? 7 : (4)) } \n      smOffset={ size==='full' ? 0 : (size === 'med' ? 2.5 : (4)) }>\n      { children }\n    </Grid>\n  );\n}\n\nexport default LayoutWithGutter;","import { AppBar, Stack, Button, Tooltip, IconButton, AppBarTypeMap } from \"@mui/material\";\nimport { DataBlockDisplayMode } from \"src/shared/models/general.model\";\nimport Toolbar from '@mui/material/Toolbar';\nimport { GREY } from \"src/theme/palette\";\n\ninterface ToolbarProps {\n  toolbarProps: any;\n  children: any;\n}\n\nexport default function AppToolbar({ toolbarProps, children }: ToolbarProps) {\n  \n  return (\n    <AppBar elevation={ 0 } { ...toolbarProps }>\n      <Toolbar \n        variant=\"regular\" \n        sx={ {bgcolor: (theme) => theme.palette.mode === 'light' ? GREY[50] : null, \n          color: (theme) => theme.palette.mode === 'light' ? '#000' : null,\n          pr: 0\n        } }>\n        { children }\n      </Toolbar>\n    </AppBar>\n  );\n}","import useMediaQuery from '@mui/material/useMediaQuery';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n * A media query string\n * which matches screen widths less than the screen size given by the breakpoint key (down)\n * @returns \n */\nconst useScreenSize = () => {\n\n  const theme = useTheme();\n\n  const isMobileScreenSize = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const isMediumSize = useMediaQuery(theme.breakpoints.between('sm', 'md'));\n\n  const isLargeSize = useMediaQuery(theme.breakpoints.between('md', 'lg'));\n\n  const isXlSize = useMediaQuery(theme.breakpoints.between('lg', 'xl'));\n\n  const isAboveXlSize = useMediaQuery(theme.breakpoints.up('xl'));\n\n\n  return {\n    isMobile: isMobileScreenSize,\n    isMed: isMediumSize,\n    isLg: isLargeSize,\n    isXl: isXlSize,\n    isAboveXl: isAboveXlSize\n  };\n\n};\n\nexport default useScreenSize;","// extracted by mini-css-extract-plugin\nexport default {\"parentClass\":\"LoadingLogo_parentClass__NFHXT\",\"loadingLogo\":\"LoadingLogo_loadingLogo__BqUtz\",\"loadingParent\":\"LoadingLogo_loadingParent__VASnq\",\"loading-container\":\"LoadingLogo_loading-container__cjLsJ\",\"whole-page\":\"LoadingLogo_whole-page__DkCG7\",\"ldsFacebook\":\"LoadingLogo_ldsFacebook__pRdY2\",\"lds-facebook\":\"LoadingLogo_lds-facebook__JLntj\"};","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useReducer, useState, useContext, useMemo, Suspense } from 'react';\nimport classes from './LoadingLogo.module.scss';\nimport logo from '../../../static/img/death-star.png';\n\nexport interface LoadingLogoProps {\n  message: string;\n  children?: any;\n}\n\nexport default function LoadingLogo(props: LoadingLogoProps) {\n\n\n  return (\n    <div className={ `${classes.parentClass} w-100` }>\n      <div>\n        <div className={ classes.loadingLogo }>\n          <img src={ logo }\n            className={ `${classes.logoImg} d-inline-block` } alt=\"logo\" />\n        </div>\n    \n      </div>\n      <div className={ classes.loadingParent }>\n        <div className={ classes.ldsFacebook }><div></div><div></div><div></div></div>\n      </div>\n      <div className={ classes.secfont }>\n        Loading {props.message} ...\n      </div>\n    </div>\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport type { TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './appStore';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["ErrorPage","reason","debug","marginY","width","direction","spacing","justifyContent","alignItems","variant","sx","textTransform","fontWeight","component","style","display","textAlign","JSON","stringify","favoritesConfigSlice","state","favoritesConfig","selectShowCurrentFavoriteList","createSelector","showCurrentFavsList","selectParams","filterParams","FavoriteItem","favorite","isWorking","toggle","ListItem","secondaryAction","IconButton","edge","onClick","Favorite","color","isCurrentFavorite","ListItemAvatar","mr","Avatar","src","process","episodeId","height","ListItemText","primary","to","fireId","Stack","Typography","CircularProgress","size","secondary","DateToNow","dateInMilli","lastUpdated","FavoritesAll","isMobile","useScreenSize","dispatch","useAppDispatch","useUpdateFavoriteMutation","updateFavorite","favParams","useAppSelector","useFetchFavoritesQuery","selectFromResult","data","onlyFavorites","filter","fav","isLoading","isFetching","isError","error","fulfilledTimeStamp","startedTimeStamp","refetch","fetchTimeDuration","showCurrentFavList","handleToggleFavorite","toUpdate","cloneDeep","Date","getTime","then","res","toast","LoadingLogo","message","status","toolbarProps","position","top","container","xs","xsOffset","fontSize","DateDisplay2","DurationDisplay","durationInMilli","Divider","orientation","flexItem","FormGroup","FormControlLabel","control","Switch","checked","onChange","event","toggleShowCurrentFavList","target","label","Button","startIcon","RefreshOutlined","refresh$","loading","success","updateParams","time","Box","mt","mx","LayoutWithGutter","mb","List","dense","map","apiWorking","my","undefined","format","formatDistanceToNow","includeSeconds","formatDistance","children","sm","smOffset","AppToolbar","elevation","bgcolor","theme","palette","mode","GREY","pr","useTheme","useMediaQuery","breakpoints","down","isMed","between","isLg","isXl","isAboveXl","up","props","className","classes","logo","alt","useDispatch","useSelector"],"sourceRoot":""}